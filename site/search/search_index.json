{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"001-\u7f51\u7edcudp/","text":"3.1\u7f51\u7edc\u901a\u4fe1\u6982\u8ff0 \u00b6 1. \u4ec0\u4e48\u662f\u7f51\u7edc \u00b6 \u8bf4\u660e \u00b6 \u7f51\u7edc\u5c31\u662f\u4e00\u79cd\u8f85\u52a9\u53cc\u65b9\u6216\u8005\u591a\u65b9\u80fd\u591f\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u5de5\u5177 \u5982\u679c\u6ca1\u6709\u7f51\u7edc\u53ef\u60f3 \u5355\u673a \u7684\u4e16\u754c\u662f\u591a\u4e48\u7684\u5b64\u5355 \u5355\u673a\u6e38\u620f\uff08\u4e0d\u80fd\u548c\u8fdc\u5728\u4ed6\u4e61\u7684\u670b\u53cb\u4e00\u8d77\u73a9\uff09 \u00b6 2. \u4f7f\u7528\u7f51\u7edc\u7684\u76ee\u7684 \u00b6 \u5c31\u662f\u4e3a\u4e86\u8054\u901a\u591a\u65b9\u7136\u540e\u8fdb\u884c\u901a\u4fe1\u7528\u7684\uff0c\u5373\u628a\u6570\u636e\u4ece\u4e00\u65b9\u4f20\u9012\u7ed9\u53e6\u5916\u4e00\u65b9 \u524d\u9762\u7684\u5b66\u4e60\u7f16\u5199\u7684\u7a0b\u5e8f\u90fd\u662f\u5355\u673a\u7684\uff0c\u5373\u4e0d\u80fd\u548c\u5176\u4ed6\u7535\u8111\u4e0a\u7684\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1 \u4e3a\u4e86\u8ba9\u5728\u4e0d\u540c\u7684\u7535\u8111\u4e0a\u8fd0\u884c\u7684\u8f6f\u4ef6\uff0c\u4e4b\u95f4\u80fd\u591f\u4e92\u76f8\u4f20\u9012\u6570\u636e\uff0c\u5c31\u9700\u8981\u501f\u52a9\u7f51\u7edc\u7684\u529f\u80fd \u5c0f\u603b\u7ed3 \u00b6 \u4f7f\u7528\u7f51\u7edc\u80fd\u591f\u628a\u591a\u65b9\u94fe\u63a5\u5728\u4e00\u8d77\uff0c\u7136\u540e\u53ef\u4ee5\u8fdb\u884c\u6570\u636e\u4f20\u9012 \u6240\u8c13\u7684\u7f51\u7edc\u7f16\u7a0b\u5c31\u662f\uff0c\u8ba9\u5728\u4e0d\u540c\u7684\u7535\u8111\u4e0a\u7684\u8f6f\u4ef6\u80fd\u591f\u8fdb\u884c\u6570\u636e\u4f20\u9012\uff0c\u5373\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1 3.2ip\u5730\u5740 \u00b6 1. \u4ec0\u4e48\u662f\u5730\u5740 \u00b6 \u5730\u5740\u5c31\u662f\u7528\u6765\u6807\u8bb0\u5730\u70b9\u7684 2. ip\u5730\u5740\u7684\u4f5c\u7528 \u00b6 ip\u5730\u5740\uff1a\u7528\u6765\u5728\u7f51\u7edc\u4e2d\u6807\u8bb0\u4e00\u53f0\u7535\u8111\uff0c\u6bd4\u5982192.168.1.1\uff1b\u5728\u672c\u5730\u5c40\u57df\u7f51\u4e0a\u662f\u552f\u4e00\u7684\u3002 \u00b6 3. ip\u5730\u5740\u7684\u5206\u7c7b\uff08\u4e86\u89e3\uff09 \u00b6 \u6bcf\u4e00\u4e2aIP\u5730\u5740\u5305\u62ec\u4e24\u90e8\u5206\uff1a\u7f51\u7edc\u5730\u5740\u548c\u4e3b\u673a\u5730\u5740 3.1 A\u7c7bIP\u5730\u5740 \u00b6 \u4e00\u4e2aA\u7c7bIP\u5730\u5740\u75311\u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c3\u5b57\u8282\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c\u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f\u201c0\u201d\uff0c \u5730\u5740\u8303\u56f41.0.0.1-126.255.255.254 \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\uff1a00000001 00000000 00000000 00000001 - 01111110 11111111 11111111 11111110 \u53ef\u7528\u7684A\u7c7b\u7f51\u7edc\u6709126\u4e2a\uff0c\u6bcf\u4e2a\u7f51\u7edc\u80fd\u5bb9\u7eb31677214\u4e2a\u4e3b\u673a 3.2 B\u7c7bIP\u5730\u5740 \u00b6 \u4e00\u4e2aB\u7c7bIP\u5730\u5740\u75312\u4e2a\u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c2\u4e2a\u5b57\u8282\u7684\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c\u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f\u201c10\u201d\uff0c \u5730\u5740\u8303\u56f4128.1.0.1-191.255.255.254 \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\uff1a10000000 00000001 00000000 00000001 - 10111111 11111111 11111111 11111110 \u53ef\u7528\u7684B\u7c7b\u7f51\u7edc\u670916384\u4e2a\uff0c\u6bcf\u4e2a\u7f51\u7edc\u80fd\u5bb9\u7eb365534\u4e3b\u673a 3.3 C\u7c7bIP\u5730\u5740 \u00b6 \u4e00\u4e2aC\u7c7bIP\u5730\u5740\u75313\u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c1\u5b57\u8282\u7684\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c\u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f\u201c110\u201d \u8303\u56f4192.0.1.1-223.255.255.254 \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a: 11000000 00000000 00000001 00000001 - 11011111 11111111 11111110 11111110 C\u7c7b\u7f51\u7edc\u53ef\u8fbe2097152\u4e2a\uff0c\u6bcf\u4e2a\u7f51\u7edc\u80fd\u5bb9\u7eb3254\u4e2a\u4e3b\u673a 3.4 D\u7c7b\u5730\u5740\u7528\u4e8e\u591a\u70b9\u5e7f\u64ad \u00b6 D\u7c7bIP\u5730\u5740\u7b2c\u4e00\u4e2a\u5b57\u8282\u4ee5\u201c1110\u201d\u5f00\u59cb\uff0c\u5b83\u662f\u4e00\u4e2a\u4e13\u95e8\u4fdd\u7559\u7684\u5730\u5740\u3002 \u5b83\u5e76\u4e0d\u6307\u5411\u7279\u5b9a\u7684\u7f51\u7edc\uff0c\u76ee\u524d\u8fd9\u4e00\u7c7b\u5730\u5740\u88ab\u7528\u5728\u591a\u70b9\u5e7f\u64ad\uff08Multicast\uff09\u4e2d \u591a\u70b9\u5e7f\u64ad\u5730\u5740\u7528\u6765\u4e00\u6b21\u5bfb\u5740\u4e00\u7ec4\u8ba1\u7b97\u673a s \u5730\u5740\u8303\u56f4224.0.0.1-239.255.255.254 3.5 E\u7c7bIP\u5730\u5740 \u00b6 \u4ee5\u201c1111\u201d\u5f00\u59cb\uff0c\u4e3a\u5c06\u6765\u4f7f\u7528\u4fdd\u7559 E\u7c7b\u5730\u5740\u4fdd\u7559\uff0c\u4ec5\u4f5c\u5b9e\u9a8c\u548c\u5f00\u53d1\u7528 3.6 \u79c1\u6709ip \u00b6 \u5728\u8fd9\u4e48\u591a\u7f51\u7edcIP\u4e2d\uff0c\u56fd\u9645\u89c4\u5b9a\u6709\u4e00\u90e8\u5206IP\u5730\u5740\u662f\u7528\u4e8e\u6211\u4eec\u7684\u5c40\u57df\u7f51\u4f7f\u7528\uff0c\u4e5f\u5c31 \u662f\u5c5e\u4e8e\u79c1\u7f51IP\uff0c\u4e0d\u5728\u516c\u7f51\u4e2d\u4f7f\u7528\u7684\uff0c\u5b83\u4eec\u7684\u8303\u56f4\u662f\uff1a 10.0.0.0\uff5e10.255.255.255 172.16.0.0\uff5e172.31.255.255 192.168.0.0\uff5e192.168.255.255 3.7 \u6ce8\u610f \u00b6 IP\u5730\u5740127\uff0e0\uff0e0\uff0e1~127\uff0e255\uff0e255\uff0e255\u7528\u4e8e\u56de\u8def\u6d4b\u8bd5\uff0c \u5982\uff1a127.0.0.1\u53ef\u4ee5\u4ee3\u8868\u672c\u673aIP\u5730\u5740\uff0c\u7528 http://127.0.0.1 \u5c31\u53ef\u4ee5\u6d4b\u8bd5\u672c\u673a\u4e2d\u914d\u7f6e\u7684Web\u670d\u52a1\u5668\u3002 3.3Linux\u547d\u4ee4(ping, ifconfig) \u00b6 \u67e5\u770b\u6216\u914d\u7f6e\u7f51\u5361\u4fe1\u606f\uff1aifconfig \u00b6 \u5982\u679c\uff0c\u6211\u4eec\u53ea\u662f\u6572\uff1aifconfig\uff0c\u5b83\u4f1a\u663e\u793a\u6240\u6709\u7f51\u5361\u7684\u4fe1\u606f\uff1a \u6d4b\u8bd5\u8fdc\u7a0b\u4e3b\u673a\u8fde\u901a\u6027\uff1aping \u00b6 \u901a\u5e38\u7528ping\u6765\u68c0\u6d4b\u7f51\u7edc\u662f\u5426\u6b63\u5e38 3.4\u7aef\u53e3 \u00b6 1. \u4ec0\u4e48\u662f\u7aef\u53e3 \u00b6 \u7aef\u53e3\u5c31\u597d\u4e00\u4e2a\u623f\u5b50\u7684\u95e8\uff0c\u662f\u51fa\u5165\u8fd9\u95f4\u623f\u5b50\u7684\u5fc5\u7ecf\u4e4b\u8def\u3002 \u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u6536\u53d1\u7f51\u7edc\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6709\u8fd9\u6837\u7684\u7aef\u53e3 \u5728linux\u7cfb\u7edf\u4e2d\uff0c\u7aef\u53e3\u53ef\u4ee5\u670965536\uff082\u768416\u6b21\u65b9\uff09\u4e2a\u4e4b\u591a\uff01 \u65e2\u7136\u6709\u8fd9\u4e48\u591a\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u4e86\u7edf\u4e00\u7ba1\u7406\uff0c\u6240\u4ee5\u8fdb\u884c\u4e86\u7f16\u53f7\uff0c\u8fd9\u5c31\u662f \u7aef\u53e3\u53f7 2. \u7aef\u53e3\u53f7 \u00b6 \u7aef\u53e3\u662f\u901a\u8fc7\u7aef\u53e3\u53f7\u6765\u6807\u8bb0\u7684\uff0c\u7aef\u53e3\u53f7\u53ea\u6709\u6574\u6570\uff0c\u8303\u56f4\u662f\u4ece0\u523065535 \u6ce8\u610f\uff1a\u7aef\u53e3\u6570\u4e0d\u4e00\u6837\u7684*nix\u7cfb\u7edf\u4e0d\u4e00\u6837\uff0c\u8fd8\u53ef\u4ee5\u624b\u52a8\u4fee\u6539 3. \u7aef\u53e3\u662f\u600e\u6837\u5206\u914d\u7684 \u00b6 \u7aef\u53e3\u53f7\u4e0d\u662f\u968f\u610f\u4f7f\u7528\u7684\uff0c\u800c\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5b9a\u8fdb\u884c\u5206\u914d\u3002 \u7aef\u53e3\u7684\u5206\u7c7b\u6807\u51c6\u6709\u597d\u51e0\u79cd\uff0c\u6211\u4eec\u8fd9\u91cc\u4e0d\u505a\u8be6\u7ec6\u8bb2\u89e3\uff0c\u53ea\u4ecb\u7ecd\u4e00\u4e0b\u77e5\u540d\u7aef\u53e3\u548c\u52a8\u6001\u7aef\u53e3 3.1 \u77e5\u540d\u7aef\u53e3\uff08Well Known Ports\uff09 \u00b6 \u77e5\u540d\u7aef\u53e3\u662f\u4f17\u6240\u5468\u77e5\u7684\u7aef\u53e3\u53f7\uff0c\u8303\u56f4\u4ece0\u52301023 80\u7aef\u53e3\u5206\u914d\u7ed9HTTP\u670d\u52a1 21\u7aef\u53e3\u5206\u914d\u7ed9FTP\u670d\u52a1 \u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u4e00\u4e9b\u5e38\u7528\u7684\u529f\u80fd\u4f7f\u7528\u7684\u53f7\u7801\u662f\u4f30\u8ba1\u7684\uff0c\u597d\u6bd4 \u7535\u8bdd\u53f7\u7801110\u300110086\u300110010\u4e00\u6837 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u77e5\u540d\u7aef\u53e3\u7684\u9700\u8981\u6709root\u6743\u9650 3.2 \u52a8\u6001\u7aef\u53e3\uff08Dynamic Ports\uff09 \u00b6 \u52a8\u6001\u7aef\u53e3\u7684\u8303\u56f4\u662f\u4ece1024\u523065535 \u4e4b\u6240\u4ee5\u79f0\u4e3a\u52a8\u6001\u7aef\u53e3\uff0c\u662f\u56e0\u4e3a\u5b83\u4e00\u822c\u4e0d\u56fa\u5b9a\u5206\u914d\u67d0\u79cd\u670d\u52a1\uff0c\u800c\u662f\u52a8\u6001\u5206\u914d\u3002 \u52a8\u6001\u5206\u914d\u662f\u6307\u5f53\u4e00\u4e2a\u7cfb\u7edf\u7a0b\u5e8f\u6216\u5e94\u7528\u7a0b\u5e8f\u7a0b\u5e8f\u9700\u8981\u7f51\u7edc\u901a\u4fe1\u65f6\uff0c\u5b83\u5411\u4e3b\u673a\u7533\u8bf7\u4e00\u4e2a\u7aef\u53e3\uff0c\u4e3b\u673a\u4ece\u53ef\u7528\u7684\u7aef\u53e3\u53f7\u4e2d\u5206\u914d\u4e00\u4e2a\u4f9b\u5b83\u4f7f\u7528\u3002 \u5f53\u8fd9\u4e2a\u7a0b\u5e8f\u5173\u95ed\u65f6\uff0c\u540c\u65f6\u4e5f\u5c31\u91ca\u653e\u4e86\u6240\u5360\u7528\u7684\u7aef\u53e3\u53f7 3.3 \u600e\u6837\u67e5\u770b\u7aef\u53e3 \uff1f \u00b6 \u7528\u201cnetstat \uff0dan\u201d\u67e5\u770b\u7aef\u53e3\u72b6\u6001 lsof -i [tcp/udp]:2425 4. \u5c0f\u603b\u7ed3 \u00b6 \u7aef\u53e3\u6709\u4ec0\u4e48\u7528\u5462 \uff1f \u6211\u4eec\u77e5\u9053\uff0c\u4e00\u53f0\u62e5\u6709IP\u5730\u5740\u7684\u4e3b\u673a\u53ef\u4ee5\u63d0\u4f9b\u8bb8\u591a\u670d\u52a1\uff0c\u6bd4\u5982HTTP\uff08\u4e07\u7ef4\u7f51\u670d\u52a1\uff09\u3001FTP\uff08\u6587\u4ef6\u4f20\u8f93\uff09\u3001SMTP\uff08\u7535\u5b50\u90ae\u4ef6\uff09\u7b49\uff0c\u8fd9\u4e9b\u670d\u52a1\u5b8c\u5168\u53ef\u4ee5\u901a\u8fc71\u4e2aIP\u5730\u5740\u6765\u5b9e\u73b0\u3002\u90a3\u4e48\uff0c\u4e3b\u673a\u662f\u600e\u6837\u533a\u5206\u4e0d\u540c\u7684\u7f51\u7edc\u670d\u52a1\u5462\uff1f\u663e\u7136\u4e0d\u80fd\u53ea\u9760IP\u5730\u5740\uff0c\u56e0\u4e3aIP\u5730\u5740\u4e0e\u7f51\u7edc\u670d\u52a1\u7684\u5173\u7cfb\u662f\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\u3002\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7\u201cIP\u5730\u5740+\u7aef\u53e3\u53f7\u201d\u6765\u533a\u5206\u4e0d\u540c\u7684\u670d\u52a1\u7684\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7aef\u53e3\u5e76\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u6bd4\u5982\u4f60\u7684\u7535\u8111\u4f5c\u4e3a\u5ba2\u6237\u673a\u8bbf\u95ee\u4e00\u53f0WWW\u670d\u52a1\u5668\u65f6\uff0cWWW\u670d\u52a1\u5668\u4f7f\u7528\u201c80\u201d\u7aef\u53e3\u4e0e\u4f60\u7684\u7535\u8111\u901a\u4fe1\uff0c\u4f46\u4f60\u7684\u7535\u8111\u5219\u53ef\u80fd\u4f7f\u7528\u201c3457\u201d\u8fd9\u6837\u7684\u7aef\u53e3\u3002 3.5socket\u7b80\u4ecb \u00b6 1. \u4e0d\u540c\u7535\u8111\u4e0a\u7684\u8fdb\u7a0b\u4e4b\u95f4\u5982\u4f55\u901a\u4fe1 \u00b6 \u9996\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5426\u5219\u901a\u4fe1\u65e0\u4ece\u8c08\u8d77\uff01 \u57281\u53f0\u7535\u8111\u4e0a\u53ef\u4ee5\u901a\u8fc7\u8fdb\u7a0b\u53f7\uff08PID\uff09\u6765\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4f46\u662f\u5728\u7f51\u7edc\u4e2d\u8fd9\u662f\u884c\u4e0d\u901a\u7684\u3002 \u5176\u5b9eTCP/IP\u534f\u8bae\u65cf\u5df2\u7ecf\u5e2e\u6211\u4eec\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u7f51\u7edc\u5c42\u7684\u201cip\u5730\u5740\u201d\u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u7f51\u7edc\u4e2d\u7684\u4e3b\u673a\uff0c\u800c\u4f20\u8f93\u5c42\u7684\u201c\u534f\u8bae+\u7aef\u53e3\u201d\u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u4e3b\u673a\u4e2d\u7684\u5e94\u7528\u8fdb\u7a0b\uff08\u8fdb\u7a0b\uff09\u3002 \u8fd9\u6837\u5229\u7528ip\u5730\u5740\uff0c\u534f\u8bae\uff0c\u7aef\u53e3\u5c31\u53ef\u4ee5\u6807\u8bc6\u7f51\u7edc\u7684\u8fdb\u7a0b\u4e86\uff0c\u7f51\u7edc\u4e2d\u7684\u8fdb\u7a0b\u901a\u4fe1\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6807\u5fd7\u4e0e\u5176\u5b83\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92 \u6ce8\u610f\uff1a \u00b6 \u6240\u8c13 \u8fdb\u7a0b \u6307\u7684\u662f\uff1a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4ee5\u53ca\u8fd0\u884c\u65f6\u7528\u5230\u7684\u8d44\u6e90\u8fd9\u4e2a\u6574\u4f53\u79f0\u4e4b\u4e3a\u8fdb\u7a0b\uff08\u5728\u8bb2\u89e3\u591a\u4efb\u52a1\u7f16\u7a0b\u65f6\u8fdb\u884c\u8be6\u7ec6\u8bb2\u89e3\uff09 \u6240\u8c13 \u8fdb\u7a0b\u95f4\u901a\u4fe1 \u6307\u7684\u662f\uff1a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e4b\u95f4\u7684\u6570\u636e\u5171\u4eab \u540e\u9762\u8bfe\u7a0b\u4e2d\u4f1a\u8be6\u7ec6\u8bf4\u5230\uff0c\u50cf\u7f51\u7edc\u5c42\u7b49\u77e5\u8bc6\uff0c\u4e0d\u8981\u7740\u6025 2. \u4ec0\u4e48\u662fsocket \u00b6 socket(\u7b80\u79f0 \u5957\u63a5\u5b57 ) \u662f\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5b83\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4e00\u4e2a\u4e3b\u8981\u4e0d\u540c\u662f\uff1a \u5b83\u80fd\u5b9e\u73b0\u4e0d\u540c\u4e3b\u673a\u95f4\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u6211\u4eec\u7f51\u7edc\u4e0a\u5404\u79cd\u5404\u6837\u7684\u670d\u52a1\u5927\u591a\u90fd\u662f\u57fa\u4e8e Socket \u6765\u5b8c\u6210\u901a\u4fe1\u7684 \u4f8b\u5982\u6211\u4eec\u6bcf\u5929\u6d4f\u89c8\u7f51\u9875\u3001QQ \u804a\u5929\u3001\u6536\u53d1 email \u7b49\u7b49 3. \u521b\u5efasocket \u00b6 \u5728 Python \u4e2d \u4f7f\u7528socket \u6a21\u5757\u7684\u51fd\u6570 socket \u5c31\u53ef\u4ee5\u5b8c\u6210\uff1a import socket socket . socket ( AddressFamily , Type ) \u8bf4\u660e\uff1a \u00b6 \u51fd\u6570 socket.socket \u521b\u5efa\u4e00\u4e2a socket\uff0c\u8be5\u51fd\u6570\u5e26\u6709\u4e24\u4e2a\u53c2\u6570\uff1a Address Family\uff1a\u53ef\u4ee5\u9009\u62e9 AF_INET\uff08\u7528\u4e8e Internet \u8fdb\u7a0b\u95f4\u901a\u4fe1\uff09 \u6216\u8005 AF_UNIX\uff08\u7528\u4e8e\u540c\u4e00\u53f0\u673a\u5668\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff09,\u5b9e\u9645\u5de5\u4f5c\u4e2d\u5e38\u7528AF_INET Type\uff1a\u5957\u63a5\u5b57\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f SOCK_STREAM\uff08\u6d41\u5f0f\u5957\u63a5\u5b57\uff0c\u4e3b\u8981\u7528\u4e8e TCP \u534f\u8bae\uff09\u6216\u8005 SOCK_DGRAM\uff08\u6570\u636e\u62a5\u5957\u63a5\u5b57\uff0c\u4e3b\u8981\u7528\u4e8e UDP \u534f\u8bae\uff09 \u521b\u5efa\u4e00\u4e2atcp socket\uff08tcp\u5957\u63a5\u5b57\uff09 import socket # \u521b\u5efatcp\u7684\u5957\u63a5\u5b57 s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # ...\u8fd9\u91cc\u662f\u4f7f\u7528\u5957\u63a5\u5b57\u7684\u529f\u80fd\uff08\u7701\u7565\uff09... # \u4e0d\u7528\u7684\u65f6\u5019\uff0c\u5173\u95ed\u5957\u63a5\u5b57 s . close () \u521b\u5efa\u4e00\u4e2audp socket\uff08udp\u5957\u63a5\u5b57\uff09 import socket # \u521b\u5efaudp\u7684\u5957\u63a5\u5b57 s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) # ...\u8fd9\u91cc\u662f\u4f7f\u7528\u5957\u63a5\u5b57\u7684\u529f\u80fd\uff08\u7701\u7565\uff09... # \u4e0d\u7528\u7684\u65f6\u5019\uff0c\u5173\u95ed\u5957\u63a5\u5b57 s . close () \u8bf4\u660e \u00b6 \u5957\u63a5\u5b57\u4f7f\u7528\u6d41\u7a0b \u4e0e \u6587\u4ef6\u7684\u4f7f\u7528\u6d41\u7a0b\u5f88\u7c7b\u4f3c \u521b\u5efa\u5957\u63a5\u5b57 \u4f7f\u7528\u5957\u63a5\u5b57\u6536/\u53d1\u6570\u636e \u5173\u95ed\u5957\u63a5\u5b57 3.6udp\u7f51\u7edc\u7a0b\u5e8f-\u53d1\u9001\u3001\u63a5\u6536\u6570\u636e \u00b6 1. udp\u7f51\u7edc\u7a0b\u5e8f-\u53d1\u9001\u6570\u636e \u00b6 \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8eudp\u7684\u7f51\u7edc\u7a0b\u5e8f\u6d41\u7a0b\u5f88\u7b80\u5355\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u521b\u5efa\u5ba2\u6237\u7aef\u5957\u63a5\u5b57 \u53d1\u9001/\u63a5\u6536\u6570\u636e \u5173\u95ed\u5957\u63a5\u5b57 \u4ee3\u7801\u5982\u4e0b\uff1a #coding=utf-8 from socket import * # 1\\. \u521b\u5efaudp\u5957\u63a5\u5b57 udp_socket = socket ( AF_INET , SOCK_DGRAM ) # 2\\. \u51c6\u5907\u63a5\u6536\u65b9\u7684\u5730\u5740 # '192.168.1.103'\u8868\u793a\u76ee\u7684ip\u5730\u5740 # 8080\u8868\u793a\u76ee\u7684\u7aef\u53e3 dest_addr = ( '192.168.1.103' , 8080 ) # \u6ce8\u610f \u662f\u5143\u7ec4\uff0cip\u662f\u5b57\u7b26\u4e32\uff0c\u7aef\u53e3\u662f\u6570\u5b57 # 3\\. \u4ece\u952e\u76d8\u83b7\u53d6\u6570\u636e send_data = input ( \"\u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e:\" ) # 4\\. \u53d1\u9001\u6570\u636e\u5230\u6307\u5b9a\u7684\u7535\u8111\u4e0a\u7684\u6307\u5b9a\u7a0b\u5e8f\u4e2d udp_socket . sendto ( send_data . encode ( 'utf-8' ), dest_addr ) # 5\\. \u5173\u95ed\u5957\u63a5\u5b57 udp_socket . close () \u8fd0\u884c\u73b0\u8c61\uff1a \u5728Ubuntu\u4e2d\u8fd0\u884c\u811a\u672c\uff1a \u5728windows\u4e2d\u8fd0\u884c\u201c\u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\u201d\uff1a 2. udp\u7f51\u7edc\u7a0b\u5e8f-\u53d1\u9001\u3001\u63a5\u6536\u6570\u636e \u00b6 #coding=utf-8 from socket import * # 1\\. \u521b\u5efaudp\u5957\u63a5\u5b57 udp_socket = socket ( AF_INET , SOCK_DGRAM ) # 2\\. \u51c6\u5907\u63a5\u6536\u65b9\u7684\u5730\u5740 dest_addr = ( '192.168.236.129' , 8080 ) # 3\\. \u4ece\u952e\u76d8\u83b7\u53d6\u6570\u636e send_data = input ( \"\u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e:\" ) # 4\\. \u53d1\u9001\u6570\u636e\u5230\u6307\u5b9a\u7684\u7535\u8111\u4e0a udp_socket . sendto ( send_data . encode ( 'utf-8' ), dest_addr ) # 5\\. \u7b49\u5f85\u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u7684\u6570\u636e recv_data = udp_socket . recvfrom ( 1024 ) # 1024\u8868\u793a\u672c\u6b21\u63a5\u6536\u7684\u6700\u5927\u5b57\u8282\u6570 # 6\\. \u663e\u793a\u5bf9\u65b9\u53d1\u9001\u7684\u6570\u636e # \u63a5\u6536\u5230\u7684\u6570\u636erecv_data\u662f\u4e00\u4e2a\u5143\u7ec4 # \u7b2c1\u4e2a\u5143\u7d20\u662f\u5bf9\u65b9\u53d1\u9001\u7684\u6570\u636e # \u7b2c2\u4e2a\u5143\u7d20\u662f\u5bf9\u65b9\u7684ip\u548c\u7aef\u53e3 print ( recv_data [ 0 ] . decode ( 'gbk' )) print ( recv_data [ 1 ]) # 7\\. \u5173\u95ed\u5957\u63a5\u5b57 udp_socket . close () python\u811a\u672c\uff1a \u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\u622a\u56fe\uff1a 3.7python3\u7f16\u7801\u8f6c\u6362 \u00b6 str -> bytes : encode\u7f16\u7801 bytes -> str : decode\u89e3\u7801 \u5b57\u7b26\u4e32\u901a\u8fc7\u7f16\u7801\u6210\u4e3a\u5b57\u8282\u7801\uff0c\u5b57\u8282\u7801\u901a\u8fc7\u89e3\u7801\u6210\u4e3a\u5b57\u7b26\u4e32\u3002 >>> text = '\u6211\u662f\u6587\u672c' >>> text '\u6211\u662f\u6587\u672c' >>> print ( text ) \u6211\u662f\u6587\u672c >>> bytesText = text . encode () >>> bytesText b ' \\xe6\\x88\\x91\\xe6\\x98\\xaf\\xe6\\x96\\x87\\xe6\\x9c\\xac ' >>> print ( bytesText ) b ' \\xe6\\x88\\x91\\xe6\\x98\\xaf\\xe6\\x96\\x87\\xe6\\x9c\\xac ' >>> type ( text ) < class ' str '> >>> type ( bytesText ) < class ' bytes '> >>> textDecode = bytesText . decode () >>> textDecode '\u6211\u662f\u6587\u672c' >>> print ( textDecode ) \u6211\u662f\u6587\u672c \u5176\u4e2ddecode()\u4e0eencode()\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\uff0c\u5176\u58f0\u660e\u5206\u522b\u4e3a: bytes . decode ( encoding = \"utf-8\" , errors = \"strict\" ) str . encode ( encoding = \"utf-8\" , errors = \"strict\" ) \u5176\u4e2d\u7684encoding\u662f\u6307\u5728\u89e3\u7801\u7f16\u7801\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u7f16\u7801(\u6b64\u5904\u6307\u201c\u7f16\u7801\u65b9\u6848\u201d\u662f\u540d\u8bcd)\uff0cerrors\u662f\u6307\u9519\u8bef\u7684\u5904\u7406\u65b9\u6848\u3002 \u8be6\u7ec6\u7684\u53ef\u4ee5\u53c2\u7167\u5b98\u65b9\u6587\u6863\uff1a str.encode() bytes.decode() udp\u7ed1\u5b9a\u4fe1\u606f \u00b6 1. udp\u7f51\u7edc\u7a0b\u5e8f-\u7aef\u53e3\u95ee\u9898 \u00b6 \u4f1a\u53d8\u7684\u7aef\u53e3\u53f7 \u91cd\u65b0\u8fd0\u884c\u591a\u6b21\u811a\u672c\uff0c\u7136\u540e\u5728\u201c\u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\u201d\u4e2d\uff0c\u770b\u5230\u7684\u73b0\u8c61\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a \u6bcf\u91cd\u65b0\u8fd0\u884c\u4e00\u6b21\u7f51\u7edc\u7a0b\u5e8f\uff0c\u4e0a\u56fe\u4e2d\u7ea2\u5708\u4e2d\u7684\u6570\u5b57\uff0c\u4e0d\u4e00\u6837\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u8fd9\u4e2a\u6570\u5b57\u6807\u8bc6\u8fd9\u4e2a\u7f51\u7edc\u7a0b\u5e8f\uff0c\u5f53\u91cd\u65b0\u8fd0\u884c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u786e\u5b9a\u5230\u5e95\u7528\u54ea\u4e2a\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u4f1a\u968f\u673a\u5206\u914d \u8bb0\u4f4f\u4e00\u70b9\uff1a\u8fd9\u4e2a\u7f51\u7edc\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u5c31\u552f\u4e00\u6807\u8bc6\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u5982\u679c\u5176\u4ed6\u7535\u8111\u4e0a\u7684\u7f51\u7edc\u7a0b\u5e8f\u5982\u679c\u60f3\u8981\u5411\u6b64\u7a0b\u5e8f\u53d1\u9001\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5411\u8fd9\u4e2a\u6570\u5b57\uff08\u5373\u7aef\u53e3\uff09\u6807\u8bc6\u7684\u7a0b\u5e8f\u53d1\u9001\u5373\u53ef 2. udp\u7ed1\u5b9a\u4fe1\u606f \u00b6 <1>. \u7ed1\u5b9a\u4fe1\u606f \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728\u4e00\u53f0\u7535\u8111\u4e0a\u8fd0\u884c\u7684\u7f51\u7edc\u7a0b\u5e8f\u6709\u5f88\u591a\uff0c\u4e3a\u4e86\u4e0d\u4e0e\u5176\u4ed6\u7684\u7f51\u7edc\u7a0b\u5e8f\u5360\u7528\u540c\u4e00\u4e2a\u7aef\u53e3\u53f7\uff0c\u5f80\u5f80\u5728\u7f16\u7a0b\u4e2d\uff0cudp\u7684\u7aef\u53e3\u53f7\u4e00\u822c\u4e0d\u7ed1\u5b9a \u4f46\u662f\u5982\u679c\u9700\u8981\u505a\u6210\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\u7684\u7a0b\u5e8f\u7684\u8bdd\uff0c\u662f\u9700\u8981\u7ed1\u5b9a\u7684\uff0c\u60f3\u60f3\u770b\u8fd9\u53c8\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u5982\u679c\u62a5\u8b66\u7535\u8bdd\u6bcf\u5929\u90fd\u5728\u53d8\uff0c\u60f3\u5fc5\u4e16\u754c\u5c31\u4f1a\u4e71\u4e86\uff0c\u6240\u4ee5\u4e00\u822c\u670d\u52a1\u6027\u7684\u7a0b\u5e8f\uff0c\u5f80\u5f80\u9700\u8981\u4e00\u4e2a\u56fa\u5b9a\u7684\u7aef\u53e3\u53f7\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u7aef\u53e3\u7ed1\u5b9a <2>. \u7ed1\u5b9a\u793a\u4f8b \u00b6 #coding=utf-8 from socket import * # 1\\. \u521b\u5efa\u5957\u63a5\u5b57 udp_socket = socket(AF_INET, SOCK_DGRAM) # 2\\. \u7ed1\u5b9a\u672c\u5730\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u7a0b\u5e8f\u4e0d\u7ed1\u5b9a\uff0c\u5219\u7cfb\u7edf\u4f1a\u968f\u673a\u5206\u914d local_addr = ('', 7788) # ip\u5730\u5740\u548c\u7aef\u53e3\u53f7\uff0cip\u4e00\u822c\u4e0d\u7528\u5199\uff0c\u8868\u793a\u672c\u673a\u7684\u4efb\u4f55\u4e00\u4e2aip udp_socket.bind(local_addr) # 3\\. \u7b49\u5f85\u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u7684\u6570\u636e recv_data = udp_socket.recvfrom(1024) # 1024\u8868\u793a\u672c\u6b21\u63a5\u6536\u7684\u6700\u5927\u5b57\u8282\u6570 # 4\\. \u663e\u793a\u63a5\u6536\u5230\u7684\u6570\u636e print(recv_data[0].decode('gbk')) # 5\\. \u5173\u95ed\u5957\u63a5\u5b57 udp_socket.close() \u8fd0\u884c\u7ed3\u679c\uff1a \u00b6 <3>. \u603b\u7ed3 \u00b6 \u4e00\u4e2audp\u7f51\u7edc\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4e0d\u7ed1\u5b9a\uff0c\u6b64\u65f6\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u968f\u673a\u8fdb\u884c\u5206\u914d\u4e00\u4e2a\u7aef\u53e3\uff0c\u5982\u679c\u91cd\u65b0\u8fd0\u884c\u6b64\u7a0b\u5e8f\u7aef\u53e3\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316 \u4e00\u4e2audp\u7f51\u7edc\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u7ed1\u5b9a\u4fe1\u606f\uff08ip\u5730\u5740\uff0c\u7aef\u53e3\u53f7\uff09\uff0c\u5982\u679c\u7ed1\u5b9a\u6210\u529f\uff0c\u90a3\u4e48\u64cd\u4f5c\u7cfb\u7edf\u7528\u8fd9\u4e2a\u7aef\u53e3\u53f7\u6765\u8fdb\u884c\u533a\u522b\u6536\u5230\u7684\u7f51\u7edc\u6570\u636e\u662f\u5426\u662f\u6b64\u8fdb\u7a0b\u7684 3.9\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b(\u7b80\u5355\u7248) \u00b6 \u8bf4\u660e \u00b6 \u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b\u4e2d\uff0c\u4e4b\u6240\u9700\u8981ip\u3001port\u7b49\uff0c\u5c31\u662f\u4e3a\u4e86\u80fd\u591f\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u901a\u4fe1\u8fc7\u7a0b\u8fdb\u884c\u4efb\u52a1\u5212\u5206\uff0c\u4ece\u800c\u4fdd\u8bc1\u6570\u636e\u51c6\u786e\u65e0\u8bef\u7684\u4f20\u9012 3.10\u5e94\u7528\uff1audp\u804a\u5929\u5668 \u00b6 \u8bf4\u660e \u5728\u4e00\u4e2a\u7535\u8111\u4e2d\u7f16\u51991\u4e2a\u7a0b\u5e8f\uff0c\u67092\u4e2a\u529f\u80fd * 1.\u83b7\u53d6\u952e\u76d8\u6570\u636e\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u7ed9\u5bf9\u65b9 * 2.\u63a5\u6536\u6570\u636e\u5e76\u663e\u793a \u5e76\u4e14\u529f\u80fd\u6570\u636e\u8fdb\u884c\u9009\u62e9\u4ee5\u4e0a\u76842\u4e2a\u529f\u80fd\u8c03\u7528 \u8981\u6c42 \u00b6 \u5b9e\u73b0\u4e0a\u8ff0\u7a0b\u5e8f \u53c2\u8003\u4ee3\u7801: import socket def send_msg ( udp_socket ): \"\"\"\u83b7\u53d6\u952e\u76d8\u6570\u636e\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u7ed9\u5bf9\u65b9\"\"\" # 1. \u4ece\u952e\u76d8\u8f93\u5165\u6570\u636e msg = input ( \" \\n \u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e:\" ) # 2. \u8f93\u5165\u5bf9\u65b9\u7684ip\u5730\u5740 dest_ip = input ( \" \\n \u8bf7\u8f93\u5165\u5bf9\u65b9\u7684ip\u5730\u5740:\" ) # 3. \u8f93\u5165\u5bf9\u65b9\u7684port dest_port = int ( input ( \" \\n \u8bf7\u8f93\u5165\u5bf9\u65b9\u7684port:\" )) # 4. \u53d1\u9001\u6570\u636e udp_socket . sendto ( msg . encode ( \"utf-8\" ), ( dest_ip , dest_port )) def recv_msg ( udp_socket ): \"\"\"\u63a5\u6536\u6570\u636e\u5e76\u663e\u793a\"\"\" # 1. \u63a5\u6536\u6570\u636e recv_msg = udp_socket . recvfrom ( 1024 ) # 2. \u89e3\u7801 recv_ip = recv_msg [ 1 ] recv_msg = recv_msg [ 0 ] . decode ( \"utf-8\" ) # 3. \u663e\u793a\u63a5\u6536\u5230\u7684\u6570\u636e print ( \">>> %s : %s \" % ( str ( recv_ip ), recv_msg )) def main (): # 1. \u521b\u5efa\u5957\u63a5\u5b57 udp_socket = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) # 2. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f udp_socket . bind (( \"\" , 7890 )) while True : # 3. \u9009\u62e9\u529f\u80fd print ( \"=\" * 30 ) print ( \"1:\u53d1\u9001\u6d88\u606f\" ) print ( \"2:\u63a5\u6536\u6d88\u606f\" ) print ( \"=\" * 30 ) op_num = input ( \"\u8bf7\u8f93\u5165\u8981\u64cd\u4f5c\u7684\u529f\u80fd\u5e8f\u53f7:\" ) # 4. \u6839\u636e\u9009\u62e9\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570 if op_num == \"1\" : send_msg ( udp_socket ) elif op_num == \"2\" : recv_msg ( udp_socket ) else : print ( \"\u8f93\u5165\u6709\u8bef\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165...\" ) if __name__ == \"__main__\" : main () \u60f3\u4e00\u60f3 \u4ee5\u4e0a\u7684\u7a0b\u5e8f\u5982\u679c\u9009\u62e9\u4e86\u63a5\u6536\u6570\u636e\u529f\u80fd\uff0c\u5e76\u4e14\u6b64\u65f6\u6ca1\u6709\u6570\u636e\uff0c\u7a0b\u5e8f\u4f1a\u5835\u585e\u5728\u8fd9\uff0c\u90a3\u4e48\u600e\u6837\u624d\u80fd\u8ba9\u8fd9\u4e2a\u7a0b\u5e8f\u6536\u53d1\u6570\u636e\u4e00\u8d77\u8fdb\u884c\u5462\uff1f\u522b\u7740\u6025\uff0c\u5b66\u4e60\u5b8c\u591a\u4efb\u52a1\u77e5\u8bc6\u4e4b\u540e\u5c31\u89e3\u51b3\u4e86O(\u2229_\u2229)O...","title":"001 \u7f51\u7edcudp"},{"location":"001-\u7f51\u7edcudp/#31","text":"","title":"3.1\u7f51\u7edc\u901a\u4fe1\u6982\u8ff0"},{"location":"001-\u7f51\u7edcudp/#146","text":"","title":"1. \u4ec0\u4e48\u662f\u7f51\u7edc"},{"location":"001-\u7f51\u7edcudp/#_1","text":"\u7f51\u7edc\u5c31\u662f\u4e00\u79cd\u8f85\u52a9\u53cc\u65b9\u6216\u8005\u591a\u65b9\u80fd\u591f\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u5de5\u5177 \u5982\u679c\u6ca1\u6709\u7f51\u7edc\u53ef\u60f3 \u5355\u673a \u7684\u4e16\u754c\u662f\u591a\u4e48\u7684\u5b64\u5355","title":"\u8bf4\u660e"},{"location":"001-\u7f51\u7edcudp/#_2","text":"","title":"\u5355\u673a\u6e38\u620f\uff08\u4e0d\u80fd\u548c\u8fdc\u5728\u4ed6\u4e61\u7684\u670b\u53cb\u4e00\u8d77\u73a9\uff09"},{"location":"001-\u7f51\u7edcudp/#246","text":"\u5c31\u662f\u4e3a\u4e86\u8054\u901a\u591a\u65b9\u7136\u540e\u8fdb\u884c\u901a\u4fe1\u7528\u7684\uff0c\u5373\u628a\u6570\u636e\u4ece\u4e00\u65b9\u4f20\u9012\u7ed9\u53e6\u5916\u4e00\u65b9 \u524d\u9762\u7684\u5b66\u4e60\u7f16\u5199\u7684\u7a0b\u5e8f\u90fd\u662f\u5355\u673a\u7684\uff0c\u5373\u4e0d\u80fd\u548c\u5176\u4ed6\u7535\u8111\u4e0a\u7684\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1 \u4e3a\u4e86\u8ba9\u5728\u4e0d\u540c\u7684\u7535\u8111\u4e0a\u8fd0\u884c\u7684\u8f6f\u4ef6\uff0c\u4e4b\u95f4\u80fd\u591f\u4e92\u76f8\u4f20\u9012\u6570\u636e\uff0c\u5c31\u9700\u8981\u501f\u52a9\u7f51\u7edc\u7684\u529f\u80fd","title":"2. \u4f7f\u7528\u7f51\u7edc\u7684\u76ee\u7684"},{"location":"001-\u7f51\u7edcudp/#_3","text":"\u4f7f\u7528\u7f51\u7edc\u80fd\u591f\u628a\u591a\u65b9\u94fe\u63a5\u5728\u4e00\u8d77\uff0c\u7136\u540e\u53ef\u4ee5\u8fdb\u884c\u6570\u636e\u4f20\u9012 \u6240\u8c13\u7684\u7f51\u7edc\u7f16\u7a0b\u5c31\u662f\uff0c\u8ba9\u5728\u4e0d\u540c\u7684\u7535\u8111\u4e0a\u7684\u8f6f\u4ef6\u80fd\u591f\u8fdb\u884c\u6570\u636e\u4f20\u9012\uff0c\u5373\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1","title":"\u5c0f\u603b\u7ed3"},{"location":"001-\u7f51\u7edcudp/#32ip","text":"","title":"3.2ip\u5730\u5740"},{"location":"001-\u7f51\u7edcudp/#146_1","text":"\u5730\u5740\u5c31\u662f\u7528\u6765\u6807\u8bb0\u5730\u70b9\u7684","title":"1. \u4ec0\u4e48\u662f\u5730\u5740"},{"location":"001-\u7f51\u7edcudp/#246-ip","text":"","title":"2. ip\u5730\u5740\u7684\u4f5c\u7528"},{"location":"001-\u7f51\u7edcudp/#ip19216811","text":"","title":"ip\u5730\u5740\uff1a\u7528\u6765\u5728\u7f51\u7edc\u4e2d\u6807\u8bb0\u4e00\u53f0\u7535\u8111\uff0c\u6bd4\u5982192.168.1.1\uff1b\u5728\u672c\u5730\u5c40\u57df\u7f51\u4e0a\u662f\u552f\u4e00\u7684\u3002"},{"location":"001-\u7f51\u7edcudp/#346-ip","text":"\u6bcf\u4e00\u4e2aIP\u5730\u5740\u5305\u62ec\u4e24\u90e8\u5206\uff1a\u7f51\u7edc\u5730\u5740\u548c\u4e3b\u673a\u5730\u5740","title":"3. ip\u5730\u5740\u7684\u5206\u7c7b\uff08\u4e86\u89e3\uff09"},{"location":"001-\u7f51\u7edcudp/#31-aip","text":"\u4e00\u4e2aA\u7c7bIP\u5730\u5740\u75311\u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c3\u5b57\u8282\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c\u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f\u201c0\u201d\uff0c \u5730\u5740\u8303\u56f41.0.0.1-126.255.255.254 \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\uff1a00000001 00000000 00000000 00000001 - 01111110 11111111 11111111 11111110 \u53ef\u7528\u7684A\u7c7b\u7f51\u7edc\u6709126\u4e2a\uff0c\u6bcf\u4e2a\u7f51\u7edc\u80fd\u5bb9\u7eb31677214\u4e2a\u4e3b\u673a","title":"3.1 A\u7c7bIP\u5730\u5740"},{"location":"001-\u7f51\u7edcudp/#32-bip","text":"\u4e00\u4e2aB\u7c7bIP\u5730\u5740\u75312\u4e2a\u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c2\u4e2a\u5b57\u8282\u7684\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c\u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f\u201c10\u201d\uff0c \u5730\u5740\u8303\u56f4128.1.0.1-191.255.255.254 \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\uff1a10000000 00000001 00000000 00000001 - 10111111 11111111 11111111 11111110 \u53ef\u7528\u7684B\u7c7b\u7f51\u7edc\u670916384\u4e2a\uff0c\u6bcf\u4e2a\u7f51\u7edc\u80fd\u5bb9\u7eb365534\u4e3b\u673a","title":"3.2 B\u7c7bIP\u5730\u5740"},{"location":"001-\u7f51\u7edcudp/#33-cip","text":"\u4e00\u4e2aC\u7c7bIP\u5730\u5740\u75313\u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c1\u5b57\u8282\u7684\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c\u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f\u201c110\u201d \u8303\u56f4192.0.1.1-223.255.255.254 \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a: 11000000 00000000 00000001 00000001 - 11011111 11111111 11111110 11111110 C\u7c7b\u7f51\u7edc\u53ef\u8fbe2097152\u4e2a\uff0c\u6bcf\u4e2a\u7f51\u7edc\u80fd\u5bb9\u7eb3254\u4e2a\u4e3b\u673a","title":"3.3 C\u7c7bIP\u5730\u5740"},{"location":"001-\u7f51\u7edcudp/#34-d","text":"D\u7c7bIP\u5730\u5740\u7b2c\u4e00\u4e2a\u5b57\u8282\u4ee5\u201c1110\u201d\u5f00\u59cb\uff0c\u5b83\u662f\u4e00\u4e2a\u4e13\u95e8\u4fdd\u7559\u7684\u5730\u5740\u3002 \u5b83\u5e76\u4e0d\u6307\u5411\u7279\u5b9a\u7684\u7f51\u7edc\uff0c\u76ee\u524d\u8fd9\u4e00\u7c7b\u5730\u5740\u88ab\u7528\u5728\u591a\u70b9\u5e7f\u64ad\uff08Multicast\uff09\u4e2d \u591a\u70b9\u5e7f\u64ad\u5730\u5740\u7528\u6765\u4e00\u6b21\u5bfb\u5740\u4e00\u7ec4\u8ba1\u7b97\u673a s \u5730\u5740\u8303\u56f4224.0.0.1-239.255.255.254","title":"3.4 D\u7c7b\u5730\u5740\u7528\u4e8e\u591a\u70b9\u5e7f\u64ad"},{"location":"001-\u7f51\u7edcudp/#35-eip","text":"\u4ee5\u201c1111\u201d\u5f00\u59cb\uff0c\u4e3a\u5c06\u6765\u4f7f\u7528\u4fdd\u7559 E\u7c7b\u5730\u5740\u4fdd\u7559\uff0c\u4ec5\u4f5c\u5b9e\u9a8c\u548c\u5f00\u53d1\u7528","title":"3.5 E\u7c7bIP\u5730\u5740"},{"location":"001-\u7f51\u7edcudp/#36-ip","text":"\u5728\u8fd9\u4e48\u591a\u7f51\u7edcIP\u4e2d\uff0c\u56fd\u9645\u89c4\u5b9a\u6709\u4e00\u90e8\u5206IP\u5730\u5740\u662f\u7528\u4e8e\u6211\u4eec\u7684\u5c40\u57df\u7f51\u4f7f\u7528\uff0c\u4e5f\u5c31 \u662f\u5c5e\u4e8e\u79c1\u7f51IP\uff0c\u4e0d\u5728\u516c\u7f51\u4e2d\u4f7f\u7528\u7684\uff0c\u5b83\u4eec\u7684\u8303\u56f4\u662f\uff1a 10.0.0.0\uff5e10.255.255.255 172.16.0.0\uff5e172.31.255.255 192.168.0.0\uff5e192.168.255.255","title":"3.6 \u79c1\u6709ip"},{"location":"001-\u7f51\u7edcudp/#37","text":"IP\u5730\u5740127\uff0e0\uff0e0\uff0e1~127\uff0e255\uff0e255\uff0e255\u7528\u4e8e\u56de\u8def\u6d4b\u8bd5\uff0c \u5982\uff1a127.0.0.1\u53ef\u4ee5\u4ee3\u8868\u672c\u673aIP\u5730\u5740\uff0c\u7528 http://127.0.0.1 \u5c31\u53ef\u4ee5\u6d4b\u8bd5\u672c\u673a\u4e2d\u914d\u7f6e\u7684Web\u670d\u52a1\u5668\u3002","title":"3.7 \u6ce8\u610f"},{"location":"001-\u7f51\u7edcudp/#33linuxping-ifconfig","text":"","title":"3.3Linux\u547d\u4ee4(ping, ifconfig)"},{"location":"001-\u7f51\u7edcudp/#ifconfig","text":"\u5982\u679c\uff0c\u6211\u4eec\u53ea\u662f\u6572\uff1aifconfig\uff0c\u5b83\u4f1a\u663e\u793a\u6240\u6709\u7f51\u5361\u7684\u4fe1\u606f\uff1a","title":"\u67e5\u770b\u6216\u914d\u7f6e\u7f51\u5361\u4fe1\u606f\uff1aifconfig"},{"location":"001-\u7f51\u7edcudp/#ping","text":"\u901a\u5e38\u7528ping\u6765\u68c0\u6d4b\u7f51\u7edc\u662f\u5426\u6b63\u5e38","title":"\u6d4b\u8bd5\u8fdc\u7a0b\u4e3b\u673a\u8fde\u901a\u6027\uff1aping"},{"location":"001-\u7f51\u7edcudp/#34","text":"","title":"3.4\u7aef\u53e3"},{"location":"001-\u7f51\u7edcudp/#146_2","text":"\u7aef\u53e3\u5c31\u597d\u4e00\u4e2a\u623f\u5b50\u7684\u95e8\uff0c\u662f\u51fa\u5165\u8fd9\u95f4\u623f\u5b50\u7684\u5fc5\u7ecf\u4e4b\u8def\u3002 \u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u6536\u53d1\u7f51\u7edc\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6709\u8fd9\u6837\u7684\u7aef\u53e3 \u5728linux\u7cfb\u7edf\u4e2d\uff0c\u7aef\u53e3\u53ef\u4ee5\u670965536\uff082\u768416\u6b21\u65b9\uff09\u4e2a\u4e4b\u591a\uff01 \u65e2\u7136\u6709\u8fd9\u4e48\u591a\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u4e86\u7edf\u4e00\u7ba1\u7406\uff0c\u6240\u4ee5\u8fdb\u884c\u4e86\u7f16\u53f7\uff0c\u8fd9\u5c31\u662f \u7aef\u53e3\u53f7","title":"1. \u4ec0\u4e48\u662f\u7aef\u53e3"},{"location":"001-\u7f51\u7edcudp/#246_1","text":"\u7aef\u53e3\u662f\u901a\u8fc7\u7aef\u53e3\u53f7\u6765\u6807\u8bb0\u7684\uff0c\u7aef\u53e3\u53f7\u53ea\u6709\u6574\u6570\uff0c\u8303\u56f4\u662f\u4ece0\u523065535 \u6ce8\u610f\uff1a\u7aef\u53e3\u6570\u4e0d\u4e00\u6837\u7684*nix\u7cfb\u7edf\u4e0d\u4e00\u6837\uff0c\u8fd8\u53ef\u4ee5\u624b\u52a8\u4fee\u6539","title":"2. \u7aef\u53e3\u53f7"},{"location":"001-\u7f51\u7edcudp/#346","text":"\u7aef\u53e3\u53f7\u4e0d\u662f\u968f\u610f\u4f7f\u7528\u7684\uff0c\u800c\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5b9a\u8fdb\u884c\u5206\u914d\u3002 \u7aef\u53e3\u7684\u5206\u7c7b\u6807\u51c6\u6709\u597d\u51e0\u79cd\uff0c\u6211\u4eec\u8fd9\u91cc\u4e0d\u505a\u8be6\u7ec6\u8bb2\u89e3\uff0c\u53ea\u4ecb\u7ecd\u4e00\u4e0b\u77e5\u540d\u7aef\u53e3\u548c\u52a8\u6001\u7aef\u53e3","title":"3. \u7aef\u53e3\u662f\u600e\u6837\u5206\u914d\u7684"},{"location":"001-\u7f51\u7edcudp/#31-well-known-ports","text":"\u77e5\u540d\u7aef\u53e3\u662f\u4f17\u6240\u5468\u77e5\u7684\u7aef\u53e3\u53f7\uff0c\u8303\u56f4\u4ece0\u52301023 80\u7aef\u53e3\u5206\u914d\u7ed9HTTP\u670d\u52a1 21\u7aef\u53e3\u5206\u914d\u7ed9FTP\u670d\u52a1 \u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u4e00\u4e9b\u5e38\u7528\u7684\u529f\u80fd\u4f7f\u7528\u7684\u53f7\u7801\u662f\u4f30\u8ba1\u7684\uff0c\u597d\u6bd4 \u7535\u8bdd\u53f7\u7801110\u300110086\u300110010\u4e00\u6837 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u77e5\u540d\u7aef\u53e3\u7684\u9700\u8981\u6709root\u6743\u9650","title":"3.1 \u77e5\u540d\u7aef\u53e3\uff08Well Known Ports\uff09"},{"location":"001-\u7f51\u7edcudp/#32-dynamic-ports","text":"\u52a8\u6001\u7aef\u53e3\u7684\u8303\u56f4\u662f\u4ece1024\u523065535 \u4e4b\u6240\u4ee5\u79f0\u4e3a\u52a8\u6001\u7aef\u53e3\uff0c\u662f\u56e0\u4e3a\u5b83\u4e00\u822c\u4e0d\u56fa\u5b9a\u5206\u914d\u67d0\u79cd\u670d\u52a1\uff0c\u800c\u662f\u52a8\u6001\u5206\u914d\u3002 \u52a8\u6001\u5206\u914d\u662f\u6307\u5f53\u4e00\u4e2a\u7cfb\u7edf\u7a0b\u5e8f\u6216\u5e94\u7528\u7a0b\u5e8f\u7a0b\u5e8f\u9700\u8981\u7f51\u7edc\u901a\u4fe1\u65f6\uff0c\u5b83\u5411\u4e3b\u673a\u7533\u8bf7\u4e00\u4e2a\u7aef\u53e3\uff0c\u4e3b\u673a\u4ece\u53ef\u7528\u7684\u7aef\u53e3\u53f7\u4e2d\u5206\u914d\u4e00\u4e2a\u4f9b\u5b83\u4f7f\u7528\u3002 \u5f53\u8fd9\u4e2a\u7a0b\u5e8f\u5173\u95ed\u65f6\uff0c\u540c\u65f6\u4e5f\u5c31\u91ca\u653e\u4e86\u6240\u5360\u7528\u7684\u7aef\u53e3\u53f7","title":"3.2 \u52a8\u6001\u7aef\u53e3\uff08Dynamic Ports\uff09"},{"location":"001-\u7f51\u7edcudp/#33","text":"\u7528\u201cnetstat \uff0dan\u201d\u67e5\u770b\u7aef\u53e3\u72b6\u6001 lsof -i [tcp/udp]:2425","title":"3.3 \u600e\u6837\u67e5\u770b\u7aef\u53e3 \uff1f"},{"location":"001-\u7f51\u7edcudp/#446","text":"\u7aef\u53e3\u6709\u4ec0\u4e48\u7528\u5462 \uff1f \u6211\u4eec\u77e5\u9053\uff0c\u4e00\u53f0\u62e5\u6709IP\u5730\u5740\u7684\u4e3b\u673a\u53ef\u4ee5\u63d0\u4f9b\u8bb8\u591a\u670d\u52a1\uff0c\u6bd4\u5982HTTP\uff08\u4e07\u7ef4\u7f51\u670d\u52a1\uff09\u3001FTP\uff08\u6587\u4ef6\u4f20\u8f93\uff09\u3001SMTP\uff08\u7535\u5b50\u90ae\u4ef6\uff09\u7b49\uff0c\u8fd9\u4e9b\u670d\u52a1\u5b8c\u5168\u53ef\u4ee5\u901a\u8fc71\u4e2aIP\u5730\u5740\u6765\u5b9e\u73b0\u3002\u90a3\u4e48\uff0c\u4e3b\u673a\u662f\u600e\u6837\u533a\u5206\u4e0d\u540c\u7684\u7f51\u7edc\u670d\u52a1\u5462\uff1f\u663e\u7136\u4e0d\u80fd\u53ea\u9760IP\u5730\u5740\uff0c\u56e0\u4e3aIP\u5730\u5740\u4e0e\u7f51\u7edc\u670d\u52a1\u7684\u5173\u7cfb\u662f\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\u3002\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7\u201cIP\u5730\u5740+\u7aef\u53e3\u53f7\u201d\u6765\u533a\u5206\u4e0d\u540c\u7684\u670d\u52a1\u7684\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7aef\u53e3\u5e76\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u6bd4\u5982\u4f60\u7684\u7535\u8111\u4f5c\u4e3a\u5ba2\u6237\u673a\u8bbf\u95ee\u4e00\u53f0WWW\u670d\u52a1\u5668\u65f6\uff0cWWW\u670d\u52a1\u5668\u4f7f\u7528\u201c80\u201d\u7aef\u53e3\u4e0e\u4f60\u7684\u7535\u8111\u901a\u4fe1\uff0c\u4f46\u4f60\u7684\u7535\u8111\u5219\u53ef\u80fd\u4f7f\u7528\u201c3457\u201d\u8fd9\u6837\u7684\u7aef\u53e3\u3002","title":"4. \u5c0f\u603b\u7ed3"},{"location":"001-\u7f51\u7edcudp/#35socket","text":"","title":"3.5socket\u7b80\u4ecb"},{"location":"001-\u7f51\u7edcudp/#146_3","text":"\u9996\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5426\u5219\u901a\u4fe1\u65e0\u4ece\u8c08\u8d77\uff01 \u57281\u53f0\u7535\u8111\u4e0a\u53ef\u4ee5\u901a\u8fc7\u8fdb\u7a0b\u53f7\uff08PID\uff09\u6765\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4f46\u662f\u5728\u7f51\u7edc\u4e2d\u8fd9\u662f\u884c\u4e0d\u901a\u7684\u3002 \u5176\u5b9eTCP/IP\u534f\u8bae\u65cf\u5df2\u7ecf\u5e2e\u6211\u4eec\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u7f51\u7edc\u5c42\u7684\u201cip\u5730\u5740\u201d\u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u7f51\u7edc\u4e2d\u7684\u4e3b\u673a\uff0c\u800c\u4f20\u8f93\u5c42\u7684\u201c\u534f\u8bae+\u7aef\u53e3\u201d\u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u4e3b\u673a\u4e2d\u7684\u5e94\u7528\u8fdb\u7a0b\uff08\u8fdb\u7a0b\uff09\u3002 \u8fd9\u6837\u5229\u7528ip\u5730\u5740\uff0c\u534f\u8bae\uff0c\u7aef\u53e3\u5c31\u53ef\u4ee5\u6807\u8bc6\u7f51\u7edc\u7684\u8fdb\u7a0b\u4e86\uff0c\u7f51\u7edc\u4e2d\u7684\u8fdb\u7a0b\u901a\u4fe1\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6807\u5fd7\u4e0e\u5176\u5b83\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92","title":"1. \u4e0d\u540c\u7535\u8111\u4e0a\u7684\u8fdb\u7a0b\u4e4b\u95f4\u5982\u4f55\u901a\u4fe1"},{"location":"001-\u7f51\u7edcudp/#_4","text":"\u6240\u8c13 \u8fdb\u7a0b \u6307\u7684\u662f\uff1a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4ee5\u53ca\u8fd0\u884c\u65f6\u7528\u5230\u7684\u8d44\u6e90\u8fd9\u4e2a\u6574\u4f53\u79f0\u4e4b\u4e3a\u8fdb\u7a0b\uff08\u5728\u8bb2\u89e3\u591a\u4efb\u52a1\u7f16\u7a0b\u65f6\u8fdb\u884c\u8be6\u7ec6\u8bb2\u89e3\uff09 \u6240\u8c13 \u8fdb\u7a0b\u95f4\u901a\u4fe1 \u6307\u7684\u662f\uff1a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e4b\u95f4\u7684\u6570\u636e\u5171\u4eab \u540e\u9762\u8bfe\u7a0b\u4e2d\u4f1a\u8be6\u7ec6\u8bf4\u5230\uff0c\u50cf\u7f51\u7edc\u5c42\u7b49\u77e5\u8bc6\uff0c\u4e0d\u8981\u7740\u6025","title":"\u6ce8\u610f\uff1a"},{"location":"001-\u7f51\u7edcudp/#246-socket","text":"socket(\u7b80\u79f0 \u5957\u63a5\u5b57 ) \u662f\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5b83\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4e00\u4e2a\u4e3b\u8981\u4e0d\u540c\u662f\uff1a \u5b83\u80fd\u5b9e\u73b0\u4e0d\u540c\u4e3b\u673a\u95f4\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u6211\u4eec\u7f51\u7edc\u4e0a\u5404\u79cd\u5404\u6837\u7684\u670d\u52a1\u5927\u591a\u90fd\u662f\u57fa\u4e8e Socket \u6765\u5b8c\u6210\u901a\u4fe1\u7684 \u4f8b\u5982\u6211\u4eec\u6bcf\u5929\u6d4f\u89c8\u7f51\u9875\u3001QQ \u804a\u5929\u3001\u6536\u53d1 email \u7b49\u7b49","title":"2. \u4ec0\u4e48\u662fsocket"},{"location":"001-\u7f51\u7edcudp/#3-socket","text":"\u5728 Python \u4e2d \u4f7f\u7528socket \u6a21\u5757\u7684\u51fd\u6570 socket \u5c31\u53ef\u4ee5\u5b8c\u6210\uff1a import socket socket . socket ( AddressFamily , Type )","title":"3.\u00a0\u521b\u5efasocket"},{"location":"001-\u7f51\u7edcudp/#_5","text":"\u51fd\u6570 socket.socket \u521b\u5efa\u4e00\u4e2a socket\uff0c\u8be5\u51fd\u6570\u5e26\u6709\u4e24\u4e2a\u53c2\u6570\uff1a Address Family\uff1a\u53ef\u4ee5\u9009\u62e9 AF_INET\uff08\u7528\u4e8e Internet \u8fdb\u7a0b\u95f4\u901a\u4fe1\uff09 \u6216\u8005 AF_UNIX\uff08\u7528\u4e8e\u540c\u4e00\u53f0\u673a\u5668\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff09,\u5b9e\u9645\u5de5\u4f5c\u4e2d\u5e38\u7528AF_INET Type\uff1a\u5957\u63a5\u5b57\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f SOCK_STREAM\uff08\u6d41\u5f0f\u5957\u63a5\u5b57\uff0c\u4e3b\u8981\u7528\u4e8e TCP \u534f\u8bae\uff09\u6216\u8005 SOCK_DGRAM\uff08\u6570\u636e\u62a5\u5957\u63a5\u5b57\uff0c\u4e3b\u8981\u7528\u4e8e UDP \u534f\u8bae\uff09 \u521b\u5efa\u4e00\u4e2atcp socket\uff08tcp\u5957\u63a5\u5b57\uff09 import socket # \u521b\u5efatcp\u7684\u5957\u63a5\u5b57 s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # ...\u8fd9\u91cc\u662f\u4f7f\u7528\u5957\u63a5\u5b57\u7684\u529f\u80fd\uff08\u7701\u7565\uff09... # \u4e0d\u7528\u7684\u65f6\u5019\uff0c\u5173\u95ed\u5957\u63a5\u5b57 s . close () \u521b\u5efa\u4e00\u4e2audp socket\uff08udp\u5957\u63a5\u5b57\uff09 import socket # \u521b\u5efaudp\u7684\u5957\u63a5\u5b57 s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) # ...\u8fd9\u91cc\u662f\u4f7f\u7528\u5957\u63a5\u5b57\u7684\u529f\u80fd\uff08\u7701\u7565\uff09... # \u4e0d\u7528\u7684\u65f6\u5019\uff0c\u5173\u95ed\u5957\u63a5\u5b57 s . close ()","title":"\u8bf4\u660e\uff1a"},{"location":"001-\u7f51\u7edcudp/#_6","text":"\u5957\u63a5\u5b57\u4f7f\u7528\u6d41\u7a0b \u4e0e \u6587\u4ef6\u7684\u4f7f\u7528\u6d41\u7a0b\u5f88\u7c7b\u4f3c \u521b\u5efa\u5957\u63a5\u5b57 \u4f7f\u7528\u5957\u63a5\u5b57\u6536/\u53d1\u6570\u636e \u5173\u95ed\u5957\u63a5\u5b57","title":"\u8bf4\u660e"},{"location":"001-\u7f51\u7edcudp/#36udp-","text":"","title":"3.6udp\u7f51\u7edc\u7a0b\u5e8f-\u53d1\u9001\u3001\u63a5\u6536\u6570\u636e"},{"location":"001-\u7f51\u7edcudp/#146-udp-","text":"\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8eudp\u7684\u7f51\u7edc\u7a0b\u5e8f\u6d41\u7a0b\u5f88\u7b80\u5355\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u521b\u5efa\u5ba2\u6237\u7aef\u5957\u63a5\u5b57 \u53d1\u9001/\u63a5\u6536\u6570\u636e \u5173\u95ed\u5957\u63a5\u5b57 \u4ee3\u7801\u5982\u4e0b\uff1a #coding=utf-8 from socket import * # 1\\. \u521b\u5efaudp\u5957\u63a5\u5b57 udp_socket = socket ( AF_INET , SOCK_DGRAM ) # 2\\. \u51c6\u5907\u63a5\u6536\u65b9\u7684\u5730\u5740 # '192.168.1.103'\u8868\u793a\u76ee\u7684ip\u5730\u5740 # 8080\u8868\u793a\u76ee\u7684\u7aef\u53e3 dest_addr = ( '192.168.1.103' , 8080 ) # \u6ce8\u610f \u662f\u5143\u7ec4\uff0cip\u662f\u5b57\u7b26\u4e32\uff0c\u7aef\u53e3\u662f\u6570\u5b57 # 3\\. \u4ece\u952e\u76d8\u83b7\u53d6\u6570\u636e send_data = input ( \"\u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e:\" ) # 4\\. \u53d1\u9001\u6570\u636e\u5230\u6307\u5b9a\u7684\u7535\u8111\u4e0a\u7684\u6307\u5b9a\u7a0b\u5e8f\u4e2d udp_socket . sendto ( send_data . encode ( 'utf-8' ), dest_addr ) # 5\\. \u5173\u95ed\u5957\u63a5\u5b57 udp_socket . close () \u8fd0\u884c\u73b0\u8c61\uff1a \u5728Ubuntu\u4e2d\u8fd0\u884c\u811a\u672c\uff1a \u5728windows\u4e2d\u8fd0\u884c\u201c\u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\u201d\uff1a","title":"1. udp\u7f51\u7edc\u7a0b\u5e8f-\u53d1\u9001\u6570\u636e"},{"location":"001-\u7f51\u7edcudp/#246-udp-","text":"#coding=utf-8 from socket import * # 1\\. \u521b\u5efaudp\u5957\u63a5\u5b57 udp_socket = socket ( AF_INET , SOCK_DGRAM ) # 2\\. \u51c6\u5907\u63a5\u6536\u65b9\u7684\u5730\u5740 dest_addr = ( '192.168.236.129' , 8080 ) # 3\\. \u4ece\u952e\u76d8\u83b7\u53d6\u6570\u636e send_data = input ( \"\u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e:\" ) # 4\\. \u53d1\u9001\u6570\u636e\u5230\u6307\u5b9a\u7684\u7535\u8111\u4e0a udp_socket . sendto ( send_data . encode ( 'utf-8' ), dest_addr ) # 5\\. \u7b49\u5f85\u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u7684\u6570\u636e recv_data = udp_socket . recvfrom ( 1024 ) # 1024\u8868\u793a\u672c\u6b21\u63a5\u6536\u7684\u6700\u5927\u5b57\u8282\u6570 # 6\\. \u663e\u793a\u5bf9\u65b9\u53d1\u9001\u7684\u6570\u636e # \u63a5\u6536\u5230\u7684\u6570\u636erecv_data\u662f\u4e00\u4e2a\u5143\u7ec4 # \u7b2c1\u4e2a\u5143\u7d20\u662f\u5bf9\u65b9\u53d1\u9001\u7684\u6570\u636e # \u7b2c2\u4e2a\u5143\u7d20\u662f\u5bf9\u65b9\u7684ip\u548c\u7aef\u53e3 print ( recv_data [ 0 ] . decode ( 'gbk' )) print ( recv_data [ 1 ]) # 7\\. \u5173\u95ed\u5957\u63a5\u5b57 udp_socket . close () python\u811a\u672c\uff1a \u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\u622a\u56fe\uff1a","title":"2. udp\u7f51\u7edc\u7a0b\u5e8f-\u53d1\u9001\u3001\u63a5\u6536\u6570\u636e"},{"location":"001-\u7f51\u7edcudp/#37python3","text":"str -> bytes : encode\u7f16\u7801 bytes -> str : decode\u89e3\u7801 \u5b57\u7b26\u4e32\u901a\u8fc7\u7f16\u7801\u6210\u4e3a\u5b57\u8282\u7801\uff0c\u5b57\u8282\u7801\u901a\u8fc7\u89e3\u7801\u6210\u4e3a\u5b57\u7b26\u4e32\u3002 >>> text = '\u6211\u662f\u6587\u672c' >>> text '\u6211\u662f\u6587\u672c' >>> print ( text ) \u6211\u662f\u6587\u672c >>> bytesText = text . encode () >>> bytesText b ' \\xe6\\x88\\x91\\xe6\\x98\\xaf\\xe6\\x96\\x87\\xe6\\x9c\\xac ' >>> print ( bytesText ) b ' \\xe6\\x88\\x91\\xe6\\x98\\xaf\\xe6\\x96\\x87\\xe6\\x9c\\xac ' >>> type ( text ) < class ' str '> >>> type ( bytesText ) < class ' bytes '> >>> textDecode = bytesText . decode () >>> textDecode '\u6211\u662f\u6587\u672c' >>> print ( textDecode ) \u6211\u662f\u6587\u672c \u5176\u4e2ddecode()\u4e0eencode()\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\uff0c\u5176\u58f0\u660e\u5206\u522b\u4e3a: bytes . decode ( encoding = \"utf-8\" , errors = \"strict\" ) str . encode ( encoding = \"utf-8\" , errors = \"strict\" ) \u5176\u4e2d\u7684encoding\u662f\u6307\u5728\u89e3\u7801\u7f16\u7801\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u7f16\u7801(\u6b64\u5904\u6307\u201c\u7f16\u7801\u65b9\u6848\u201d\u662f\u540d\u8bcd)\uff0cerrors\u662f\u6307\u9519\u8bef\u7684\u5904\u7406\u65b9\u6848\u3002 \u8be6\u7ec6\u7684\u53ef\u4ee5\u53c2\u7167\u5b98\u65b9\u6587\u6863\uff1a str.encode() bytes.decode()","title":"3.7python3\u7f16\u7801\u8f6c\u6362"},{"location":"001-\u7f51\u7edcudp/#udp","text":"","title":"udp\u7ed1\u5b9a\u4fe1\u606f"},{"location":"001-\u7f51\u7edcudp/#146-udp-_1","text":"\u4f1a\u53d8\u7684\u7aef\u53e3\u53f7 \u91cd\u65b0\u8fd0\u884c\u591a\u6b21\u811a\u672c\uff0c\u7136\u540e\u5728\u201c\u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\u201d\u4e2d\uff0c\u770b\u5230\u7684\u73b0\u8c61\u5982\u4e0b\uff1a \u8bf4\u660e\uff1a \u6bcf\u91cd\u65b0\u8fd0\u884c\u4e00\u6b21\u7f51\u7edc\u7a0b\u5e8f\uff0c\u4e0a\u56fe\u4e2d\u7ea2\u5708\u4e2d\u7684\u6570\u5b57\uff0c\u4e0d\u4e00\u6837\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u8fd9\u4e2a\u6570\u5b57\u6807\u8bc6\u8fd9\u4e2a\u7f51\u7edc\u7a0b\u5e8f\uff0c\u5f53\u91cd\u65b0\u8fd0\u884c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u786e\u5b9a\u5230\u5e95\u7528\u54ea\u4e2a\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u4f1a\u968f\u673a\u5206\u914d \u8bb0\u4f4f\u4e00\u70b9\uff1a\u8fd9\u4e2a\u7f51\u7edc\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u5c31\u552f\u4e00\u6807\u8bc6\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u5982\u679c\u5176\u4ed6\u7535\u8111\u4e0a\u7684\u7f51\u7edc\u7a0b\u5e8f\u5982\u679c\u60f3\u8981\u5411\u6b64\u7a0b\u5e8f\u53d1\u9001\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5411\u8fd9\u4e2a\u6570\u5b57\uff08\u5373\u7aef\u53e3\uff09\u6807\u8bc6\u7684\u7a0b\u5e8f\u53d1\u9001\u5373\u53ef","title":"1. udp\u7f51\u7edc\u7a0b\u5e8f-\u7aef\u53e3\u95ee\u9898"},{"location":"001-\u7f51\u7edcudp/#246-udp","text":"","title":"2. udp\u7ed1\u5b9a\u4fe1\u606f"},{"location":"001-\u7f51\u7edcudp/#1","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728\u4e00\u53f0\u7535\u8111\u4e0a\u8fd0\u884c\u7684\u7f51\u7edc\u7a0b\u5e8f\u6709\u5f88\u591a\uff0c\u4e3a\u4e86\u4e0d\u4e0e\u5176\u4ed6\u7684\u7f51\u7edc\u7a0b\u5e8f\u5360\u7528\u540c\u4e00\u4e2a\u7aef\u53e3\u53f7\uff0c\u5f80\u5f80\u5728\u7f16\u7a0b\u4e2d\uff0cudp\u7684\u7aef\u53e3\u53f7\u4e00\u822c\u4e0d\u7ed1\u5b9a \u4f46\u662f\u5982\u679c\u9700\u8981\u505a\u6210\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\u7684\u7a0b\u5e8f\u7684\u8bdd\uff0c\u662f\u9700\u8981\u7ed1\u5b9a\u7684\uff0c\u60f3\u60f3\u770b\u8fd9\u53c8\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u5982\u679c\u62a5\u8b66\u7535\u8bdd\u6bcf\u5929\u90fd\u5728\u53d8\uff0c\u60f3\u5fc5\u4e16\u754c\u5c31\u4f1a\u4e71\u4e86\uff0c\u6240\u4ee5\u4e00\u822c\u670d\u52a1\u6027\u7684\u7a0b\u5e8f\uff0c\u5f80\u5f80\u9700\u8981\u4e00\u4e2a\u56fa\u5b9a\u7684\u7aef\u53e3\u53f7\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u7aef\u53e3\u7ed1\u5b9a","title":"&lt;1&gt;. \u7ed1\u5b9a\u4fe1\u606f"},{"location":"001-\u7f51\u7edcudp/#2","text":"#coding=utf-8 from socket import * # 1\\. \u521b\u5efa\u5957\u63a5\u5b57 udp_socket = socket(AF_INET, SOCK_DGRAM) # 2\\. \u7ed1\u5b9a\u672c\u5730\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u7a0b\u5e8f\u4e0d\u7ed1\u5b9a\uff0c\u5219\u7cfb\u7edf\u4f1a\u968f\u673a\u5206\u914d local_addr = ('', 7788) # ip\u5730\u5740\u548c\u7aef\u53e3\u53f7\uff0cip\u4e00\u822c\u4e0d\u7528\u5199\uff0c\u8868\u793a\u672c\u673a\u7684\u4efb\u4f55\u4e00\u4e2aip udp_socket.bind(local_addr) # 3\\. \u7b49\u5f85\u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u7684\u6570\u636e recv_data = udp_socket.recvfrom(1024) # 1024\u8868\u793a\u672c\u6b21\u63a5\u6536\u7684\u6700\u5927\u5b57\u8282\u6570 # 4\\. \u663e\u793a\u63a5\u6536\u5230\u7684\u6570\u636e print(recv_data[0].decode('gbk')) # 5\\. \u5173\u95ed\u5957\u63a5\u5b57 udp_socket.close()","title":"&lt;2&gt;. \u7ed1\u5b9a\u793a\u4f8b"},{"location":"001-\u7f51\u7edcudp/#_7","text":"","title":"\u8fd0\u884c\u7ed3\u679c\uff1a"},{"location":"001-\u7f51\u7edcudp/#3","text":"\u4e00\u4e2audp\u7f51\u7edc\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4e0d\u7ed1\u5b9a\uff0c\u6b64\u65f6\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u968f\u673a\u8fdb\u884c\u5206\u914d\u4e00\u4e2a\u7aef\u53e3\uff0c\u5982\u679c\u91cd\u65b0\u8fd0\u884c\u6b64\u7a0b\u5e8f\u7aef\u53e3\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316 \u4e00\u4e2audp\u7f51\u7edc\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u7ed1\u5b9a\u4fe1\u606f\uff08ip\u5730\u5740\uff0c\u7aef\u53e3\u53f7\uff09\uff0c\u5982\u679c\u7ed1\u5b9a\u6210\u529f\uff0c\u90a3\u4e48\u64cd\u4f5c\u7cfb\u7edf\u7528\u8fd9\u4e2a\u7aef\u53e3\u53f7\u6765\u8fdb\u884c\u533a\u522b\u6536\u5230\u7684\u7f51\u7edc\u6570\u636e\u662f\u5426\u662f\u6b64\u8fdb\u7a0b\u7684","title":"&lt;3&gt;. \u603b\u7ed3"},{"location":"001-\u7f51\u7edcudp/#39","text":"","title":"3.9\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b(\u7b80\u5355\u7248)"},{"location":"001-\u7f51\u7edcudp/#_8","text":"\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b\u4e2d\uff0c\u4e4b\u6240\u9700\u8981ip\u3001port\u7b49\uff0c\u5c31\u662f\u4e3a\u4e86\u80fd\u591f\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u901a\u4fe1\u8fc7\u7a0b\u8fdb\u884c\u4efb\u52a1\u5212\u5206\uff0c\u4ece\u800c\u4fdd\u8bc1\u6570\u636e\u51c6\u786e\u65e0\u8bef\u7684\u4f20\u9012","title":"\u8bf4\u660e"},{"location":"001-\u7f51\u7edcudp/#310udp","text":"\u8bf4\u660e \u5728\u4e00\u4e2a\u7535\u8111\u4e2d\u7f16\u51991\u4e2a\u7a0b\u5e8f\uff0c\u67092\u4e2a\u529f\u80fd * 1.\u83b7\u53d6\u952e\u76d8\u6570\u636e\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u7ed9\u5bf9\u65b9 * 2.\u63a5\u6536\u6570\u636e\u5e76\u663e\u793a \u5e76\u4e14\u529f\u80fd\u6570\u636e\u8fdb\u884c\u9009\u62e9\u4ee5\u4e0a\u76842\u4e2a\u529f\u80fd\u8c03\u7528","title":"3.10\u5e94\u7528\uff1audp\u804a\u5929\u5668"},{"location":"001-\u7f51\u7edcudp/#_9","text":"\u5b9e\u73b0\u4e0a\u8ff0\u7a0b\u5e8f \u53c2\u8003\u4ee3\u7801: import socket def send_msg ( udp_socket ): \"\"\"\u83b7\u53d6\u952e\u76d8\u6570\u636e\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u7ed9\u5bf9\u65b9\"\"\" # 1. \u4ece\u952e\u76d8\u8f93\u5165\u6570\u636e msg = input ( \" \\n \u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e:\" ) # 2. \u8f93\u5165\u5bf9\u65b9\u7684ip\u5730\u5740 dest_ip = input ( \" \\n \u8bf7\u8f93\u5165\u5bf9\u65b9\u7684ip\u5730\u5740:\" ) # 3. \u8f93\u5165\u5bf9\u65b9\u7684port dest_port = int ( input ( \" \\n \u8bf7\u8f93\u5165\u5bf9\u65b9\u7684port:\" )) # 4. \u53d1\u9001\u6570\u636e udp_socket . sendto ( msg . encode ( \"utf-8\" ), ( dest_ip , dest_port )) def recv_msg ( udp_socket ): \"\"\"\u63a5\u6536\u6570\u636e\u5e76\u663e\u793a\"\"\" # 1. \u63a5\u6536\u6570\u636e recv_msg = udp_socket . recvfrom ( 1024 ) # 2. \u89e3\u7801 recv_ip = recv_msg [ 1 ] recv_msg = recv_msg [ 0 ] . decode ( \"utf-8\" ) # 3. \u663e\u793a\u63a5\u6536\u5230\u7684\u6570\u636e print ( \">>> %s : %s \" % ( str ( recv_ip ), recv_msg )) def main (): # 1. \u521b\u5efa\u5957\u63a5\u5b57 udp_socket = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) # 2. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f udp_socket . bind (( \"\" , 7890 )) while True : # 3. \u9009\u62e9\u529f\u80fd print ( \"=\" * 30 ) print ( \"1:\u53d1\u9001\u6d88\u606f\" ) print ( \"2:\u63a5\u6536\u6d88\u606f\" ) print ( \"=\" * 30 ) op_num = input ( \"\u8bf7\u8f93\u5165\u8981\u64cd\u4f5c\u7684\u529f\u80fd\u5e8f\u53f7:\" ) # 4. \u6839\u636e\u9009\u62e9\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570 if op_num == \"1\" : send_msg ( udp_socket ) elif op_num == \"2\" : recv_msg ( udp_socket ) else : print ( \"\u8f93\u5165\u6709\u8bef\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165...\" ) if __name__ == \"__main__\" : main () \u60f3\u4e00\u60f3 \u4ee5\u4e0a\u7684\u7a0b\u5e8f\u5982\u679c\u9009\u62e9\u4e86\u63a5\u6536\u6570\u636e\u529f\u80fd\uff0c\u5e76\u4e14\u6b64\u65f6\u6ca1\u6709\u6570\u636e\uff0c\u7a0b\u5e8f\u4f1a\u5835\u585e\u5728\u8fd9\uff0c\u90a3\u4e48\u600e\u6837\u624d\u80fd\u8ba9\u8fd9\u4e2a\u7a0b\u5e8f\u6536\u53d1\u6570\u636e\u4e00\u8d77\u8fdb\u884c\u5462\uff1f\u522b\u7740\u6025\uff0c\u5b66\u4e60\u5b8c\u591a\u4efb\u52a1\u77e5\u8bc6\u4e4b\u540e\u5c31\u89e3\u51b3\u4e86O(\u2229_\u2229)O...","title":"\u8981\u6c42"},{"location":"002-\u7f51\u7edctcp/","text":"4.1TCP\u7b80\u4ecb \u00b6 TCP\u4ecb\u7ecd \u00b6 **TCP\u534f\u8bae\uff0c\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff08\u82f1\u8bed\uff1aTransmission Control Protocol\uff0c\u7f29\u5199\u4e3a TCP\uff09**\u662f\u4e00\u79cd\u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u7684\u3001\u57fa\u4e8e\u5b57\u8282\u6d41\u7684\u4f20\u8f93\u5c42\u901a\u4fe1\u534f\u8bae\uff0c\u7531IETF\u7684RFC 793\u5b9a\u4e49\u3002 TCP\u901a\u4fe1\u9700\u8981\u7ecf\u8fc7**\u521b\u5efa\u8fde\u63a5\u3001\u6570\u636e\u4f20\u9001\u3001\u7ec8\u6b62\u8fde\u63a5**\u4e09\u4e2a\u6b65\u9aa4\u3002 TCP\u901a\u4fe1\u6a21\u578b\u4e2d\uff0c\u5728\u901a\u4fe1\u5f00\u59cb\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u5148\u5efa\u7acb\u76f8\u5173\u7684\u94fe\u63a5\uff0c\u624d\u80fd\u53d1\u9001\u6570\u636e\uff0c\u7c7b\u4f3c\u4e8e\u751f\u6d3b\u4e2d\uff0c\"\u6253\u7535\u8bdd\"\" TCP\u7279\u70b9 \u00b6 1. \u9762\u5411\u8fde\u63a5 \u00b6 \u901a\u4fe1\u53cc\u65b9\u5fc5\u987b\u5148\u5efa\u7acb\u8fde\u63a5\u624d\u80fd\u8fdb\u884c\u6570\u636e\u7684\u4f20\u8f93\uff0c\u53cc\u65b9\u90fd\u5fc5\u987b\u4e3a\u8be5\u8fde\u63a5\u5206\u914d\u5fc5\u8981\u7684\u7cfb\u7edf\u5185\u6838\u8d44\u6e90\uff0c\u4ee5\u7ba1\u7406\u8fde\u63a5\u7684\u72b6\u6001\u548c\u8fde\u63a5\u4e0a\u7684\u4f20\u8f93\u3002 \u53cc\u65b9\u95f4\u7684\u6570\u636e\u4f20\u8f93\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u4e2a\u8fde\u63a5\u8fdb\u884c\u3002 \u5b8c\u6210\u6570\u636e\u4ea4\u6362\u540e\uff0c\u53cc\u65b9\u5fc5\u987b\u65ad\u5f00\u6b64\u8fde\u63a5\uff0c\u4ee5\u91ca\u653e\u7cfb\u7edf\u8d44\u6e90\u3002 \u8fd9\u79cd\u8fde\u63a5\u662f\u4e00\u5bf9\u4e00\u7684\uff0c\u56e0\u6b64TCP\u4e0d\u9002\u7528\u4e8e\u5e7f\u64ad\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u57fa\u4e8e\u5e7f\u64ad\u7684\u5e94\u7528\u7a0b\u5e8f\u8bf7\u4f7f\u7528UDP\u534f\u8bae\u3002 2. \u53ef\u9760\u4f20\u8f93 \u00b6 1\uff09 TCP\u91c7\u7528\u53d1\u9001\u5e94\u7b54\u673a\u5236 TCP\u53d1\u9001\u7684\u6bcf\u4e2a\u62a5\u6587\u6bb5\u90fd\u5fc5\u987b\u5f97\u5230\u63a5\u6536\u65b9\u7684\u5e94\u7b54\u624d\u8ba4\u4e3a\u8fd9\u4e2aTCP\u62a5\u6587\u6bb5\u4f20\u8f93\u6210\u529f 2\uff09 \u8d85\u65f6\u91cd\u4f20 \u53d1\u9001\u7aef\u53d1\u51fa\u4e00\u4e2a\u62a5\u6587\u6bb5\u4e4b\u540e\u5c31\u542f\u52a8\u5b9a\u65f6\u5668\uff0c\u5982\u679c\u5728\u5b9a\u65f6\u65f6\u95f4\u5185\u6ca1\u6709\u6536\u5230\u5e94\u7b54\u5c31\u91cd\u65b0\u53d1\u9001\u8fd9\u4e2a\u62a5\u6587\u6bb5\u3002 TCP\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u53d1\u751f\u4e22\u5305\uff0c\u5c31\u7ed9\u6bcf\u4e2a\u5305\u4e00\u4e2a\u5e8f\u53f7\uff0c\u540c\u65f6\u5e8f\u53f7\u4e5f\u4fdd\u8bc1\u4e86\u4f20\u9001\u5230\u63a5\u6536\u7aef\u5b9e\u4f53\u7684\u5305\u7684\u6309\u5e8f\u63a5\u6536\u3002\u7136\u540e\u63a5\u6536\u7aef\u5b9e\u4f53\u5bf9\u5df2\u6210\u529f\u6536\u5230\u7684\u5305\u53d1\u56de\u4e00\u4e2a\u76f8\u5e94\u7684\u786e\u8ba4\uff08ACK\uff09\uff1b\u5982\u679c\u53d1\u9001\u7aef\u5b9e\u4f53\u5728\u5408\u7406\u7684\u5f80\u8fd4\u65f6\u5ef6\uff08RTT\uff09\u5185\u672a\u6536\u5230\u786e\u8ba4\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u6570\u636e\u5305\u5c31\u88ab\u5047\u8bbe\u4e3a\u5df2\u4e22\u5931\u5c06\u4f1a\u88ab\u8fdb\u884c\u91cd\u4f20\u3002 3\uff09 \u9519\u8bef\u6821\u9a8c TCP\u7528\u4e00\u4e2a\u6821\u9a8c\u548c\u51fd\u6570\u6765\u68c0\u9a8c\u6570\u636e\u662f\u5426\u6709\u9519\u8bef\uff1b\u5728\u53d1\u9001\u548c\u63a5\u6536\u65f6\u90fd\u8981\u8ba1\u7b97\u6821\u9a8c\u548c\u3002 4) \u6d41\u91cf\u63a7\u5236\u548c\u963b\u585e\u7ba1\u7406 \u6d41\u91cf\u63a7\u5236\u7528\u6765\u907f\u514d\u4e3b\u673a\u53d1\u9001\u5f97\u8fc7\u5feb\u800c\u4f7f\u63a5\u6536\u65b9\u6765\u4e0d\u53ca\u5b8c\u5168\u6536\u4e0b\u3002 TCP\u4e0eUDP\u7684\u4e0d\u540c\u70b9 \u00b6 \u9762\u5411\u8fde\u63a5\uff08\u786e\u8ba4\u6709\u521b\u5efa\u4e09\u65b9\u4ea4\u63e1\uff0c\u8fde\u63a5\u5df2\u521b\u5efa\u624d\u4f5c\u4f20\u8f93\u3002\uff09 \u6709\u5e8f\u6570\u636e\u4f20\u8f93 \u91cd\u53d1\u4e22\u5931\u7684\u6570\u636e\u5305 \u820d\u5f03\u91cd\u590d\u7684\u6570\u636e\u5305 \u65e0\u5dee\u9519\u7684\u6570\u636e\u4f20\u8f93 \u963b\u585e/\u6d41\u91cf\u63a7\u5236 udp\u901a\u4fe1\u6a21\u578b \u00b6 udp\u901a\u4fe1\u6a21\u578b\u4e2d\uff0c\u5728\u901a\u4fe1\u5f00\u59cb\u4e4b\u524d\uff0c\u4e0d\u9700\u8981\u5efa\u7acb\u76f8\u5173\u7684\u94fe\u63a5\uff0c\u53ea\u9700\u8981\u53d1\u9001\u6570\u636e\u5373\u53ef\uff0c\u7c7b\u4f3c\u4e8e\u751f\u6d3b\u4e2d\uff0c\"\u5199\u4fe1\"\" TCP\u901a\u4fe1\u6a21\u578b \u00b6 udp\u901a\u4fe1\u6a21\u578b\u4e2d\uff0c\u5728\u901a\u4fe1\u5f00\u59cb\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u5148\u5efa\u7acb\u76f8\u5173\u7684\u94fe\u63a5\uff0c\u624d\u80fd\u53d1\u9001\u6570\u636e\uff0c\u7c7b\u4f3c\u4e8e\u751f\u6d3b\u4e2d\uff0c\"\u6253\u7535\u8bdd\"\" 4.2tcp\u5ba2\u6237\u7aef \u00b6 tcp\u5ba2\u6237\u7aef\uff0c\u5e76\u4e0d\u662f\u50cf\u4e4b\u524d\u4e00\u4e2a\u6bb5\u5b50\uff1a\u4e00\u4e2a\u987e\u5ba2\u53bb\u996d\u9986\u5403\u996d\uff0c\u8fd9\u4e2a\u987e\u5ba2\u8981\u70b9\u83dc\uff0c\u5c31\u95ee\u670d\u52a1\u5458\u54b1\u4eec\u996d\u5e97\u6709\u5ba2\u6237\u7aef\u4e48\uff0c\u7136\u540e\u8fd9\u4e2a\u670d\u52a1\u5458\u975e\u5e38\u5ba2\u6c14\u7684\u8bf4\u9053\uff1a\u5148\u751f \u6211\u4eec\u996d\u5e97\u4e0d\u7528\u5ba2\u6237\u7aef\uff0c\u6211\u4eec\u76f4\u63a5\u9001\u5230\u60a8\u7684\u9910\u684c\u4e0a \u5982\u679c\uff0c\u4e0d\u5b66\u4e60\u7f51\u7edc\u7684\u77e5\u8bc6\u662f\u4e0d\u662f \u8bf4\u4e0d\u5b9a\u4e5f\u4f1a\u53d1\u751f\u90a3\u6837\u7684\u7b11\u8bdd \uff0c\u54c8\u54c8 \u6240\u8c13\u7684\u670d\u52a1\u5668\u7aef\uff1a\u5c31\u662f\u63d0\u4f9b\u670d\u52a1\u7684\u4e00\u65b9\uff0c\u800c\u5ba2\u6237\u7aef\uff0c\u5c31\u662f\u9700\u8981\u88ab\u670d\u52a1\u7684\u4e00\u65b9 tcp\u5ba2\u6237\u7aef\u6784\u5efa\u6d41\u7a0b \u00b6 tcp\u7684\u5ba2\u6237\u7aef\u8981\u6bd4\u670d\u52a1\u5668\u7aef\u7b80\u5355\u5f88\u591a\uff0c\u5982\u679c\u8bf4\u670d\u52a1\u5668\u7aef\u662f\u9700\u8981\u81ea\u5df1\u4e70\u624b\u673a\u3001\u67e5\u624b\u673a\u5361\u3001\u8bbe\u7f6e\u94c3\u58f0\u3001\u7b49\u5f85\u522b\u4eba\u6253\u7535\u8bdd\u6d41\u7a0b\u7684\u8bdd\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5c31\u53ea\u9700\u8981\u627e\u4e00\u4e2a\u7535\u8bdd\u4ead\uff0c\u62ff\u8d77\u7535\u8bdd\u62e8\u6253\u5373\u53ef\uff0c\u6d41\u7a0b\u8981\u5c11\u5f88\u591a \u793a\u4f8b\u4ee3\u7801\uff1a from socket import * # \u521b\u5efasocket tcp_client_socket = socket ( AF_INET , SOCK_STREAM ) # \u76ee\u7684\u4fe1\u606f server_ip = input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668ip:\" ) server_port = int ( input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668port:\" )) # \u94fe\u63a5\u670d\u52a1\u5668 tcp_client_socket . connect (( server_ip , server_port )) # \u63d0\u793a\u7528\u6237\u8f93\u5165\u6570\u636e send_data = input ( \"\u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e\uff1a\" ) tcp_client_socket . send ( send_data . encode ( \"gbk\" )) # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\uff0c\u6700\u5927\u63a5\u65361024\u4e2a\u5b57\u8282 recvData = tcp_client_socket . recv ( 1024 ) print ( '\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:' , recvData . decode ( 'gbk' )) # \u5173\u95ed\u5957\u63a5\u5b57 tcp_client_socket . close () \u8fd0\u884c\u6d41\u7a0b\uff1a \u00b6 <1>tcp\u5ba2\u6237\u7aef \u00b6 \u8bf7\u8f93\u5165\u670d\u52a1\u5668ip:10.10.0.47 \u8bf7\u8f93\u5165\u670d\u52a1\u5668port:8080 \u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e\uff1a\u4f60\u597d\u554a \u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a: \u6211\u5f88\u597d\uff0c\u4f60\u5462 <2>\u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\uff1a \u00b6 4.3tcp\u670d\u52a1\u5668 \u00b6 \u751f\u6d3b\u4e2d\u7684\u7535\u8bdd\u673a \u00b6 \u5982\u679c\u60f3\u8ba9\u522b\u4eba\u80fd\u66f4\u591f\u6253\u901a\u54b1\u4eec\u7684\u7535\u8bdd\u83b7\u53d6\u76f8\u5e94\u670d\u52a1\u7684\u8bdd\uff0c\u9700\u8981\u505a\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\u60c5\uff1a \u4e70\u4e2a\u624b\u673a \u63d2\u4e0a\u624b\u673a\u5361 \u8bbe\u8ba1\u624b\u673a\u4e3a\u6b63\u5e38\u63a5\u542c\u72b6\u6001\uff08\u5373\u80fd\u591f\u54cd\u94c3\uff09 \u9759\u9759\u7684\u7b49\u7740\u522b\u4eba\u62e8\u6253 tcp\u670d\u52a1\u5668 \u00b6 \u5982\u540c\u4e0a\u9762\u7684\u7535\u8bdd\u673a\u8fc7\u7a0b\u4e00\u6837\uff0c\u5728\u7a0b\u5e8f\u4e2d\uff0c\u5982\u679c\u60f3\u8981\u5b8c\u6210\u4e00\u4e2atcp\u670d\u52a1\u5668\u7684\u529f\u80fd\uff0c\u9700\u8981\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a socket\u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57 bind\u7ed1\u5b9aip\u548cport listen\u4f7f\u5957\u63a5\u5b57\u53d8\u4e3a\u53ef\u4ee5\u88ab\u52a8\u94fe\u63a5 accept\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 recv/send\u63a5\u6536\u53d1\u9001\u6570\u636e \u4e00\u4e2a\u5f88\u7b80\u5355\u7684tcp\u670d\u52a1\u5668\u5982\u4e0b\uff1a # -*- coding: utf-8 -*- \"\"\" Created on Sun Jun 9 11:38:45 2019 @author: zangz \"\"\" from socket import * # \u521b\u5efasocket tcp_server_socket = socket ( AF_INET , SOCK_STREAM ) # \u672c\u5730\u4fe1\u606f address = ( '192.168.124.42' , 7788 ) # \u7ed1\u5b9a tcp_server_socket . bind ( address ) # \u4f7f\u7528socket\u521b\u5efa\u7684\u5957\u63a5\u5b57\u9ed8\u8ba4\u7684\u5c5e\u6027\u662f\u4e3b\u52a8\u7684\uff0c\u4f7f\u7528listen\u5c06\u5176\u53d8\u4e3a\u88ab\u52a8\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a5\u6536\u522b\u4eba\u7684\u94fe\u63a5\u4e86 tcp_server_socket . listen ( 128 ) # \u5982\u679c\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u6765\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u5c31\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u4e13\u95e8\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # client_socket\u7528\u6765\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # tcp_server_socket\u5c31\u53ef\u4ee5\u7701\u4e0b\u6765\u4e13\u95e8\u7b49\u5f85\u5176\u4ed6\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 client_socket , clientAddr = tcp_server_socket . accept () # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e recv_data = client_socket . recv ( 1024 ) # \u63a5\u65361024\u4e2a\u5b57\u8282 print ( '\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:' , recv_data . decode ( 'utf-8' )) # \u53d1\u9001\u4e00\u4e9b\u6570\u636e\u5230\u5ba2\u6237\u7aef client_socket . send ( \"thank you !\" . encode ( 'utf-8' )) # \u5173\u95ed\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u7684\u5957\u63a5\u5b57\uff0c\u53ea\u8981\u5173\u95ed\u4e86\uff0c\u5c31\u610f\u5473\u7740\u4e3a\u4e0d\u80fd\u518d\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u4e86\uff0c\u5982\u679c\u8fd8\u9700\u8981\u670d\u52a1\uff0c\u53ea\u80fd\u518d\u6b21\u91cd\u65b0\u8fde\u63a5 client_socket . close () #\u5173\u95ed\u6574\u4e2a\u7684\u670d\u52a1\u7aef tcp_server_socket . close () \u8fd0\u884c\u6d41\u7a0b\uff1a \u00b6 <1>tcp\u670d\u52a1\u5668 \u00b6 \u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a: \u4f60\u5728\u4e48\uff1f <2>\u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\uff1a \u00b6 \u5b9e\u4f8b:while\u5faa\u73af\u5b9e\u73b0\u4e00\u76f4\u63a5\u6536: # -*- coding: utf-8 -*- \"\"\" Created on Sun Jun 9 11:38:45 2019 @author: zangz \"\"\" from socket import * # \u521b\u5efasocket tcp_server_socket = socket ( AF_INET , SOCK_STREAM ) # \u672c\u5730\u4fe1\u606f address = ( '192.168.124.42' , 7788 ) # \u7ed1\u5b9a tcp_server_socket . bind ( address ) # \u4f7f\u7528socket\u521b\u5efa\u7684\u5957\u63a5\u5b57\u9ed8\u8ba4\u7684\u5c5e\u6027\u662f\u4e3b\u52a8\u7684\uff0c\u4f7f\u7528listen\u5c06\u5176\u53d8\u4e3a\u88ab\u52a8\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a5\u6536\u522b\u4eba\u7684\u94fe\u63a5\u4e86 tcp_server_socket . listen ( 128 ) while True : # \u5982\u679c\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u6765\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u5c31\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u4e13\u95e8\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # client_socket\u7528\u6765\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # tcp_server_socket\u5c31\u53ef\u4ee5\u7701\u4e0b\u6765\u4e13\u95e8\u7b49\u5f85\u5176\u4ed6\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 print ( '\u7b49\u5f85\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u94fe\u63a5' ) client_socket , clientAddr = tcp_server_socket . accept () # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e recv_data = client_socket . recv ( 1024 ) # \u63a5\u65361024\u4e2a\u5b57\u8282 print ( '\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:' , recv_data . decode ( 'utf-8' )) # \u53d1\u9001\u4e00\u4e9b\u6570\u636e\u5230\u5ba2\u6237\u7aef client_socket . send ( \"thank you !\" . encode ( 'utf-8' )) # \u5173\u95ed\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u7684\u5957\u63a5\u5b57\uff0c\u53ea\u8981\u5173\u95ed\u4e86\uff0c\u5c31\u610f\u5473\u7740\u4e3a\u4e0d\u80fd\u518d\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u4e86\uff0c\u5982\u679c\u8fd8\u9700\u8981\u670d\u52a1\uff0c\u53ea\u80fd\u518d\u6b21\u91cd\u65b0\u8fde\u63a5 client_socket . close () #\u5173\u95ed\u6574\u4e2a\u7684\u670d\u52a1\u7aef tcp_server_socket . close () \u6848\u4f8b,\u4e3a\u5ba2\u6237\u7aef\u670d\u52a1\u591a\u6b21 \u00b6 # -*- coding: utf-8 -*- \"\"\" Created on Sun Jun 9 11:38:45 2019 @author: zangz \"\"\" from socket import * # \u521b\u5efasocket tcp_server_socket = socket ( AF_INET , SOCK_STREAM ) # \u672c\u5730\u4fe1\u606f address = ( '192.168.43.72' , 7788 ) # \u7ed1\u5b9a tcp_server_socket . bind ( address ) # \u4f7f\u7528socket\u521b\u5efa\u7684\u5957\u63a5\u5b57\u9ed8\u8ba4\u7684\u5c5e\u6027\u662f\u4e3b\u52a8\u7684\uff0c\u4f7f\u7528listen\u5c06\u5176\u53d8\u4e3a\u88ab\u52a8\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a5\u6536\u522b\u4eba\u7684\u94fe\u63a5\u4e86 tcp_server_socket . listen ( 128 ) while True : # \u5982\u679c\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u6765\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u5c31\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u4e13\u95e8\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # client_socket\u7528\u6765\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # tcp_server_socket\u5c31\u53ef\u4ee5\u7701\u4e0b\u6765\u4e13\u95e8\u7b49\u5f85\u5176\u4ed6\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 print ( '\u7b49\u5f85\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u94fe\u63a5' ) client_socket , clientAddr = tcp_server_socket . accept () print ( '\u4e00\u4e2a\u5ba2\u6237\u7aef\u5df2\u7ecf\u5230\u6765' ) while True : # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e recv_data = client_socket . recv ( 1024 ) # \u63a5\u65361024\u4e2a\u5b57\u8282 print ( '\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:' , recv_data . decode ( 'utf-8' )) #\u5982\u679crecv\u89e3\u5835\u585e\u90a3\u4e48\u6709\u4e24\u79cd\u65b9\u6cd5 #1: \u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u6570\u636e #2: \u5ba2\u6237\u7aef\u8c03\u7528\u4e86close if recv_data : # \u53d1\u9001\u4e00\u4e9b\u6570\u636e\u5230\u5ba2\u6237\u7aef client_socket . send ( \"thank you !\" . encode ( 'utf-8' )) else : #\u5ba2\u6237\u7aef\u5173\u95ed\u4ee5\u540e,recv_data\u7684\u6570\u636e\u5c31\u662f\u7a7a.\u90a3\u4e48\u5c31\u4f1a\u8df3\u8f6c\u5230else,\u90a3\u4e48\u8df3\u51fa\u8fd9\u4e2a\u5faa\u73af break # \u5173\u95ed\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u7684\u5957\u63a5\u5b57\uff0c\u53ea\u8981\u5173\u95ed\u4e86\uff0c\u5c31\u610f\u5473\u7740\u4e3a\u4e0d\u80fd\u518d\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u4e86\uff0c\u5982\u679c\u8fd8\u9700\u8981\u670d\u52a1\uff0c\u53ea\u80fd\u518d\u6b21\u91cd\u65b0\u8fde\u63a5 client_socket . close () #\u5173\u95ed\u6574\u4e2a\u7684\u670d\u52a1\u7aef tcp_server_socket . close () 4.4 tcp\u6ce8\u610f\u70b9 \u00b6 tcp\u670d\u52a1\u5668\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u9700\u8981\u7ed1\u5b9a\uff0c\u5426\u5219\u5ba2\u6237\u7aef\u627e\u4e0d\u5230\u8fd9\u4e2a\u670d\u52a1\u5668 tcp\u5ba2\u6237\u7aef\u4e00\u822c\u4e0d\u7ed1\u5b9a\uff0c\u56e0\u4e3a\u662f\u4e3b\u52a8\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u53ea\u8981\u786e\u5b9a\u597d\u670d\u52a1\u5668\u7684ip\u3001port\u7b49\u4fe1\u606f\u5c31\u597d\uff0c\u672c\u5730\u5ba2\u6237\u7aef\u53ef\u4ee5\u968f\u673a tcp\u670d\u52a1\u5668\u4e2d\u901a\u8fc7listen\u53ef\u4ee5\u5c06socket\u521b\u5efa\u51fa\u6765\u7684\u4e3b\u52a8\u5957\u63a5\u5b57\u53d8\u4e3a\u88ab\u52a8\u7684\uff0c\u8fd9\u662f\u505atcp\u670d\u52a1\u5668\u65f6\u5fc5\u987b\u8981\u505a\u7684 \u5f53\u5ba2\u6237\u7aef\u9700\u8981\u94fe\u63a5\u670d\u52a1\u5668\u65f6\uff0c\u5c31\u9700\u8981\u4f7f\u7528connect\u8fdb\u884c\u94fe\u63a5\uff0cudp\u662f\u4e0d\u9700\u8981\u94fe\u63a5\u7684\u800c\u662f\u76f4\u63a5\u53d1\u9001\uff0c\u4f46\u662ftcp\u5fc5\u987b\u5148\u94fe\u63a5\uff0c\u53ea\u6709\u94fe\u63a5\u6210\u529f\u624d\u80fd\u901a\u4fe1 \u5f53\u4e00\u4e2atcp\u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668\u65f6\uff0c\u670d\u52a1\u5668\u7aef\u4f1a\u67091\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\uff0c\u8fd9\u4e2a\u5957\u63a5\u5b57\u7528\u6765\u6807\u8bb0\u8fd9\u4e2a\u5ba2\u6237\u7aef\uff0c\u5355\u72ec\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 listen\u540e\u7684\u5957\u63a5\u5b57\u662f\u88ab\u52a8\u5957\u63a5\u5b57\uff0c\u7528\u6765\u63a5\u6536\u65b0\u7684\u5ba2\u6237\u7aef\u7684\u94fe\u63a5\u8bf7\u6c42\u7684\uff0c\u800caccept\u8fd4\u56de\u7684\u65b0\u5957\u63a5\u5b57\u662f\u6807\u8bb0\u8fd9\u4e2a\u65b0\u5ba2\u6237\u7aef\u7684 \u5173\u95edlisten\u540e\u7684\u5957\u63a5\u5b57\u610f\u5473\u7740\u88ab\u52a8\u5957\u63a5\u5b57\u5173\u95ed\u4e86\uff0c\u4f1a\u5bfc\u81f4\u65b0\u7684\u5ba2\u6237\u7aef\u4e0d\u80fd\u591f\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u4f46\u662f\u4e4b\u524d\u5df2\u7ecf\u94fe\u63a5\u6210\u529f\u7684\u5ba2\u6237\u7aef\u6b63\u5e38\u901a\u4fe1\u3002 \u5173\u95edaccept\u8fd4\u56de\u7684\u5957\u63a5\u5b57\u610f\u5473\u7740\u8fd9\u4e2a\u5ba2\u6237\u7aef\u5df2\u7ecf\u670d\u52a1\u5b8c\u6bd5 \u5f53\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u8c03\u7528close\u540e\uff0c\u670d\u52a1\u5668\u7aef\u4f1arecv\u89e3\u5835\u585e\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u957f\u5ea6\u4e3a0\uff0c\u56e0\u6b64\u670d\u52a1\u5668\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u6570\u636e\u7684\u957f\u5ea6\u6765\u533a\u522b\u5ba2\u6237\u7aef\u662f\u5426\u5df2\u7ecf\u4e0b\u7ebf 4.5 \u6848\u4f8b:\u6587\u4ef6\u4e0b\u8f7d\u5668 \u00b6 \u670d\u52a1\u5668 \u53c2\u8003\u4ee3\u7801\u5982\u4e0b: # -*- coding: utf-8 -*- \"\"\" Created on Sun Jun 9 11:38:45 2019 @author: zangz \"\"\" from socket import * import sys def get_file_content ( file_name ): \"\"\"\u83b7\u53d6\u6587\u4ef6\u7684\u5185\u5bb9\"\"\" try : with open ( file_name , \"rb\" ) as f : content = f . read () return content except : print ( \"\u6ca1\u6709\u4e0b\u8f7d\u7684\u6587\u4ef6: %s \" % file_name ) def main (): if len ( sys . argv ) != 2 : print ( \"\u8bf7\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8fd0\u884c\uff1apython3 xxx.py 7890\" ) return else : # \u8fd0\u884c\u65b9\u5f0f\u4e3apython3 xxx.py 7890 port = int ( sys . argv [ 1 ]) # \u521b\u5efasocket tcp_server_socket = socket ( AF_INET , SOCK_STREAM ) # \u672c\u5730\u4fe1\u606f address = ( '192.168.43.72' , port ) #\u8fd9\u91cc\u7684port\u662f\u8fd0\u884c\u7a0b\u5e8f\u83b7\u5f97\u7684 # \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f tcp_server_socket . bind ( address ) # \u5c06\u4e3b\u52a8\u5957\u63a5\u5b57\u53d8\u4e3a\u88ab\u52a8\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # \u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u94fe\u63a5\uff0c\u5373\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u53d1\u9001\u6587\u4ef6 client_socket , clientAddr = tcp_server_socket . accept () # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e recv_data = client_socket . recv ( 1024 ) # \u63a5\u65361024\u4e2a\u5b57\u8282 file_name = recv_data . decode ( \"utf-8\" ) print ( \"\u5bf9\u65b9\u8bf7\u6c42\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\u4e3a: %s \" % file_name ) file_content = get_file_content ( file_name ) # \u53d1\u9001\u6587\u4ef6\u7684\u6570\u636e\u7ed9\u5ba2\u6237\u7aef # \u56e0\u4e3a\u83b7\u53d6\u6253\u5f00\u6587\u4ef6\u65f6\u662f\u4ee5rb\u65b9\u5f0f\u6253\u5f00\uff0c\u6240\u4ee5file_content\u4e2d\u7684\u6570\u636e\u5df2\u7ecf\u662f\u4e8c\u8fdb\u5236\u7684\u683c\u5f0f\uff0c\u56e0\u6b64\u4e0d\u9700\u8981encode\u7f16\u7801 if file_content : client_socket . send ( file_content ) # \u5173\u95ed\u8fd9\u4e2a\u5957\u63a5\u5b57 client_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u5ba2\u6237\u7aef \u53c2\u8003\u4ee3\u7801\u5982\u4e0b: from socket import * def main (): # \u521b\u5efasocket tcp_client_socket = socket ( AF_INET , SOCK_STREAM ) # \u76ee\u7684\u4fe1\u606f server_ip = input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668ip:\" ) server_port = int ( input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668port:\" )) # \u94fe\u63a5\u670d\u52a1\u5668 tcp_client_socket . connect (( server_ip , server_port )) # \u8f93\u5165\u9700\u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d file_name = input ( \"\u8bf7\u8f93\u5165\u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\uff1a\" ) # \u53d1\u9001\u6587\u4ef6\u4e0b\u8f7d\u8bf7\u6c42 tcp_client_socket . send ( file_name . encode ( \"utf-8\" )) # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\uff0c\u6700\u5927\u63a5\u65361024\u4e2a\u5b57\u8282\uff081K\uff09 recv_data = tcp_client_socket . recv ( 1024 ) # print('\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:', recv_data.decode('utf-8')) # \u5982\u679c\u63a5\u6536\u5230\u6570\u636e\u518d\u521b\u5efa\u6587\u4ef6\uff0c\u5426\u5219\u4e0d\u521b\u5efa if recv_data : with open ( \"[\u63a5\u6536]\" + file_name , \"wb\" ) as f : f . write ( recv_data ) # \u5173\u95ed\u5957\u63a5\u5b57 tcp_client_socket . close () if __name__ == \"__main__\" : main () 4.6 tcp\u76843\u6b21\u63e1\u624b \u00b6 4.7 tcp\u76844\u6b21\u6325\u624b \u00b6 \u670d\u52a1\u5668\u4e0d\u80fd\u5148\u5173\u95ed,\u518d\u6b21\u542f\u52a8\u5bb9\u6613\u5360\u7528\u8fd9\u4e2a\u7aef\u53e3,\u4e0d\u80fd\u7ee7\u7eed\u4f7f\u7528 \u7b2c\u4e00\u6b21\u6325\u624b\uff1a Client \uff08\u53ef\u4ee5\u4f7f\u5ba2\u6237\u7aef\uff0c\u4e5f\u53ef\u4ee5\u662f\u670d\u52a1\u5668\u7aef\uff09\uff0c\u8bbe\u7f6eSequence Number\u548cAcknowledgment Number\uff0c\u5411 Server\u53d1\u9001\u4e00\u4e2aFIN\u62a5\u6587\u6bb5\uff1b\u6b64\u65f6\uff0cClient \u8fdb\u5165FIN_WAIT_1\u72b6\u6001\uff1b\u8fd9\u8868\u793a Client \u6ca1\u6709\u6570\u636e\u8981\u53d1\u9001\u7ed9 Server\u4e86\uff1b \u5ba2\u6237\u7aef\u53d1\u9001\u7b2c\u4e00\u6b21\u6325\u624b\u540e\uff0c\u5c31\u4e0d\u80fd\u5728\u5411 \u670d\u52a1\u7aef\u53d1\u9001\u6570\u636e\u4e86\u3002 \u7b2c\u4e8c\u6b21\u6325\u624b\uff1a Server \u6536\u5230\u4e86 Client \u53d1\u9001\u7684FIN\u62a5\u6587\u6bb5\uff0c\u5411 Client \u56de\u4e00\u4e2aACK\u62a5\u6587\u6bb5\uff0cAcknowledgment Number \u4e3a Sequence Number \u52a0 1\uff1bClient \u8fdb\u5165 FIN_WAIT_2 \u72b6\u6001\uff1bServer \u544a\u8bc9 Client \uff0c\u6211\u201c\u540c\u610f\u201d\u4f60\u7684\u5173\u95ed\u8bf7\u6c42\uff1b Server \u7b2c\u4e00\u6b21\u54cd\u5e94\u540e\uff0c\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u5411 Client \u53d1\u9001\u6570\u636e\uff0c\u8fd9\u91cc\u53ea\u662f\u544a\u8bc9 Client \uff0c\u6211\u6536\u5230\u4f60\u53d1\u9001\u7684\u5173\u95ed\u8bf7\u6c42\u3002 \u7b2c\u4e09\u6b21\u6325\u624b Server \u5411 Client \u53d1\u9001 FIN \u62a5\u6587\u6bb5\uff0c\u8bf7\u6c42\u5173\u95ed\u8fde\u63a5\uff0c\u540c\u65f6 Server \u8fdb\u5165 CLOSE_WAIT \u72b6\u6001\uff1b \u5f53 Server \u7684\u6570\u636e\u54cd\u5e94\u5b8c\u6210\u540e\uff0c\u518d\u544a\u8bc9 Client\uff0c\u6211\u8fd9\u8fb9\u4e5f\u53ef\u4ee5\u5173\u95ed\u8bf7\u6c42\u4e86\uff0c \u8fd9\u65f6 Server \u5c31\u4e0d\u80fd\u518d\u5411 Client \u53d1\u9001\u6570\u636e\u4e86 \u7b2c\u56db\u6b21\u6325\u624b Client \u6536\u5230 Server \u53d1\u9001\u7684 FIN \u62a5\u6587\u6bb5\uff0c\u5411 Server \u53d1\u9001 ACK \u62a5\u6587\u6bb5\uff0c\u7136\u540e Client \u8fdb\u5165 TIME_WAIT \u72b6\u6001\uff1bServer \u6536\u5230 Client \u7684 ACK \u62a5\u6587\u6bb5\u4ee5\u540e\uff0c\u5c31\u5173\u95ed\u8fde\u63a5\uff1b\u6b64\u65f6\uff0cClient \u7b49\u5f852MSL\u540e\u4f9d\u7136\u6ca1\u6709\u6536\u5230\u56de\u590d\uff0c\u5219\u8bc1\u660e Server \u7aef\u5df2\u6b63\u5e38\u5173\u95ed\uff0c\u90a3\u597d\uff0cClient \u4e5f\u53ef\u4ee5\u5173\u95ed\u8fde\u63a5\u4e86\u3002 \u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u5efa\u7acb\u8fde\u63a5\u662f\u4e09\u6b21\u63e1\u624b\uff0c\u800c\u5173\u95ed\u8fde\u63a5\u5374\u662f\u56db\u6b21\u6325\u624b\u5462\uff1f \u5efa\u7acb\u8fde\u63a5 \u56e0\u4e3a\u670d\u52a1\u7aef\u5728LISTEN\u72b6\u6001\u4e0b\uff0c\u6536\u5230\u5efa\u7acb\u8fde\u63a5\u8bf7\u6c42\u7684SYN\u62a5\u6587\u540e\uff0c\u628aACK\u548cSYN\u653e\u5728\u4e00\u4e2a\u62a5\u6587\u91cc\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u3002 \u5173\u95ed\u8fde\u63a5 \u5f53\u6536\u5230\u5bf9\u65b9\u7684FIN\u62a5\u6587\u65f6\uff0c\u4ec5\u8868\u793a\u5bf9\u65b9\u4e0d\u518d\u53d1\u9001\u6570\u636e\u4f46\u8fd8\u80fd\u63a5\u6536\u6536\u636e\uff0c\u6211\u4eec\u4e5f\u672a\u5fc5\u628a\u5168\u90e8\u6570\u636e\u90fd\u53d1\u7ed9\u4e86\u5bf9\u65b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7acb\u5373close\uff0c\u4e5f\u53ef\u4ee5\u53d1\u9001\u4e00\u4e9b\u6570\u636e\u7ed9\u5bf9\u65b9\u540e\uff0c\u518d\u53d1\u9001FIN\u62a5\u6587\u7ed9\u5bf9\u65b9\u8868\u793a\u540c\u610f\u5173\u95ed\u8fde\u63a5\u3002\u56e0\u6b64\u6211\u4eec\u7684ACK\u548cFIN\u4e00\u822c\u4f1a\u5206\u5f00\u53d1\u9001\u3002 TCP\u534f\u8bae\u662f\u4e00\u79cd\u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u7684\u3001\u57fa\u4e8e\u5b57\u8282\u6d41\u7684\u4f20\u8f93\u5c42\u901a\u4fe1\u534f\u8bae\uff0c\u91c7\u7528\u5168\u53cc\u5de5\u901a\u4fe1\u3002 \u90a3\u4e3a\u4ec0\u4e48\u9700\u8981\u4e09\u6b21\u63e1\u624b\u5462\uff1f\u8bf7\u770b\u5982\u4e0b\u7684\u8fc7\u7a0b\uff1a A\u5411B\u53d1\u8d77\u5efa\u7acb\u8fde\u63a5\u8bf7\u6c42\uff1aA\u2014\u2014>B\uff1b B\u6536\u5230A\u7684\u53d1\u9001\u4fe1\u53f7\uff0c\u5e76\u4e14\u5411A\u53d1\u9001\u786e\u8ba4\u4fe1\u606f\uff1aB\u2014\u2014>A\uff1b A\u6536\u5230B\u7684\u786e\u8ba4\u4fe1\u53f7\uff0c\u5e76\u5411B\u53d1\u9001\u786e\u8ba4\u4fe1\u53f7\uff1aA\u2014\u2014>B\u3002 \u4e09\u6b21\u63e1\u624b\u5927\u6982\u5c31\u662f\u8fd9\u4e48\u4e2a\u8fc7\u7a0b\u3002 \u901a\u8fc7\u7b2c\u4e00\u6b21\u63e1\u624b\uff0cB\u77e5\u9053A\u80fd\u591f\u53d1\u9001\u6570\u636e\u3002\u901a\u8fc7\u7b2c\u4e8c\u6b21\u63e1\u624b\uff0cA\u77e5\u9053B\u80fd\u53d1\u9001\u6570\u636e\u3002\u7ed3\u5408\u7b2c\u4e00\u6b21\u63e1\u624b\u548c\u7b2c\u4e8c\u6b21\u63e1\u624b\uff0cA\u77e5\u9053B\u80fd\u63a5\u6536\u6570\u636e\u3002\u7ed3\u5408\u7b2c\u4e09\u6b21\u63e1\u624b\uff0cB\u77e5\u9053A\u80fd\u591f\u63a5\u6536\u6570\u636e\u3002 \u81f3\u6b64\uff0c\u5b8c\u6210\u4e86\u63e1\u624b\u8fc7\u7a0b\uff0cA\u77e5\u9053B\u80fd\u6536\u80fd\u53d1\uff0cB\u77e5\u9053A\u80fd\u6536\u80fd\u53d1\uff0c\u901a\u4fe1\u8fde\u63a5\u81f3\u6b64\u5efa\u7acb\u3002\u4e09\u6b21\u8fde\u63a5\u662f\u4fdd\u8bc1\u53ef\u9760\u7684\u6700\u5c0f\u63e1\u624b\u6b21\u6570\uff0c\u518d\u591a\u6b21\u63e1\u624b\u4e5f\u4e0d\u80fd\u63d0\u9ad8\u901a\u4fe1\u6210\u529f\u7684\u6982\u7387\uff0c\u53cd\u800c\u6d6a\u8d39\u8d44\u6e90\u3002 \u90a3\u4e3a\u4ec0\u4e48\u9700\u8981\u56db\u6b21\u6325\u624b\u5462\uff1f\u8bf7\u770b\u5982\u4e0b\u8fc7\u7a0b\uff1a A\u5411B\u53d1\u8d77\u8bf7\u6c42\uff0c\u8868\u793aA\u6ca1\u6709\u6570\u636e\u8981\u53d1\u9001\u4e86\uff1aA\u2014\u2014>B\uff1b B\u5411A\u53d1\u9001\u4fe1\u53f7\uff0c\u786e\u8ba4A\u7684\u65ad\u5f00\u8bf7\u6c42\u8bf7\u6c42\uff1aB\u2014\u2014>A\uff1b B\u5411A\u53d1\u9001\u4fe1\u53f7\uff0c\u8bf7\u6c42\u65ad\u5f00\u8fde\u63a5\uff0c\u8868\u793aB\u6ca1\u6709\u6570\u636e\u8981\u53d1\u9001\u4e86\uff1aB\u2014\u2014>A\uff1b A\u5411B\u53d1\u9001\u786e\u8ba4\u4fe1\u53f7\uff0c\u540c\u610f\u65ad\u5f00\uff1aA\u2014\u2014>B\u3002 B\u6536\u5230\u786e\u8ba4\u4fe1\u53f7\uff0c\u65ad\u5f00\u8fde\u63a5\uff0c\u800cA\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u6ca1\u6536\u5230B\u7684\u4fe1\u53f7\uff0c\u8868\u660eB\u5df2\u7ecf\u65ad\u5f00\u4e86\uff0c\u4e8e\u662fA\u4e5f\u65ad\u5f00\u4e86\u8fde\u63a5\u3002\u81f3\u6b64\uff0c\u5b8c\u6210\u6325\u624b\u8fc7\u7a0b\u3002 \u53ef\u80fd\u6709\u6367\u6cb9\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e482\u30013\u6b21\u6325\u624b\u4e0d\u80fd\u5408\u5728\u4e00\u6b21\u6325\u624b\u4e2d\uff1f\u90a3\u662f\u56e0\u4e3a\u6b64\u65f6A\u867d\u7136\u4e0d\u518d\u53d1\u9001\u6570\u636e\u4e86\uff0c\u4f46\u662f\u8fd8\u53ef\u4ee5\u63a5\u6536\u6570\u636e\uff0cB\u53ef\u80fd\u8fd8\u6709\u6570\u636e\u8981\u53d1\u9001\u7ed9A\uff0c\u6240\u4ee5\u4e24\u6b21\u6325\u624b\u4e0d\u80fd\u5408\u5e76\u4e3a\u4e00\u6b21\u3002 \u6325\u624b\u6b21\u6570\u6bd4\u63e1\u624b\u591a\u4e00\u6b21\uff0c\u662f\u56e0\u4e3a\u63e1\u624b\u8fc7\u7a0b\uff0c\u901a\u4fe1\u53ea\u9700\u8981\u5904\u7406\u8fde\u63a5\u3002\u800c\u6325\u624b\u8fc7\u7a0b\uff0c\u901a\u4fe1\u9700\u8981\u5904\u7406\u6570\u636e+\u8fde\u63a5\u3002 TCP\u5728\u771f\u6b63\u7684\u8bfb\u5199\u64cd\u4f5c\u4e4b\u524d\uff0cserver\u4e0eclient\u4e4b\u95f4\u5fc5\u987b\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c \u5f53\u8bfb\u5199\u64cd\u4f5c\u5b8c\u6210\u540e\uff0c\u53cc\u65b9\u4e0d\u518d\u9700\u8981\u8fd9\u4e2a\u8fde\u63a5\u65f6\u5b83\u4eec\u53ef\u4ee5\u91ca\u653e\u8fd9\u4e2a\u8fde\u63a5\uff0c \u8fde\u63a5\u7684\u5efa\u7acb\u901a\u8fc7\u4e09\u6b21\u63e1\u624b\uff0c\u91ca\u653e\u5219\u9700\u8981\u56db\u6b21\u6325\u624b\uff0c \u6240\u4ee5\u8bf4\u6bcf\u4e2a\u8fde\u63a5\u7684\u5efa\u7acb\u90fd\u662f\u9700\u8981\u8d44\u6e90\u6d88\u8017\u548c\u65f6\u95f4\u6d88\u8017\u7684\u3002 TCP\u901a\u4fe1\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u5982\u4e0b\u56fe: \u00b6 1. TCP\u77ed\u8fde\u63a5 \u00b6 \u6a21\u62df\u4e00\u79cdTCP\u77ed\u8fde\u63a5\u7684\u60c5\u51b5: client \u5411 server \u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42 server \u63a5\u5230\u8bf7\u6c42\uff0c\u53cc\u65b9\u5efa\u7acb\u8fde\u63a5 client \u5411 server \u53d1\u9001\u6d88\u606f server \u56de\u5e94 client \u4e00\u6b21\u8bfb\u5199\u5b8c\u6210\uff0c\u6b64\u65f6\u53cc\u65b9\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u4ee5\u53d1\u8d77 close \u64cd\u4f5c \u5728\u6b65\u9aa45\u4e2d\uff0c\u4e00\u822c\u90fd\u662f client \u5148\u53d1\u8d77 close \u64cd\u4f5c\u3002\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u6709\u7279\u6b8a\u7684\u60c5\u51b5\u3002 \u4ece\u4e0a\u9762\u7684\u63cf\u8ff0\u770b\uff0c\u77ed\u8fde\u63a5\u4e00\u822c\u53ea\u4f1a\u5728 client/server \u95f4\u4f20\u9012\u4e00\u6b21\u8bfb\u5199\u64cd\u4f5c\uff01 2. TCP\u957f\u8fde\u63a5 \u00b6 \u518d\u6a21\u62df\u4e00\u79cd\u957f\u8fde\u63a5\u7684\u60c5\u51b5: client \u5411 server \u53d1\u8d77\u8fde\u63a5 server \u63a5\u5230\u8bf7\u6c42\uff0c\u53cc\u65b9\u5efa\u7acb\u8fde\u63a5 client \u5411 server \u53d1\u9001\u6d88\u606f server \u56de\u5e94 client \u4e00\u6b21\u8bfb\u5199\u5b8c\u6210\uff0c\u8fde\u63a5\u4e0d\u5173\u95ed \u540e\u7eed\u8bfb\u5199\u64cd\u4f5c... \u957f\u65f6\u95f4\u64cd\u4f5c\u4e4b\u540eclient\u53d1\u8d77\u5173\u95ed\u8bf7\u6c42 3. TCP\u957f/\u77ed\u8fde\u63a5\u64cd\u4f5c\u8fc7\u7a0b \u00b6 3.1 \u77ed\u8fde\u63a5\u7684\u64cd\u4f5c\u6b65\u9aa4\u662f\uff1a \u00b6 \u5efa\u7acb\u8fde\u63a5\u2014\u2014\u6570\u636e\u4f20\u8f93\u2014\u2014\u5173\u95ed\u8fde\u63a5...\u5efa\u7acb\u8fde\u63a5\u2014\u2014\u6570\u636e\u4f20\u8f93\u2014\u2014\u5173\u95ed\u8fde\u63a5 3.2 \u957f\u8fde\u63a5\u7684\u64cd\u4f5c\u6b65\u9aa4\u662f\uff1a \u00b6 \u5efa\u7acb\u8fde\u63a5\u2014\u2014\u6570\u636e\u4f20\u8f93...\uff08\u4fdd\u6301\u8fde\u63a5\uff09...\u6570\u636e\u4f20\u8f93\u2014\u2014\u5173\u95ed\u8fde\u63a5 4. TCP\u957f/\u77ed\u8fde\u63a5\u7684\u4f18\u70b9\u548c\u7f3a\u70b9 \u00b6 \u957f\u8fde\u63a5\u53ef\u4ee5\u7701\u53bb\u8f83\u591a\u7684TCP\u5efa\u7acb\u548c\u5173\u95ed\u7684\u64cd\u4f5c\uff0c\u51cf\u5c11\u6d6a\u8d39\uff0c\u8282\u7ea6\u65f6\u95f4\u3002 \u5bf9\u4e8e\u9891\u7e41\u8bf7\u6c42\u8d44\u6e90\u7684\u5ba2\u6237\u6765\u8bf4\uff0c\u8f83\u9002\u7528\u957f\u8fde\u63a5\u3002 client\u4e0eserver\u4e4b\u95f4\u7684\u8fde\u63a5\u5982\u679c\u4e00\u76f4\u4e0d\u5173\u95ed\u7684\u8bdd\uff0c\u4f1a\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c \u968f\u7740\u5ba2\u6237\u7aef\u8fde\u63a5\u8d8a\u6765\u8d8a\u591a\uff0cserver\u65e9\u665a\u6709\u625b\u4e0d\u4f4f\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u5019server\u7aef\u9700\u8981\u91c7\u53d6\u4e00\u4e9b\u7b56\u7565\uff0c \u5982\u5173\u95ed\u4e00\u4e9b\u957f\u65f6\u95f4\u6ca1\u6709\u8bfb\u5199\u4e8b\u4ef6\u53d1\u751f\u7684\u8fde\u63a5\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u6076\u610f\u8fde\u63a5\u5bfc\u81f4server\u7aef\u670d\u52a1\u53d7\u635f\uff1b \u5982\u679c\u6761\u4ef6\u518d\u5141\u8bb8\u5c31\u53ef\u4ee5\u4ee5\u5ba2\u6237\u7aef\u673a\u5668\u4e3a\u9897\u7c92\u5ea6\uff0c\u9650\u5236\u6bcf\u4e2a\u5ba2\u6237\u7aef\u7684\u6700\u5927\u957f\u8fde\u63a5\u6570\uff0c \u8fd9\u6837\u53ef\u4ee5\u5b8c\u5168\u907f\u514d\u67d0\u4e2a\u86cb\u75bc\u7684\u5ba2\u6237\u7aef\u8fde\u7d2f\u540e\u7aef\u670d\u52a1\u3002 \u77ed\u8fde\u63a5\u5bf9\u4e8e\u670d\u52a1\u5668\u6765\u8bf4\u7ba1\u7406\u8f83\u4e3a\u7b80\u5355\uff0c\u5b58\u5728\u7684\u8fde\u63a5\u90fd\u662f\u6709\u7528\u7684\u8fde\u63a5\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u63a7\u5236\u624b\u6bb5\u3002 \u4f46\u5982\u679c\u5ba2\u6237\u8bf7\u6c42\u9891\u7e41\uff0c\u5c06\u5728TCP\u7684\u5efa\u7acb\u548c\u5173\u95ed\u64cd\u4f5c\u4e0a\u6d6a\u8d39\u65f6\u95f4\u548c\u5e26\u5bbd\u3002 5. TCP\u957f/\u77ed\u8fde\u63a5\u7684\u5e94\u7528\u573a\u666f \u00b6 \u957f\u8fde\u63a5\u591a\u7528\u4e8e\u64cd\u4f5c\u9891\u7e41\uff0c\u70b9\u5bf9\u70b9\u7684\u901a\u8baf\uff0c\u800c\u4e14\u8fde\u63a5\u6570\u4e0d\u80fd\u592a\u591a\u60c5\u51b5\u3002 \u6bcf\u4e2aTCP\u8fde\u63a5\u90fd\u9700\u8981\u4e09\u6b21\u63e1\u624b\uff0c\u8fd9\u9700\u8981\u65f6\u95f4\uff0c\u5982\u679c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u662f\u5148\u8fde\u63a5\uff0c \u518d\u64cd\u4f5c\u7684\u8bdd\u90a3\u4e48\u5904\u7406\u901f\u5ea6\u4f1a\u964d\u4f4e\u5f88\u591a\uff0c\u6240\u4ee5\u6bcf\u4e2a\u64cd\u4f5c\u5b8c\u540e\u90fd\u4e0d\u65ad\u5f00\uff0c \u518d\u6b21\u5904\u7406\u65f6\u76f4\u63a5\u53d1\u9001\u6570\u636e\u5305\u5c31OK\u4e86\uff0c\u4e0d\u7528\u5efa\u7acbTCP\u8fde\u63a5\u3002 \u4f8b\u5982\uff1a\u6570\u636e\u5e93\u7684\u8fde\u63a5\u7528\u957f\u8fde\u63a5\uff0c\u5982\u679c\u7528\u77ed\u8fde\u63a5\u9891\u7e41\u7684\u901a\u4fe1\u4f1a\u9020\u6210socket\u9519\u8bef\uff0c \u800c\u4e14\u9891\u7e41\u7684socket \u521b\u5efa\u4e5f\u662f\u5bf9\u8d44\u6e90\u7684\u6d6a\u8d39\u3002 \u800c\u50cfWEB\u7f51\u7ad9\u7684http\u670d\u52a1\u4e00\u822c\u90fd\u7528\u77ed\u94fe\u63a5\uff0c\u56e0\u4e3a\u957f\u8fde\u63a5\u5bf9\u4e8e\u670d\u52a1\u7aef\u6765\u8bf4\u4f1a\u8017\u8d39\u4e00\u5b9a\u7684\u8d44\u6e90\uff0c \u800c\u50cfWEB\u7f51\u7ad9\u8fd9\u4e48\u9891\u7e41\u7684\u6210\u5343\u4e0a\u4e07\u751a\u81f3\u4e0a\u4ebf\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u7528\u77ed\u8fde\u63a5\u4f1a\u66f4\u7701\u4e00\u4e9b\u8d44\u6e90\uff0c \u5982\u679c\u7528\u957f\u8fde\u63a5\uff0c\u800c\u4e14\u540c\u65f6\u6709\u6210\u5343\u4e0a\u4e07\u7684\u7528\u6237\uff0c\u5982\u679c\u6bcf\u4e2a\u7528\u6237\u90fd\u5360\u7528\u4e00\u4e2a\u8fde\u63a5\u7684\u8bdd\uff0c \u90a3\u53ef\u60f3\u800c\u77e5\u5427\u3002\u6240\u4ee5\u5e76\u53d1\u91cf\u5927\uff0c\u4f46\u6bcf\u4e2a\u7528\u6237\u65e0\u9700\u9891\u7e41\u64cd\u4f5c\u60c5\u51b5\u4e0b\u9700\u7528\u77ed\u8fde\u597d\u3002 wireshark\u6293\u5305\u5de5\u5177\u4f7f\u7528 \u00b6 1. \u5b89\u88c5wireshark \u00b6 2. wireshark\u7684\u4f7f\u7528 \u00b6 4.10tcp-ip\u7b80\u4ecb \u00b6 \u4f5c\u4e3a\u65b0\u65f6\u4ee3\u6807\u6746\u7684\u6211\u4eec\uff0c\u5df2\u7ecf\u79bb\u4e0d\u5f00\u624b\u673a\u3001\u79bb\u4e0d\u5f00\u7f51\u7edc\uff0c\u5bf9\u4e8e\u4e92\u8054\u7f51\u5927\u5bb6\u53ef\u80fd\u8033\u719f\u80fd\u8be6\uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u51fa\u73b0\u6bd4\u4e92\u8054\u7f51\u8981\u65e9\u5f88\u591a 1. \u4ec0\u4e48\u662f\u534f\u8bae \u00b6 \u6709\u7684\u8bf4\u82f1\u8bed\uff0c\u6709\u7684\u8bf4\u4e2d\u6587\uff0c\u6709\u7684\u8bf4\u5fb7\u8bed\uff0c\u8bf4\u540c\u4e00\u79cd\u8bed\u8a00\u7684\u4eba\u53ef\u4ee5\u4ea4\u6d41\uff0c\u4e0d\u540c\u7684\u8bed\u8a00\u4e4b\u95f4\u5c31\u4e0d\u884c\u4e86 \u4e3a\u4e86\u89e3\u51b3\u4e0d\u540c\u79cd\u65cf\u4eba\u4e4b\u95f4\u7684\u8bed\u8a00\u6c9f\u901a\u969c\u788d\uff0c\u73b0\u89c4\u5b9a\u56fd\u9645\u901a\u7528\u8bed\u8a00\u662f\u82f1\u8bed\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u89c4\u5b9a\uff0c\u8fd9\u5c31\u662f\u534f\u8bae 2. \u8ba1\u7b97\u673a\u7f51\u7edc\u6c9f\u901a\u7528\u4ec0\u4e48 \u00b6 \u73b0\u5728\u7684\u751f\u6d3b\u4e2d\uff0c\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u53ea\u9700\u8981\u80fd\u591f\u8054\u7f51\uff08\u6709\u7ebf\u65e0\u7ebf\u90fd\u53ef\u4ee5\uff09\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f8\u4e92\u8fdb\u884c\u4f20\u9012\u6570\u636e \u90a3\u4e48\u4e0d\u540c\u79cd\u7c7b\u4e4b\u95f4\u7684\u8ba1\u7b97\u673a\u5230\u5e95\u662f\u600e\u4e48\u8fdb\u884c\u6570\u636e\u4f20\u9012\u7684\u5462\uff1f \u5c31\u50cf\u8bf4\u4e0d\u540c\u8bed\u8a00\u7684\u4eba\u6c9f\u901a\u4e00\u6837\uff0c\u53ea\u8981\u6709\u4e00\u79cd\u5927\u5bb6\u90fd\u8ba4\u53ef\u90fd\u9075\u5b88\u7684\u534f\u8bae\u5373\u53ef\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8ba1\u7b97\u673a\u90fd\u9075\u5b88\u7684\u7f51\u7edc\u901a\u4fe1\u534f\u8bae\u53eb\u505a TCP/IP\u534f\u8bae 3. TCP/IP\u534f\u8bae(\u65cf) \u00b6 \u65e9\u671f\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\uff0c\u90fd\u662f\u7531\u5404\u5382\u5546\u81ea\u5df1\u89c4\u5b9a\u4e00\u5957\u534f\u8bae\uff0cIBM\u3001Apple\u548cMicrosoft\u90fd\u6709\u5404\u81ea\u7684\u7f51\u7edc\u534f\u8bae\uff0c\u4e92\u4e0d\u517c\u5bb9 \u4e3a\u4e86\u628a\u5168\u4e16\u754c\u7684\u6240\u6709\u4e0d\u540c\u7c7b\u578b\u7684\u8ba1\u7b97\u673a\u90fd\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u5fc5\u987b\u89c4\u5b9a\u4e00\u5957\u5168\u7403\u901a\u7528\u7684\u534f\u8bae\uff0c\u4e3a\u4e86\u5b9e\u73b0\u4e92\u8054\u7f51\u8fd9\u4e2a\u76ee\u6807\uff0c\u4e92\u8054\u7f51\u534f\u8bae\u65cf\uff08Internet Protocol Suite\uff09\u5c31\u662f\u901a\u7528\u534f\u8bae\u6807\u51c6\u3002 \u56e0\u4e3a\u4e92\u8054\u7f51\u534f\u8bae\u5305\u542b\u4e86\u4e0a\u767e\u79cd\u534f\u8bae\u6807\u51c6\uff0c\u4f46\u662f\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u534f\u8bae\u662fTCP\u548cIP\u534f\u8bae\uff0c\u6240\u4ee5\uff0c\u5927\u5bb6\u628a\u4e92\u8054\u7f51\u7684\u534f\u8bae\u7b80\u79f0TCP/IP\u534f\u8bae(\u65cf) \u5e38\u7528\u7684\u7f51\u7edc\u534f\u8bae\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8bf4\u660e\uff1a \u7f51\u9645\u5c42\u4e5f\u79f0\u4e3a\uff1a\u7f51\u7edc\u5c42 \u7f51\u7edc\u63a5\u53e3\u5c42\u4e5f\u79f0\u4e3a\uff1a\u94fe\u8def\u5c42 \u53e6\u5916\u4e00\u5957\u6807\u51c6 \u00b6","title":"002 \u7f51\u7edctcp"},{"location":"002-\u7f51\u7edctcp/#41tcp","text":"","title":"4.1TCP\u7b80\u4ecb"},{"location":"002-\u7f51\u7edctcp/#tcp","text":"**TCP\u534f\u8bae\uff0c\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff08\u82f1\u8bed\uff1aTransmission Control Protocol\uff0c\u7f29\u5199\u4e3a TCP\uff09**\u662f\u4e00\u79cd\u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u7684\u3001\u57fa\u4e8e\u5b57\u8282\u6d41\u7684\u4f20\u8f93\u5c42\u901a\u4fe1\u534f\u8bae\uff0c\u7531IETF\u7684RFC 793\u5b9a\u4e49\u3002 TCP\u901a\u4fe1\u9700\u8981\u7ecf\u8fc7**\u521b\u5efa\u8fde\u63a5\u3001\u6570\u636e\u4f20\u9001\u3001\u7ec8\u6b62\u8fde\u63a5**\u4e09\u4e2a\u6b65\u9aa4\u3002 TCP\u901a\u4fe1\u6a21\u578b\u4e2d\uff0c\u5728\u901a\u4fe1\u5f00\u59cb\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u5148\u5efa\u7acb\u76f8\u5173\u7684\u94fe\u63a5\uff0c\u624d\u80fd\u53d1\u9001\u6570\u636e\uff0c\u7c7b\u4f3c\u4e8e\u751f\u6d3b\u4e2d\uff0c\"\u6253\u7535\u8bdd\"\"","title":"TCP\u4ecb\u7ecd"},{"location":"002-\u7f51\u7edctcp/#tcp_1","text":"","title":"TCP\u7279\u70b9"},{"location":"002-\u7f51\u7edctcp/#146","text":"\u901a\u4fe1\u53cc\u65b9\u5fc5\u987b\u5148\u5efa\u7acb\u8fde\u63a5\u624d\u80fd\u8fdb\u884c\u6570\u636e\u7684\u4f20\u8f93\uff0c\u53cc\u65b9\u90fd\u5fc5\u987b\u4e3a\u8be5\u8fde\u63a5\u5206\u914d\u5fc5\u8981\u7684\u7cfb\u7edf\u5185\u6838\u8d44\u6e90\uff0c\u4ee5\u7ba1\u7406\u8fde\u63a5\u7684\u72b6\u6001\u548c\u8fde\u63a5\u4e0a\u7684\u4f20\u8f93\u3002 \u53cc\u65b9\u95f4\u7684\u6570\u636e\u4f20\u8f93\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u4e2a\u8fde\u63a5\u8fdb\u884c\u3002 \u5b8c\u6210\u6570\u636e\u4ea4\u6362\u540e\uff0c\u53cc\u65b9\u5fc5\u987b\u65ad\u5f00\u6b64\u8fde\u63a5\uff0c\u4ee5\u91ca\u653e\u7cfb\u7edf\u8d44\u6e90\u3002 \u8fd9\u79cd\u8fde\u63a5\u662f\u4e00\u5bf9\u4e00\u7684\uff0c\u56e0\u6b64TCP\u4e0d\u9002\u7528\u4e8e\u5e7f\u64ad\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u57fa\u4e8e\u5e7f\u64ad\u7684\u5e94\u7528\u7a0b\u5e8f\u8bf7\u4f7f\u7528UDP\u534f\u8bae\u3002","title":"1. \u9762\u5411\u8fde\u63a5"},{"location":"002-\u7f51\u7edctcp/#246","text":"1\uff09 TCP\u91c7\u7528\u53d1\u9001\u5e94\u7b54\u673a\u5236 TCP\u53d1\u9001\u7684\u6bcf\u4e2a\u62a5\u6587\u6bb5\u90fd\u5fc5\u987b\u5f97\u5230\u63a5\u6536\u65b9\u7684\u5e94\u7b54\u624d\u8ba4\u4e3a\u8fd9\u4e2aTCP\u62a5\u6587\u6bb5\u4f20\u8f93\u6210\u529f 2\uff09 \u8d85\u65f6\u91cd\u4f20 \u53d1\u9001\u7aef\u53d1\u51fa\u4e00\u4e2a\u62a5\u6587\u6bb5\u4e4b\u540e\u5c31\u542f\u52a8\u5b9a\u65f6\u5668\uff0c\u5982\u679c\u5728\u5b9a\u65f6\u65f6\u95f4\u5185\u6ca1\u6709\u6536\u5230\u5e94\u7b54\u5c31\u91cd\u65b0\u53d1\u9001\u8fd9\u4e2a\u62a5\u6587\u6bb5\u3002 TCP\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u53d1\u751f\u4e22\u5305\uff0c\u5c31\u7ed9\u6bcf\u4e2a\u5305\u4e00\u4e2a\u5e8f\u53f7\uff0c\u540c\u65f6\u5e8f\u53f7\u4e5f\u4fdd\u8bc1\u4e86\u4f20\u9001\u5230\u63a5\u6536\u7aef\u5b9e\u4f53\u7684\u5305\u7684\u6309\u5e8f\u63a5\u6536\u3002\u7136\u540e\u63a5\u6536\u7aef\u5b9e\u4f53\u5bf9\u5df2\u6210\u529f\u6536\u5230\u7684\u5305\u53d1\u56de\u4e00\u4e2a\u76f8\u5e94\u7684\u786e\u8ba4\uff08ACK\uff09\uff1b\u5982\u679c\u53d1\u9001\u7aef\u5b9e\u4f53\u5728\u5408\u7406\u7684\u5f80\u8fd4\u65f6\u5ef6\uff08RTT\uff09\u5185\u672a\u6536\u5230\u786e\u8ba4\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u6570\u636e\u5305\u5c31\u88ab\u5047\u8bbe\u4e3a\u5df2\u4e22\u5931\u5c06\u4f1a\u88ab\u8fdb\u884c\u91cd\u4f20\u3002 3\uff09 \u9519\u8bef\u6821\u9a8c TCP\u7528\u4e00\u4e2a\u6821\u9a8c\u548c\u51fd\u6570\u6765\u68c0\u9a8c\u6570\u636e\u662f\u5426\u6709\u9519\u8bef\uff1b\u5728\u53d1\u9001\u548c\u63a5\u6536\u65f6\u90fd\u8981\u8ba1\u7b97\u6821\u9a8c\u548c\u3002 4) \u6d41\u91cf\u63a7\u5236\u548c\u963b\u585e\u7ba1\u7406 \u6d41\u91cf\u63a7\u5236\u7528\u6765\u907f\u514d\u4e3b\u673a\u53d1\u9001\u5f97\u8fc7\u5feb\u800c\u4f7f\u63a5\u6536\u65b9\u6765\u4e0d\u53ca\u5b8c\u5168\u6536\u4e0b\u3002","title":"2. \u53ef\u9760\u4f20\u8f93"},{"location":"002-\u7f51\u7edctcp/#tcpudp","text":"\u9762\u5411\u8fde\u63a5\uff08\u786e\u8ba4\u6709\u521b\u5efa\u4e09\u65b9\u4ea4\u63e1\uff0c\u8fde\u63a5\u5df2\u521b\u5efa\u624d\u4f5c\u4f20\u8f93\u3002\uff09 \u6709\u5e8f\u6570\u636e\u4f20\u8f93 \u91cd\u53d1\u4e22\u5931\u7684\u6570\u636e\u5305 \u820d\u5f03\u91cd\u590d\u7684\u6570\u636e\u5305 \u65e0\u5dee\u9519\u7684\u6570\u636e\u4f20\u8f93 \u963b\u585e/\u6d41\u91cf\u63a7\u5236","title":"TCP\u4e0eUDP\u7684\u4e0d\u540c\u70b9"},{"location":"002-\u7f51\u7edctcp/#udp","text":"udp\u901a\u4fe1\u6a21\u578b\u4e2d\uff0c\u5728\u901a\u4fe1\u5f00\u59cb\u4e4b\u524d\uff0c\u4e0d\u9700\u8981\u5efa\u7acb\u76f8\u5173\u7684\u94fe\u63a5\uff0c\u53ea\u9700\u8981\u53d1\u9001\u6570\u636e\u5373\u53ef\uff0c\u7c7b\u4f3c\u4e8e\u751f\u6d3b\u4e2d\uff0c\"\u5199\u4fe1\"\"","title":"udp\u901a\u4fe1\u6a21\u578b"},{"location":"002-\u7f51\u7edctcp/#tcp_2","text":"udp\u901a\u4fe1\u6a21\u578b\u4e2d\uff0c\u5728\u901a\u4fe1\u5f00\u59cb\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u5148\u5efa\u7acb\u76f8\u5173\u7684\u94fe\u63a5\uff0c\u624d\u80fd\u53d1\u9001\u6570\u636e\uff0c\u7c7b\u4f3c\u4e8e\u751f\u6d3b\u4e2d\uff0c\"\u6253\u7535\u8bdd\"\"","title":"TCP\u901a\u4fe1\u6a21\u578b"},{"location":"002-\u7f51\u7edctcp/#42tcp","text":"tcp\u5ba2\u6237\u7aef\uff0c\u5e76\u4e0d\u662f\u50cf\u4e4b\u524d\u4e00\u4e2a\u6bb5\u5b50\uff1a\u4e00\u4e2a\u987e\u5ba2\u53bb\u996d\u9986\u5403\u996d\uff0c\u8fd9\u4e2a\u987e\u5ba2\u8981\u70b9\u83dc\uff0c\u5c31\u95ee\u670d\u52a1\u5458\u54b1\u4eec\u996d\u5e97\u6709\u5ba2\u6237\u7aef\u4e48\uff0c\u7136\u540e\u8fd9\u4e2a\u670d\u52a1\u5458\u975e\u5e38\u5ba2\u6c14\u7684\u8bf4\u9053\uff1a\u5148\u751f \u6211\u4eec\u996d\u5e97\u4e0d\u7528\u5ba2\u6237\u7aef\uff0c\u6211\u4eec\u76f4\u63a5\u9001\u5230\u60a8\u7684\u9910\u684c\u4e0a \u5982\u679c\uff0c\u4e0d\u5b66\u4e60\u7f51\u7edc\u7684\u77e5\u8bc6\u662f\u4e0d\u662f \u8bf4\u4e0d\u5b9a\u4e5f\u4f1a\u53d1\u751f\u90a3\u6837\u7684\u7b11\u8bdd \uff0c\u54c8\u54c8 \u6240\u8c13\u7684\u670d\u52a1\u5668\u7aef\uff1a\u5c31\u662f\u63d0\u4f9b\u670d\u52a1\u7684\u4e00\u65b9\uff0c\u800c\u5ba2\u6237\u7aef\uff0c\u5c31\u662f\u9700\u8981\u88ab\u670d\u52a1\u7684\u4e00\u65b9","title":"4.2tcp\u5ba2\u6237\u7aef"},{"location":"002-\u7f51\u7edctcp/#tcp_3","text":"tcp\u7684\u5ba2\u6237\u7aef\u8981\u6bd4\u670d\u52a1\u5668\u7aef\u7b80\u5355\u5f88\u591a\uff0c\u5982\u679c\u8bf4\u670d\u52a1\u5668\u7aef\u662f\u9700\u8981\u81ea\u5df1\u4e70\u624b\u673a\u3001\u67e5\u624b\u673a\u5361\u3001\u8bbe\u7f6e\u94c3\u58f0\u3001\u7b49\u5f85\u522b\u4eba\u6253\u7535\u8bdd\u6d41\u7a0b\u7684\u8bdd\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5c31\u53ea\u9700\u8981\u627e\u4e00\u4e2a\u7535\u8bdd\u4ead\uff0c\u62ff\u8d77\u7535\u8bdd\u62e8\u6253\u5373\u53ef\uff0c\u6d41\u7a0b\u8981\u5c11\u5f88\u591a \u793a\u4f8b\u4ee3\u7801\uff1a from socket import * # \u521b\u5efasocket tcp_client_socket = socket ( AF_INET , SOCK_STREAM ) # \u76ee\u7684\u4fe1\u606f server_ip = input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668ip:\" ) server_port = int ( input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668port:\" )) # \u94fe\u63a5\u670d\u52a1\u5668 tcp_client_socket . connect (( server_ip , server_port )) # \u63d0\u793a\u7528\u6237\u8f93\u5165\u6570\u636e send_data = input ( \"\u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e\uff1a\" ) tcp_client_socket . send ( send_data . encode ( \"gbk\" )) # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\uff0c\u6700\u5927\u63a5\u65361024\u4e2a\u5b57\u8282 recvData = tcp_client_socket . recv ( 1024 ) print ( '\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:' , recvData . decode ( 'gbk' )) # \u5173\u95ed\u5957\u63a5\u5b57 tcp_client_socket . close ()","title":"tcp\u5ba2\u6237\u7aef\u6784\u5efa\u6d41\u7a0b"},{"location":"002-\u7f51\u7edctcp/#_1","text":"","title":"\u8fd0\u884c\u6d41\u7a0b\uff1a"},{"location":"002-\u7f51\u7edctcp/#1tcp","text":"\u8bf7\u8f93\u5165\u670d\u52a1\u5668ip:10.10.0.47 \u8bf7\u8f93\u5165\u670d\u52a1\u5668port:8080 \u8bf7\u8f93\u5165\u8981\u53d1\u9001\u7684\u6570\u636e\uff1a\u4f60\u597d\u554a \u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a: \u6211\u5f88\u597d\uff0c\u4f60\u5462","title":"&lt;1&gt;tcp\u5ba2\u6237\u7aef"},{"location":"002-\u7f51\u7edctcp/#2","text":"","title":"&lt;2&gt;\u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\uff1a"},{"location":"002-\u7f51\u7edctcp/#43tcp","text":"","title":"4.3tcp\u670d\u52a1\u5668"},{"location":"002-\u7f51\u7edctcp/#_2","text":"\u5982\u679c\u60f3\u8ba9\u522b\u4eba\u80fd\u66f4\u591f\u6253\u901a\u54b1\u4eec\u7684\u7535\u8bdd\u83b7\u53d6\u76f8\u5e94\u670d\u52a1\u7684\u8bdd\uff0c\u9700\u8981\u505a\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\u60c5\uff1a \u4e70\u4e2a\u624b\u673a \u63d2\u4e0a\u624b\u673a\u5361 \u8bbe\u8ba1\u624b\u673a\u4e3a\u6b63\u5e38\u63a5\u542c\u72b6\u6001\uff08\u5373\u80fd\u591f\u54cd\u94c3\uff09 \u9759\u9759\u7684\u7b49\u7740\u522b\u4eba\u62e8\u6253","title":"\u751f\u6d3b\u4e2d\u7684\u7535\u8bdd\u673a"},{"location":"002-\u7f51\u7edctcp/#tcp_4","text":"\u5982\u540c\u4e0a\u9762\u7684\u7535\u8bdd\u673a\u8fc7\u7a0b\u4e00\u6837\uff0c\u5728\u7a0b\u5e8f\u4e2d\uff0c\u5982\u679c\u60f3\u8981\u5b8c\u6210\u4e00\u4e2atcp\u670d\u52a1\u5668\u7684\u529f\u80fd\uff0c\u9700\u8981\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a socket\u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57 bind\u7ed1\u5b9aip\u548cport listen\u4f7f\u5957\u63a5\u5b57\u53d8\u4e3a\u53ef\u4ee5\u88ab\u52a8\u94fe\u63a5 accept\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 recv/send\u63a5\u6536\u53d1\u9001\u6570\u636e \u4e00\u4e2a\u5f88\u7b80\u5355\u7684tcp\u670d\u52a1\u5668\u5982\u4e0b\uff1a # -*- coding: utf-8 -*- \"\"\" Created on Sun Jun 9 11:38:45 2019 @author: zangz \"\"\" from socket import * # \u521b\u5efasocket tcp_server_socket = socket ( AF_INET , SOCK_STREAM ) # \u672c\u5730\u4fe1\u606f address = ( '192.168.124.42' , 7788 ) # \u7ed1\u5b9a tcp_server_socket . bind ( address ) # \u4f7f\u7528socket\u521b\u5efa\u7684\u5957\u63a5\u5b57\u9ed8\u8ba4\u7684\u5c5e\u6027\u662f\u4e3b\u52a8\u7684\uff0c\u4f7f\u7528listen\u5c06\u5176\u53d8\u4e3a\u88ab\u52a8\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a5\u6536\u522b\u4eba\u7684\u94fe\u63a5\u4e86 tcp_server_socket . listen ( 128 ) # \u5982\u679c\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u6765\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u5c31\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u4e13\u95e8\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # client_socket\u7528\u6765\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # tcp_server_socket\u5c31\u53ef\u4ee5\u7701\u4e0b\u6765\u4e13\u95e8\u7b49\u5f85\u5176\u4ed6\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 client_socket , clientAddr = tcp_server_socket . accept () # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e recv_data = client_socket . recv ( 1024 ) # \u63a5\u65361024\u4e2a\u5b57\u8282 print ( '\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:' , recv_data . decode ( 'utf-8' )) # \u53d1\u9001\u4e00\u4e9b\u6570\u636e\u5230\u5ba2\u6237\u7aef client_socket . send ( \"thank you !\" . encode ( 'utf-8' )) # \u5173\u95ed\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u7684\u5957\u63a5\u5b57\uff0c\u53ea\u8981\u5173\u95ed\u4e86\uff0c\u5c31\u610f\u5473\u7740\u4e3a\u4e0d\u80fd\u518d\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u4e86\uff0c\u5982\u679c\u8fd8\u9700\u8981\u670d\u52a1\uff0c\u53ea\u80fd\u518d\u6b21\u91cd\u65b0\u8fde\u63a5 client_socket . close () #\u5173\u95ed\u6574\u4e2a\u7684\u670d\u52a1\u7aef tcp_server_socket . close ()","title":"tcp\u670d\u52a1\u5668"},{"location":"002-\u7f51\u7edctcp/#_3","text":"","title":"\u8fd0\u884c\u6d41\u7a0b\uff1a"},{"location":"002-\u7f51\u7edctcp/#1tcp_1","text":"\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a: \u4f60\u5728\u4e48\uff1f","title":"&lt;1&gt;tcp\u670d\u52a1\u5668"},{"location":"002-\u7f51\u7edctcp/#2_1","text":"\u5b9e\u4f8b:while\u5faa\u73af\u5b9e\u73b0\u4e00\u76f4\u63a5\u6536: # -*- coding: utf-8 -*- \"\"\" Created on Sun Jun 9 11:38:45 2019 @author: zangz \"\"\" from socket import * # \u521b\u5efasocket tcp_server_socket = socket ( AF_INET , SOCK_STREAM ) # \u672c\u5730\u4fe1\u606f address = ( '192.168.124.42' , 7788 ) # \u7ed1\u5b9a tcp_server_socket . bind ( address ) # \u4f7f\u7528socket\u521b\u5efa\u7684\u5957\u63a5\u5b57\u9ed8\u8ba4\u7684\u5c5e\u6027\u662f\u4e3b\u52a8\u7684\uff0c\u4f7f\u7528listen\u5c06\u5176\u53d8\u4e3a\u88ab\u52a8\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a5\u6536\u522b\u4eba\u7684\u94fe\u63a5\u4e86 tcp_server_socket . listen ( 128 ) while True : # \u5982\u679c\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u6765\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u5c31\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u4e13\u95e8\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # client_socket\u7528\u6765\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # tcp_server_socket\u5c31\u53ef\u4ee5\u7701\u4e0b\u6765\u4e13\u95e8\u7b49\u5f85\u5176\u4ed6\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 print ( '\u7b49\u5f85\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u94fe\u63a5' ) client_socket , clientAddr = tcp_server_socket . accept () # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e recv_data = client_socket . recv ( 1024 ) # \u63a5\u65361024\u4e2a\u5b57\u8282 print ( '\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:' , recv_data . decode ( 'utf-8' )) # \u53d1\u9001\u4e00\u4e9b\u6570\u636e\u5230\u5ba2\u6237\u7aef client_socket . send ( \"thank you !\" . encode ( 'utf-8' )) # \u5173\u95ed\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u7684\u5957\u63a5\u5b57\uff0c\u53ea\u8981\u5173\u95ed\u4e86\uff0c\u5c31\u610f\u5473\u7740\u4e3a\u4e0d\u80fd\u518d\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u4e86\uff0c\u5982\u679c\u8fd8\u9700\u8981\u670d\u52a1\uff0c\u53ea\u80fd\u518d\u6b21\u91cd\u65b0\u8fde\u63a5 client_socket . close () #\u5173\u95ed\u6574\u4e2a\u7684\u670d\u52a1\u7aef tcp_server_socket . close ()","title":"&lt;2&gt;\u7f51\u7edc\u8c03\u8bd5\u52a9\u624b\uff1a"},{"location":"002-\u7f51\u7edctcp/#_4","text":"# -*- coding: utf-8 -*- \"\"\" Created on Sun Jun 9 11:38:45 2019 @author: zangz \"\"\" from socket import * # \u521b\u5efasocket tcp_server_socket = socket ( AF_INET , SOCK_STREAM ) # \u672c\u5730\u4fe1\u606f address = ( '192.168.43.72' , 7788 ) # \u7ed1\u5b9a tcp_server_socket . bind ( address ) # \u4f7f\u7528socket\u521b\u5efa\u7684\u5957\u63a5\u5b57\u9ed8\u8ba4\u7684\u5c5e\u6027\u662f\u4e3b\u52a8\u7684\uff0c\u4f7f\u7528listen\u5c06\u5176\u53d8\u4e3a\u88ab\u52a8\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a5\u6536\u522b\u4eba\u7684\u94fe\u63a5\u4e86 tcp_server_socket . listen ( 128 ) while True : # \u5982\u679c\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u6765\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u5c31\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u4e13\u95e8\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # client_socket\u7528\u6765\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 # tcp_server_socket\u5c31\u53ef\u4ee5\u7701\u4e0b\u6765\u4e13\u95e8\u7b49\u5f85\u5176\u4ed6\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 print ( '\u7b49\u5f85\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u94fe\u63a5' ) client_socket , clientAddr = tcp_server_socket . accept () print ( '\u4e00\u4e2a\u5ba2\u6237\u7aef\u5df2\u7ecf\u5230\u6765' ) while True : # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e recv_data = client_socket . recv ( 1024 ) # \u63a5\u65361024\u4e2a\u5b57\u8282 print ( '\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:' , recv_data . decode ( 'utf-8' )) #\u5982\u679crecv\u89e3\u5835\u585e\u90a3\u4e48\u6709\u4e24\u79cd\u65b9\u6cd5 #1: \u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u6570\u636e #2: \u5ba2\u6237\u7aef\u8c03\u7528\u4e86close if recv_data : # \u53d1\u9001\u4e00\u4e9b\u6570\u636e\u5230\u5ba2\u6237\u7aef client_socket . send ( \"thank you !\" . encode ( 'utf-8' )) else : #\u5ba2\u6237\u7aef\u5173\u95ed\u4ee5\u540e,recv_data\u7684\u6570\u636e\u5c31\u662f\u7a7a.\u90a3\u4e48\u5c31\u4f1a\u8df3\u8f6c\u5230else,\u90a3\u4e48\u8df3\u51fa\u8fd9\u4e2a\u5faa\u73af break # \u5173\u95ed\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u7684\u5957\u63a5\u5b57\uff0c\u53ea\u8981\u5173\u95ed\u4e86\uff0c\u5c31\u610f\u5473\u7740\u4e3a\u4e0d\u80fd\u518d\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1\u4e86\uff0c\u5982\u679c\u8fd8\u9700\u8981\u670d\u52a1\uff0c\u53ea\u80fd\u518d\u6b21\u91cd\u65b0\u8fde\u63a5 client_socket . close () #\u5173\u95ed\u6574\u4e2a\u7684\u670d\u52a1\u7aef tcp_server_socket . close ()","title":"\u6848\u4f8b,\u4e3a\u5ba2\u6237\u7aef\u670d\u52a1\u591a\u6b21"},{"location":"002-\u7f51\u7edctcp/#44-tcp","text":"tcp\u670d\u52a1\u5668\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u9700\u8981\u7ed1\u5b9a\uff0c\u5426\u5219\u5ba2\u6237\u7aef\u627e\u4e0d\u5230\u8fd9\u4e2a\u670d\u52a1\u5668 tcp\u5ba2\u6237\u7aef\u4e00\u822c\u4e0d\u7ed1\u5b9a\uff0c\u56e0\u4e3a\u662f\u4e3b\u52a8\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u53ea\u8981\u786e\u5b9a\u597d\u670d\u52a1\u5668\u7684ip\u3001port\u7b49\u4fe1\u606f\u5c31\u597d\uff0c\u672c\u5730\u5ba2\u6237\u7aef\u53ef\u4ee5\u968f\u673a tcp\u670d\u52a1\u5668\u4e2d\u901a\u8fc7listen\u53ef\u4ee5\u5c06socket\u521b\u5efa\u51fa\u6765\u7684\u4e3b\u52a8\u5957\u63a5\u5b57\u53d8\u4e3a\u88ab\u52a8\u7684\uff0c\u8fd9\u662f\u505atcp\u670d\u52a1\u5668\u65f6\u5fc5\u987b\u8981\u505a\u7684 \u5f53\u5ba2\u6237\u7aef\u9700\u8981\u94fe\u63a5\u670d\u52a1\u5668\u65f6\uff0c\u5c31\u9700\u8981\u4f7f\u7528connect\u8fdb\u884c\u94fe\u63a5\uff0cudp\u662f\u4e0d\u9700\u8981\u94fe\u63a5\u7684\u800c\u662f\u76f4\u63a5\u53d1\u9001\uff0c\u4f46\u662ftcp\u5fc5\u987b\u5148\u94fe\u63a5\uff0c\u53ea\u6709\u94fe\u63a5\u6210\u529f\u624d\u80fd\u901a\u4fe1 \u5f53\u4e00\u4e2atcp\u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668\u65f6\uff0c\u670d\u52a1\u5668\u7aef\u4f1a\u67091\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\uff0c\u8fd9\u4e2a\u5957\u63a5\u5b57\u7528\u6765\u6807\u8bb0\u8fd9\u4e2a\u5ba2\u6237\u7aef\uff0c\u5355\u72ec\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 listen\u540e\u7684\u5957\u63a5\u5b57\u662f\u88ab\u52a8\u5957\u63a5\u5b57\uff0c\u7528\u6765\u63a5\u6536\u65b0\u7684\u5ba2\u6237\u7aef\u7684\u94fe\u63a5\u8bf7\u6c42\u7684\uff0c\u800caccept\u8fd4\u56de\u7684\u65b0\u5957\u63a5\u5b57\u662f\u6807\u8bb0\u8fd9\u4e2a\u65b0\u5ba2\u6237\u7aef\u7684 \u5173\u95edlisten\u540e\u7684\u5957\u63a5\u5b57\u610f\u5473\u7740\u88ab\u52a8\u5957\u63a5\u5b57\u5173\u95ed\u4e86\uff0c\u4f1a\u5bfc\u81f4\u65b0\u7684\u5ba2\u6237\u7aef\u4e0d\u80fd\u591f\u94fe\u63a5\u670d\u52a1\u5668\uff0c\u4f46\u662f\u4e4b\u524d\u5df2\u7ecf\u94fe\u63a5\u6210\u529f\u7684\u5ba2\u6237\u7aef\u6b63\u5e38\u901a\u4fe1\u3002 \u5173\u95edaccept\u8fd4\u56de\u7684\u5957\u63a5\u5b57\u610f\u5473\u7740\u8fd9\u4e2a\u5ba2\u6237\u7aef\u5df2\u7ecf\u670d\u52a1\u5b8c\u6bd5 \u5f53\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u8c03\u7528close\u540e\uff0c\u670d\u52a1\u5668\u7aef\u4f1arecv\u89e3\u5835\u585e\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u957f\u5ea6\u4e3a0\uff0c\u56e0\u6b64\u670d\u52a1\u5668\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u6570\u636e\u7684\u957f\u5ea6\u6765\u533a\u522b\u5ba2\u6237\u7aef\u662f\u5426\u5df2\u7ecf\u4e0b\u7ebf","title":"4.4 tcp\u6ce8\u610f\u70b9"},{"location":"002-\u7f51\u7edctcp/#45","text":"\u670d\u52a1\u5668 \u53c2\u8003\u4ee3\u7801\u5982\u4e0b: # -*- coding: utf-8 -*- \"\"\" Created on Sun Jun 9 11:38:45 2019 @author: zangz \"\"\" from socket import * import sys def get_file_content ( file_name ): \"\"\"\u83b7\u53d6\u6587\u4ef6\u7684\u5185\u5bb9\"\"\" try : with open ( file_name , \"rb\" ) as f : content = f . read () return content except : print ( \"\u6ca1\u6709\u4e0b\u8f7d\u7684\u6587\u4ef6: %s \" % file_name ) def main (): if len ( sys . argv ) != 2 : print ( \"\u8bf7\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8fd0\u884c\uff1apython3 xxx.py 7890\" ) return else : # \u8fd0\u884c\u65b9\u5f0f\u4e3apython3 xxx.py 7890 port = int ( sys . argv [ 1 ]) # \u521b\u5efasocket tcp_server_socket = socket ( AF_INET , SOCK_STREAM ) # \u672c\u5730\u4fe1\u606f address = ( '192.168.43.72' , port ) #\u8fd9\u91cc\u7684port\u662f\u8fd0\u884c\u7a0b\u5e8f\u83b7\u5f97\u7684 # \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f tcp_server_socket . bind ( address ) # \u5c06\u4e3b\u52a8\u5957\u63a5\u5b57\u53d8\u4e3a\u88ab\u52a8\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # \u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u94fe\u63a5\uff0c\u5373\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u53d1\u9001\u6587\u4ef6 client_socket , clientAddr = tcp_server_socket . accept () # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e recv_data = client_socket . recv ( 1024 ) # \u63a5\u65361024\u4e2a\u5b57\u8282 file_name = recv_data . decode ( \"utf-8\" ) print ( \"\u5bf9\u65b9\u8bf7\u6c42\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\u4e3a: %s \" % file_name ) file_content = get_file_content ( file_name ) # \u53d1\u9001\u6587\u4ef6\u7684\u6570\u636e\u7ed9\u5ba2\u6237\u7aef # \u56e0\u4e3a\u83b7\u53d6\u6253\u5f00\u6587\u4ef6\u65f6\u662f\u4ee5rb\u65b9\u5f0f\u6253\u5f00\uff0c\u6240\u4ee5file_content\u4e2d\u7684\u6570\u636e\u5df2\u7ecf\u662f\u4e8c\u8fdb\u5236\u7684\u683c\u5f0f\uff0c\u56e0\u6b64\u4e0d\u9700\u8981encode\u7f16\u7801 if file_content : client_socket . send ( file_content ) # \u5173\u95ed\u8fd9\u4e2a\u5957\u63a5\u5b57 client_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u5ba2\u6237\u7aef \u53c2\u8003\u4ee3\u7801\u5982\u4e0b: from socket import * def main (): # \u521b\u5efasocket tcp_client_socket = socket ( AF_INET , SOCK_STREAM ) # \u76ee\u7684\u4fe1\u606f server_ip = input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668ip:\" ) server_port = int ( input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668port:\" )) # \u94fe\u63a5\u670d\u52a1\u5668 tcp_client_socket . connect (( server_ip , server_port )) # \u8f93\u5165\u9700\u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d file_name = input ( \"\u8bf7\u8f93\u5165\u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\uff1a\" ) # \u53d1\u9001\u6587\u4ef6\u4e0b\u8f7d\u8bf7\u6c42 tcp_client_socket . send ( file_name . encode ( \"utf-8\" )) # \u63a5\u6536\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\uff0c\u6700\u5927\u63a5\u65361024\u4e2a\u5b57\u8282\uff081K\uff09 recv_data = tcp_client_socket . recv ( 1024 ) # print('\u63a5\u6536\u5230\u7684\u6570\u636e\u4e3a:', recv_data.decode('utf-8')) # \u5982\u679c\u63a5\u6536\u5230\u6570\u636e\u518d\u521b\u5efa\u6587\u4ef6\uff0c\u5426\u5219\u4e0d\u521b\u5efa if recv_data : with open ( \"[\u63a5\u6536]\" + file_name , \"wb\" ) as f : f . write ( recv_data ) # \u5173\u95ed\u5957\u63a5\u5b57 tcp_client_socket . close () if __name__ == \"__main__\" : main ()","title":"4.5 \u6848\u4f8b:\u6587\u4ef6\u4e0b\u8f7d\u5668"},{"location":"002-\u7f51\u7edctcp/#46-tcp3","text":"","title":"4.6 tcp\u76843\u6b21\u63e1\u624b"},{"location":"002-\u7f51\u7edctcp/#47-tcp4","text":"\u670d\u52a1\u5668\u4e0d\u80fd\u5148\u5173\u95ed,\u518d\u6b21\u542f\u52a8\u5bb9\u6613\u5360\u7528\u8fd9\u4e2a\u7aef\u53e3,\u4e0d\u80fd\u7ee7\u7eed\u4f7f\u7528 \u7b2c\u4e00\u6b21\u6325\u624b\uff1a Client \uff08\u53ef\u4ee5\u4f7f\u5ba2\u6237\u7aef\uff0c\u4e5f\u53ef\u4ee5\u662f\u670d\u52a1\u5668\u7aef\uff09\uff0c\u8bbe\u7f6eSequence Number\u548cAcknowledgment Number\uff0c\u5411 Server\u53d1\u9001\u4e00\u4e2aFIN\u62a5\u6587\u6bb5\uff1b\u6b64\u65f6\uff0cClient \u8fdb\u5165FIN_WAIT_1\u72b6\u6001\uff1b\u8fd9\u8868\u793a Client \u6ca1\u6709\u6570\u636e\u8981\u53d1\u9001\u7ed9 Server\u4e86\uff1b \u5ba2\u6237\u7aef\u53d1\u9001\u7b2c\u4e00\u6b21\u6325\u624b\u540e\uff0c\u5c31\u4e0d\u80fd\u5728\u5411 \u670d\u52a1\u7aef\u53d1\u9001\u6570\u636e\u4e86\u3002 \u7b2c\u4e8c\u6b21\u6325\u624b\uff1a Server \u6536\u5230\u4e86 Client \u53d1\u9001\u7684FIN\u62a5\u6587\u6bb5\uff0c\u5411 Client \u56de\u4e00\u4e2aACK\u62a5\u6587\u6bb5\uff0cAcknowledgment Number \u4e3a Sequence Number \u52a0 1\uff1bClient \u8fdb\u5165 FIN_WAIT_2 \u72b6\u6001\uff1bServer \u544a\u8bc9 Client \uff0c\u6211\u201c\u540c\u610f\u201d\u4f60\u7684\u5173\u95ed\u8bf7\u6c42\uff1b Server \u7b2c\u4e00\u6b21\u54cd\u5e94\u540e\uff0c\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u5411 Client \u53d1\u9001\u6570\u636e\uff0c\u8fd9\u91cc\u53ea\u662f\u544a\u8bc9 Client \uff0c\u6211\u6536\u5230\u4f60\u53d1\u9001\u7684\u5173\u95ed\u8bf7\u6c42\u3002 \u7b2c\u4e09\u6b21\u6325\u624b Server \u5411 Client \u53d1\u9001 FIN \u62a5\u6587\u6bb5\uff0c\u8bf7\u6c42\u5173\u95ed\u8fde\u63a5\uff0c\u540c\u65f6 Server \u8fdb\u5165 CLOSE_WAIT \u72b6\u6001\uff1b \u5f53 Server \u7684\u6570\u636e\u54cd\u5e94\u5b8c\u6210\u540e\uff0c\u518d\u544a\u8bc9 Client\uff0c\u6211\u8fd9\u8fb9\u4e5f\u53ef\u4ee5\u5173\u95ed\u8bf7\u6c42\u4e86\uff0c \u8fd9\u65f6 Server \u5c31\u4e0d\u80fd\u518d\u5411 Client \u53d1\u9001\u6570\u636e\u4e86 \u7b2c\u56db\u6b21\u6325\u624b Client \u6536\u5230 Server \u53d1\u9001\u7684 FIN \u62a5\u6587\u6bb5\uff0c\u5411 Server \u53d1\u9001 ACK \u62a5\u6587\u6bb5\uff0c\u7136\u540e Client \u8fdb\u5165 TIME_WAIT \u72b6\u6001\uff1bServer \u6536\u5230 Client \u7684 ACK \u62a5\u6587\u6bb5\u4ee5\u540e\uff0c\u5c31\u5173\u95ed\u8fde\u63a5\uff1b\u6b64\u65f6\uff0cClient \u7b49\u5f852MSL\u540e\u4f9d\u7136\u6ca1\u6709\u6536\u5230\u56de\u590d\uff0c\u5219\u8bc1\u660e Server \u7aef\u5df2\u6b63\u5e38\u5173\u95ed\uff0c\u90a3\u597d\uff0cClient \u4e5f\u53ef\u4ee5\u5173\u95ed\u8fde\u63a5\u4e86\u3002 \u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u5efa\u7acb\u8fde\u63a5\u662f\u4e09\u6b21\u63e1\u624b\uff0c\u800c\u5173\u95ed\u8fde\u63a5\u5374\u662f\u56db\u6b21\u6325\u624b\u5462\uff1f \u5efa\u7acb\u8fde\u63a5 \u56e0\u4e3a\u670d\u52a1\u7aef\u5728LISTEN\u72b6\u6001\u4e0b\uff0c\u6536\u5230\u5efa\u7acb\u8fde\u63a5\u8bf7\u6c42\u7684SYN\u62a5\u6587\u540e\uff0c\u628aACK\u548cSYN\u653e\u5728\u4e00\u4e2a\u62a5\u6587\u91cc\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u3002 \u5173\u95ed\u8fde\u63a5 \u5f53\u6536\u5230\u5bf9\u65b9\u7684FIN\u62a5\u6587\u65f6\uff0c\u4ec5\u8868\u793a\u5bf9\u65b9\u4e0d\u518d\u53d1\u9001\u6570\u636e\u4f46\u8fd8\u80fd\u63a5\u6536\u6536\u636e\uff0c\u6211\u4eec\u4e5f\u672a\u5fc5\u628a\u5168\u90e8\u6570\u636e\u90fd\u53d1\u7ed9\u4e86\u5bf9\u65b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7acb\u5373close\uff0c\u4e5f\u53ef\u4ee5\u53d1\u9001\u4e00\u4e9b\u6570\u636e\u7ed9\u5bf9\u65b9\u540e\uff0c\u518d\u53d1\u9001FIN\u62a5\u6587\u7ed9\u5bf9\u65b9\u8868\u793a\u540c\u610f\u5173\u95ed\u8fde\u63a5\u3002\u56e0\u6b64\u6211\u4eec\u7684ACK\u548cFIN\u4e00\u822c\u4f1a\u5206\u5f00\u53d1\u9001\u3002 TCP\u534f\u8bae\u662f\u4e00\u79cd\u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u7684\u3001\u57fa\u4e8e\u5b57\u8282\u6d41\u7684\u4f20\u8f93\u5c42\u901a\u4fe1\u534f\u8bae\uff0c\u91c7\u7528\u5168\u53cc\u5de5\u901a\u4fe1\u3002 \u90a3\u4e3a\u4ec0\u4e48\u9700\u8981\u4e09\u6b21\u63e1\u624b\u5462\uff1f\u8bf7\u770b\u5982\u4e0b\u7684\u8fc7\u7a0b\uff1a A\u5411B\u53d1\u8d77\u5efa\u7acb\u8fde\u63a5\u8bf7\u6c42\uff1aA\u2014\u2014>B\uff1b B\u6536\u5230A\u7684\u53d1\u9001\u4fe1\u53f7\uff0c\u5e76\u4e14\u5411A\u53d1\u9001\u786e\u8ba4\u4fe1\u606f\uff1aB\u2014\u2014>A\uff1b A\u6536\u5230B\u7684\u786e\u8ba4\u4fe1\u53f7\uff0c\u5e76\u5411B\u53d1\u9001\u786e\u8ba4\u4fe1\u53f7\uff1aA\u2014\u2014>B\u3002 \u4e09\u6b21\u63e1\u624b\u5927\u6982\u5c31\u662f\u8fd9\u4e48\u4e2a\u8fc7\u7a0b\u3002 \u901a\u8fc7\u7b2c\u4e00\u6b21\u63e1\u624b\uff0cB\u77e5\u9053A\u80fd\u591f\u53d1\u9001\u6570\u636e\u3002\u901a\u8fc7\u7b2c\u4e8c\u6b21\u63e1\u624b\uff0cA\u77e5\u9053B\u80fd\u53d1\u9001\u6570\u636e\u3002\u7ed3\u5408\u7b2c\u4e00\u6b21\u63e1\u624b\u548c\u7b2c\u4e8c\u6b21\u63e1\u624b\uff0cA\u77e5\u9053B\u80fd\u63a5\u6536\u6570\u636e\u3002\u7ed3\u5408\u7b2c\u4e09\u6b21\u63e1\u624b\uff0cB\u77e5\u9053A\u80fd\u591f\u63a5\u6536\u6570\u636e\u3002 \u81f3\u6b64\uff0c\u5b8c\u6210\u4e86\u63e1\u624b\u8fc7\u7a0b\uff0cA\u77e5\u9053B\u80fd\u6536\u80fd\u53d1\uff0cB\u77e5\u9053A\u80fd\u6536\u80fd\u53d1\uff0c\u901a\u4fe1\u8fde\u63a5\u81f3\u6b64\u5efa\u7acb\u3002\u4e09\u6b21\u8fde\u63a5\u662f\u4fdd\u8bc1\u53ef\u9760\u7684\u6700\u5c0f\u63e1\u624b\u6b21\u6570\uff0c\u518d\u591a\u6b21\u63e1\u624b\u4e5f\u4e0d\u80fd\u63d0\u9ad8\u901a\u4fe1\u6210\u529f\u7684\u6982\u7387\uff0c\u53cd\u800c\u6d6a\u8d39\u8d44\u6e90\u3002 \u90a3\u4e3a\u4ec0\u4e48\u9700\u8981\u56db\u6b21\u6325\u624b\u5462\uff1f\u8bf7\u770b\u5982\u4e0b\u8fc7\u7a0b\uff1a A\u5411B\u53d1\u8d77\u8bf7\u6c42\uff0c\u8868\u793aA\u6ca1\u6709\u6570\u636e\u8981\u53d1\u9001\u4e86\uff1aA\u2014\u2014>B\uff1b B\u5411A\u53d1\u9001\u4fe1\u53f7\uff0c\u786e\u8ba4A\u7684\u65ad\u5f00\u8bf7\u6c42\u8bf7\u6c42\uff1aB\u2014\u2014>A\uff1b B\u5411A\u53d1\u9001\u4fe1\u53f7\uff0c\u8bf7\u6c42\u65ad\u5f00\u8fde\u63a5\uff0c\u8868\u793aB\u6ca1\u6709\u6570\u636e\u8981\u53d1\u9001\u4e86\uff1aB\u2014\u2014>A\uff1b A\u5411B\u53d1\u9001\u786e\u8ba4\u4fe1\u53f7\uff0c\u540c\u610f\u65ad\u5f00\uff1aA\u2014\u2014>B\u3002 B\u6536\u5230\u786e\u8ba4\u4fe1\u53f7\uff0c\u65ad\u5f00\u8fde\u63a5\uff0c\u800cA\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u6ca1\u6536\u5230B\u7684\u4fe1\u53f7\uff0c\u8868\u660eB\u5df2\u7ecf\u65ad\u5f00\u4e86\uff0c\u4e8e\u662fA\u4e5f\u65ad\u5f00\u4e86\u8fde\u63a5\u3002\u81f3\u6b64\uff0c\u5b8c\u6210\u6325\u624b\u8fc7\u7a0b\u3002 \u53ef\u80fd\u6709\u6367\u6cb9\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e482\u30013\u6b21\u6325\u624b\u4e0d\u80fd\u5408\u5728\u4e00\u6b21\u6325\u624b\u4e2d\uff1f\u90a3\u662f\u56e0\u4e3a\u6b64\u65f6A\u867d\u7136\u4e0d\u518d\u53d1\u9001\u6570\u636e\u4e86\uff0c\u4f46\u662f\u8fd8\u53ef\u4ee5\u63a5\u6536\u6570\u636e\uff0cB\u53ef\u80fd\u8fd8\u6709\u6570\u636e\u8981\u53d1\u9001\u7ed9A\uff0c\u6240\u4ee5\u4e24\u6b21\u6325\u624b\u4e0d\u80fd\u5408\u5e76\u4e3a\u4e00\u6b21\u3002 \u6325\u624b\u6b21\u6570\u6bd4\u63e1\u624b\u591a\u4e00\u6b21\uff0c\u662f\u56e0\u4e3a\u63e1\u624b\u8fc7\u7a0b\uff0c\u901a\u4fe1\u53ea\u9700\u8981\u5904\u7406\u8fde\u63a5\u3002\u800c\u6325\u624b\u8fc7\u7a0b\uff0c\u901a\u4fe1\u9700\u8981\u5904\u7406\u6570\u636e+\u8fde\u63a5\u3002 TCP\u5728\u771f\u6b63\u7684\u8bfb\u5199\u64cd\u4f5c\u4e4b\u524d\uff0cserver\u4e0eclient\u4e4b\u95f4\u5fc5\u987b\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c \u5f53\u8bfb\u5199\u64cd\u4f5c\u5b8c\u6210\u540e\uff0c\u53cc\u65b9\u4e0d\u518d\u9700\u8981\u8fd9\u4e2a\u8fde\u63a5\u65f6\u5b83\u4eec\u53ef\u4ee5\u91ca\u653e\u8fd9\u4e2a\u8fde\u63a5\uff0c \u8fde\u63a5\u7684\u5efa\u7acb\u901a\u8fc7\u4e09\u6b21\u63e1\u624b\uff0c\u91ca\u653e\u5219\u9700\u8981\u56db\u6b21\u6325\u624b\uff0c \u6240\u4ee5\u8bf4\u6bcf\u4e2a\u8fde\u63a5\u7684\u5efa\u7acb\u90fd\u662f\u9700\u8981\u8d44\u6e90\u6d88\u8017\u548c\u65f6\u95f4\u6d88\u8017\u7684\u3002","title":"4.7 tcp\u76844\u6b21\u6325\u624b"},{"location":"002-\u7f51\u7edctcp/#tcp_5","text":"","title":"TCP\u901a\u4fe1\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u5982\u4e0b\u56fe:"},{"location":"002-\u7f51\u7edctcp/#146-tcp","text":"\u6a21\u62df\u4e00\u79cdTCP\u77ed\u8fde\u63a5\u7684\u60c5\u51b5: client \u5411 server \u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42 server \u63a5\u5230\u8bf7\u6c42\uff0c\u53cc\u65b9\u5efa\u7acb\u8fde\u63a5 client \u5411 server \u53d1\u9001\u6d88\u606f server \u56de\u5e94 client \u4e00\u6b21\u8bfb\u5199\u5b8c\u6210\uff0c\u6b64\u65f6\u53cc\u65b9\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u4ee5\u53d1\u8d77 close \u64cd\u4f5c \u5728\u6b65\u9aa45\u4e2d\uff0c\u4e00\u822c\u90fd\u662f client \u5148\u53d1\u8d77 close \u64cd\u4f5c\u3002\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u6709\u7279\u6b8a\u7684\u60c5\u51b5\u3002 \u4ece\u4e0a\u9762\u7684\u63cf\u8ff0\u770b\uff0c\u77ed\u8fde\u63a5\u4e00\u822c\u53ea\u4f1a\u5728 client/server \u95f4\u4f20\u9012\u4e00\u6b21\u8bfb\u5199\u64cd\u4f5c\uff01","title":"1. TCP\u77ed\u8fde\u63a5"},{"location":"002-\u7f51\u7edctcp/#246-tcp","text":"\u518d\u6a21\u62df\u4e00\u79cd\u957f\u8fde\u63a5\u7684\u60c5\u51b5: client \u5411 server \u53d1\u8d77\u8fde\u63a5 server \u63a5\u5230\u8bf7\u6c42\uff0c\u53cc\u65b9\u5efa\u7acb\u8fde\u63a5 client \u5411 server \u53d1\u9001\u6d88\u606f server \u56de\u5e94 client \u4e00\u6b21\u8bfb\u5199\u5b8c\u6210\uff0c\u8fde\u63a5\u4e0d\u5173\u95ed \u540e\u7eed\u8bfb\u5199\u64cd\u4f5c... \u957f\u65f6\u95f4\u64cd\u4f5c\u4e4b\u540eclient\u53d1\u8d77\u5173\u95ed\u8bf7\u6c42","title":"2. TCP\u957f\u8fde\u63a5"},{"location":"002-\u7f51\u7edctcp/#346-tcp","text":"","title":"3. TCP\u957f/\u77ed\u8fde\u63a5\u64cd\u4f5c\u8fc7\u7a0b"},{"location":"002-\u7f51\u7edctcp/#31","text":"\u5efa\u7acb\u8fde\u63a5\u2014\u2014\u6570\u636e\u4f20\u8f93\u2014\u2014\u5173\u95ed\u8fde\u63a5...\u5efa\u7acb\u8fde\u63a5\u2014\u2014\u6570\u636e\u4f20\u8f93\u2014\u2014\u5173\u95ed\u8fde\u63a5","title":"3.1 \u77ed\u8fde\u63a5\u7684\u64cd\u4f5c\u6b65\u9aa4\u662f\uff1a"},{"location":"002-\u7f51\u7edctcp/#32","text":"\u5efa\u7acb\u8fde\u63a5\u2014\u2014\u6570\u636e\u4f20\u8f93...\uff08\u4fdd\u6301\u8fde\u63a5\uff09...\u6570\u636e\u4f20\u8f93\u2014\u2014\u5173\u95ed\u8fde\u63a5","title":"3.2 \u957f\u8fde\u63a5\u7684\u64cd\u4f5c\u6b65\u9aa4\u662f\uff1a"},{"location":"002-\u7f51\u7edctcp/#446-tcp","text":"\u957f\u8fde\u63a5\u53ef\u4ee5\u7701\u53bb\u8f83\u591a\u7684TCP\u5efa\u7acb\u548c\u5173\u95ed\u7684\u64cd\u4f5c\uff0c\u51cf\u5c11\u6d6a\u8d39\uff0c\u8282\u7ea6\u65f6\u95f4\u3002 \u5bf9\u4e8e\u9891\u7e41\u8bf7\u6c42\u8d44\u6e90\u7684\u5ba2\u6237\u6765\u8bf4\uff0c\u8f83\u9002\u7528\u957f\u8fde\u63a5\u3002 client\u4e0eserver\u4e4b\u95f4\u7684\u8fde\u63a5\u5982\u679c\u4e00\u76f4\u4e0d\u5173\u95ed\u7684\u8bdd\uff0c\u4f1a\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c \u968f\u7740\u5ba2\u6237\u7aef\u8fde\u63a5\u8d8a\u6765\u8d8a\u591a\uff0cserver\u65e9\u665a\u6709\u625b\u4e0d\u4f4f\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u5019server\u7aef\u9700\u8981\u91c7\u53d6\u4e00\u4e9b\u7b56\u7565\uff0c \u5982\u5173\u95ed\u4e00\u4e9b\u957f\u65f6\u95f4\u6ca1\u6709\u8bfb\u5199\u4e8b\u4ef6\u53d1\u751f\u7684\u8fde\u63a5\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u6076\u610f\u8fde\u63a5\u5bfc\u81f4server\u7aef\u670d\u52a1\u53d7\u635f\uff1b \u5982\u679c\u6761\u4ef6\u518d\u5141\u8bb8\u5c31\u53ef\u4ee5\u4ee5\u5ba2\u6237\u7aef\u673a\u5668\u4e3a\u9897\u7c92\u5ea6\uff0c\u9650\u5236\u6bcf\u4e2a\u5ba2\u6237\u7aef\u7684\u6700\u5927\u957f\u8fde\u63a5\u6570\uff0c \u8fd9\u6837\u53ef\u4ee5\u5b8c\u5168\u907f\u514d\u67d0\u4e2a\u86cb\u75bc\u7684\u5ba2\u6237\u7aef\u8fde\u7d2f\u540e\u7aef\u670d\u52a1\u3002 \u77ed\u8fde\u63a5\u5bf9\u4e8e\u670d\u52a1\u5668\u6765\u8bf4\u7ba1\u7406\u8f83\u4e3a\u7b80\u5355\uff0c\u5b58\u5728\u7684\u8fde\u63a5\u90fd\u662f\u6709\u7528\u7684\u8fde\u63a5\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u63a7\u5236\u624b\u6bb5\u3002 \u4f46\u5982\u679c\u5ba2\u6237\u8bf7\u6c42\u9891\u7e41\uff0c\u5c06\u5728TCP\u7684\u5efa\u7acb\u548c\u5173\u95ed\u64cd\u4f5c\u4e0a\u6d6a\u8d39\u65f6\u95f4\u548c\u5e26\u5bbd\u3002","title":"4. TCP\u957f/\u77ed\u8fde\u63a5\u7684\u4f18\u70b9\u548c\u7f3a\u70b9"},{"location":"002-\u7f51\u7edctcp/#546-tcp","text":"\u957f\u8fde\u63a5\u591a\u7528\u4e8e\u64cd\u4f5c\u9891\u7e41\uff0c\u70b9\u5bf9\u70b9\u7684\u901a\u8baf\uff0c\u800c\u4e14\u8fde\u63a5\u6570\u4e0d\u80fd\u592a\u591a\u60c5\u51b5\u3002 \u6bcf\u4e2aTCP\u8fde\u63a5\u90fd\u9700\u8981\u4e09\u6b21\u63e1\u624b\uff0c\u8fd9\u9700\u8981\u65f6\u95f4\uff0c\u5982\u679c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u662f\u5148\u8fde\u63a5\uff0c \u518d\u64cd\u4f5c\u7684\u8bdd\u90a3\u4e48\u5904\u7406\u901f\u5ea6\u4f1a\u964d\u4f4e\u5f88\u591a\uff0c\u6240\u4ee5\u6bcf\u4e2a\u64cd\u4f5c\u5b8c\u540e\u90fd\u4e0d\u65ad\u5f00\uff0c \u518d\u6b21\u5904\u7406\u65f6\u76f4\u63a5\u53d1\u9001\u6570\u636e\u5305\u5c31OK\u4e86\uff0c\u4e0d\u7528\u5efa\u7acbTCP\u8fde\u63a5\u3002 \u4f8b\u5982\uff1a\u6570\u636e\u5e93\u7684\u8fde\u63a5\u7528\u957f\u8fde\u63a5\uff0c\u5982\u679c\u7528\u77ed\u8fde\u63a5\u9891\u7e41\u7684\u901a\u4fe1\u4f1a\u9020\u6210socket\u9519\u8bef\uff0c \u800c\u4e14\u9891\u7e41\u7684socket \u521b\u5efa\u4e5f\u662f\u5bf9\u8d44\u6e90\u7684\u6d6a\u8d39\u3002 \u800c\u50cfWEB\u7f51\u7ad9\u7684http\u670d\u52a1\u4e00\u822c\u90fd\u7528\u77ed\u94fe\u63a5\uff0c\u56e0\u4e3a\u957f\u8fde\u63a5\u5bf9\u4e8e\u670d\u52a1\u7aef\u6765\u8bf4\u4f1a\u8017\u8d39\u4e00\u5b9a\u7684\u8d44\u6e90\uff0c \u800c\u50cfWEB\u7f51\u7ad9\u8fd9\u4e48\u9891\u7e41\u7684\u6210\u5343\u4e0a\u4e07\u751a\u81f3\u4e0a\u4ebf\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u7528\u77ed\u8fde\u63a5\u4f1a\u66f4\u7701\u4e00\u4e9b\u8d44\u6e90\uff0c \u5982\u679c\u7528\u957f\u8fde\u63a5\uff0c\u800c\u4e14\u540c\u65f6\u6709\u6210\u5343\u4e0a\u4e07\u7684\u7528\u6237\uff0c\u5982\u679c\u6bcf\u4e2a\u7528\u6237\u90fd\u5360\u7528\u4e00\u4e2a\u8fde\u63a5\u7684\u8bdd\uff0c \u90a3\u53ef\u60f3\u800c\u77e5\u5427\u3002\u6240\u4ee5\u5e76\u53d1\u91cf\u5927\uff0c\u4f46\u6bcf\u4e2a\u7528\u6237\u65e0\u9700\u9891\u7e41\u64cd\u4f5c\u60c5\u51b5\u4e0b\u9700\u7528\u77ed\u8fde\u597d\u3002","title":"5. TCP\u957f/\u77ed\u8fde\u63a5\u7684\u5e94\u7528\u573a\u666f"},{"location":"002-\u7f51\u7edctcp/#wireshark","text":"","title":"wireshark\u6293\u5305\u5de5\u5177\u4f7f\u7528"},{"location":"002-\u7f51\u7edctcp/#146-wireshark","text":"","title":"1. \u5b89\u88c5wireshark"},{"location":"002-\u7f51\u7edctcp/#246-wireshark","text":"","title":"2. wireshark\u7684\u4f7f\u7528"},{"location":"002-\u7f51\u7edctcp/#410tcp-ip","text":"\u4f5c\u4e3a\u65b0\u65f6\u4ee3\u6807\u6746\u7684\u6211\u4eec\uff0c\u5df2\u7ecf\u79bb\u4e0d\u5f00\u624b\u673a\u3001\u79bb\u4e0d\u5f00\u7f51\u7edc\uff0c\u5bf9\u4e8e\u4e92\u8054\u7f51\u5927\u5bb6\u53ef\u80fd\u8033\u719f\u80fd\u8be6\uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u51fa\u73b0\u6bd4\u4e92\u8054\u7f51\u8981\u65e9\u5f88\u591a","title":"4.10tcp-ip\u7b80\u4ecb"},{"location":"002-\u7f51\u7edctcp/#146_1","text":"\u6709\u7684\u8bf4\u82f1\u8bed\uff0c\u6709\u7684\u8bf4\u4e2d\u6587\uff0c\u6709\u7684\u8bf4\u5fb7\u8bed\uff0c\u8bf4\u540c\u4e00\u79cd\u8bed\u8a00\u7684\u4eba\u53ef\u4ee5\u4ea4\u6d41\uff0c\u4e0d\u540c\u7684\u8bed\u8a00\u4e4b\u95f4\u5c31\u4e0d\u884c\u4e86 \u4e3a\u4e86\u89e3\u51b3\u4e0d\u540c\u79cd\u65cf\u4eba\u4e4b\u95f4\u7684\u8bed\u8a00\u6c9f\u901a\u969c\u788d\uff0c\u73b0\u89c4\u5b9a\u56fd\u9645\u901a\u7528\u8bed\u8a00\u662f\u82f1\u8bed\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u89c4\u5b9a\uff0c\u8fd9\u5c31\u662f\u534f\u8bae","title":"1. \u4ec0\u4e48\u662f\u534f\u8bae"},{"location":"002-\u7f51\u7edctcp/#246_1","text":"\u73b0\u5728\u7684\u751f\u6d3b\u4e2d\uff0c\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u53ea\u9700\u8981\u80fd\u591f\u8054\u7f51\uff08\u6709\u7ebf\u65e0\u7ebf\u90fd\u53ef\u4ee5\uff09\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f8\u4e92\u8fdb\u884c\u4f20\u9012\u6570\u636e \u90a3\u4e48\u4e0d\u540c\u79cd\u7c7b\u4e4b\u95f4\u7684\u8ba1\u7b97\u673a\u5230\u5e95\u662f\u600e\u4e48\u8fdb\u884c\u6570\u636e\u4f20\u9012\u7684\u5462\uff1f \u5c31\u50cf\u8bf4\u4e0d\u540c\u8bed\u8a00\u7684\u4eba\u6c9f\u901a\u4e00\u6837\uff0c\u53ea\u8981\u6709\u4e00\u79cd\u5927\u5bb6\u90fd\u8ba4\u53ef\u90fd\u9075\u5b88\u7684\u534f\u8bae\u5373\u53ef\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8ba1\u7b97\u673a\u90fd\u9075\u5b88\u7684\u7f51\u7edc\u901a\u4fe1\u534f\u8bae\u53eb\u505a TCP/IP\u534f\u8bae","title":"2. \u8ba1\u7b97\u673a\u7f51\u7edc\u6c9f\u901a\u7528\u4ec0\u4e48"},{"location":"002-\u7f51\u7edctcp/#346-tcpip","text":"\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\uff0c\u90fd\u662f\u7531\u5404\u5382\u5546\u81ea\u5df1\u89c4\u5b9a\u4e00\u5957\u534f\u8bae\uff0cIBM\u3001Apple\u548cMicrosoft\u90fd\u6709\u5404\u81ea\u7684\u7f51\u7edc\u534f\u8bae\uff0c\u4e92\u4e0d\u517c\u5bb9 \u4e3a\u4e86\u628a\u5168\u4e16\u754c\u7684\u6240\u6709\u4e0d\u540c\u7c7b\u578b\u7684\u8ba1\u7b97\u673a\u90fd\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u5fc5\u987b\u89c4\u5b9a\u4e00\u5957\u5168\u7403\u901a\u7528\u7684\u534f\u8bae\uff0c\u4e3a\u4e86\u5b9e\u73b0\u4e92\u8054\u7f51\u8fd9\u4e2a\u76ee\u6807\uff0c\u4e92\u8054\u7f51\u534f\u8bae\u65cf\uff08Internet Protocol Suite\uff09\u5c31\u662f\u901a\u7528\u534f\u8bae\u6807\u51c6\u3002 \u56e0\u4e3a\u4e92\u8054\u7f51\u534f\u8bae\u5305\u542b\u4e86\u4e0a\u767e\u79cd\u534f\u8bae\u6807\u51c6\uff0c\u4f46\u662f\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u534f\u8bae\u662fTCP\u548cIP\u534f\u8bae\uff0c\u6240\u4ee5\uff0c\u5927\u5bb6\u628a\u4e92\u8054\u7f51\u7684\u534f\u8bae\u7b80\u79f0TCP/IP\u534f\u8bae(\u65cf) \u5e38\u7528\u7684\u7f51\u7edc\u534f\u8bae\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8bf4\u660e\uff1a \u7f51\u9645\u5c42\u4e5f\u79f0\u4e3a\uff1a\u7f51\u7edc\u5c42 \u7f51\u7edc\u63a5\u53e3\u5c42\u4e5f\u79f0\u4e3a\uff1a\u94fe\u8def\u5c42","title":"3. TCP/IP\u534f\u8bae(\u65cf)"},{"location":"002-\u7f51\u7edctcp/#_5","text":"","title":"\u53e6\u5916\u4e00\u5957\u6807\u51c6"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/","text":"9.1. http\u534f\u8bae \u00b6 HTTP\u534f\u8bae\u7b80\u4ecb \u00b6 1. \u4f7f\u7528\u8c37\u6b4c/\u706b\u72d0\u6d4f\u89c8\u5668\u5206\u6790 \u00b6 \u5728Web\u5e94\u7528\u4e2d\uff0c\u670d\u52a1\u5668\u628a\u7f51\u9875\u4f20\u7ed9\u6d4f\u89c8\u5668\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u7f51\u9875\u7684HTML\u4ee3\u7801\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\uff0c\u8ba9\u6d4f\u89c8\u5668\u663e\u793a\u51fa\u6765\u3002\u800c\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4f20\u8f93\u534f\u8bae\u662fHTTP\uff0c\u6240\u4ee5\uff1a HTML\u662f\u4e00\u79cd\u7528\u6765\u5b9a\u4e49\u7f51\u9875\u7684\u6587\u672c\uff0c\u4f1aHTML\uff0c\u5c31\u53ef\u4ee5\u7f16\u5199\u7f51\u9875\uff1b HTTP\u662f\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93HTML\u7684\u534f\u8bae\uff0c\u7528\u4e8e\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u7684\u901a\u4fe1\u3002 Chrome\u6d4f\u89c8\u5668\u63d0\u4f9b\u4e86\u4e00\u5957\u5b8c\u6574\u5730\u8c03\u8bd5\u5de5\u5177\uff0c\u975e\u5e38\u9002\u5408Web\u5f00\u53d1\u3002 \u5b89\u88c5\u597dChrome\u6d4f\u89c8\u5668\u540e\uff0c\u6253\u5f00Chrome\uff0c\u5728\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u89c6\u56fe\u201d\uff0c\u201c\u5f00\u53d1\u8005\u201d\uff0c\u201c\u5f00\u53d1\u8005\u5de5\u5177\u201d\uff0c\u5c31\u53ef\u4ee5\u663e\u793a\u5f00\u53d1\u8005\u5de5\u5177\uff1a \u8bf4\u660e \u00b6 Elements\u663e\u793a\u7f51\u9875\u7684\u7ed3\u6784 Network\u663e\u793a\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u7684\u901a\u4fe1 \u6211\u4eec\u70b9Network\uff0c\u786e\u4fdd\u7b2c\u4e00\u4e2a\u5c0f\u7ea2\u706f\u4eae\u7740\uff0cChrome\u5c31\u4f1a\u8bb0\u5f55\u6240\u6709\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\uff1a 2. http\u534f\u8bae\u7684\u5206\u6790 \u00b6 \u5f53\u6211\u4eec\u5728\u5730\u5740\u680f\u8f93\u5165www.sina.com\u65f6\uff0c\u6d4f\u89c8\u5668\u5c06\u663e\u793a\u65b0\u6d6a\u7684\u9996\u9875\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6d4f\u89c8\u5668\u90fd\u5e72\u4e86\u54ea\u4e9b\u4e8b\u60c5\u5462\uff1f\u901a\u8fc7Network\u7684\u8bb0\u5f55\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u3002\u5728Network\u4e2d\uff0c\u627e\u5230www.sina.com\u90a3\u6761\u8bb0\u5f55\uff0c\u70b9\u51fb\uff0c\u53f3\u4fa7\u5c06\u663e\u793aRequest Headers\uff0c\u70b9\u51fb\u53f3\u4fa7\u7684view source\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u770b\u5230\u6d4f\u89c8\u5668\u53d1\u7ed9\u65b0\u6d6a\u670d\u52a1\u5668\u7684\u8bf7\u6c42\uff1a 2.1 \u6d4f\u89c8\u5668\u8bf7\u6c42 \u00b6 \u8bf4\u660e \u00b6 \u6700\u4e3b\u8981\u7684\u5934\u4e24\u884c\u5206\u6790\u5982\u4e0b\uff0c\u7b2c\u4e00\u884c\uff1a GET / HTTP/1.1 GET\u8868\u793a\u4e00\u4e2a\u8bfb\u53d6\u8bf7\u6c42\uff0c\u5c06\u4ece\u670d\u52a1\u5668\u83b7\u5f97\u7f51\u9875\u6570\u636e\uff0c/\u8868\u793aURL\u7684\u8def\u5f84\uff0cURL\u603b\u662f\u4ee5/\u5f00\u5934\uff0c/\u5c31\u8868\u793a\u9996\u9875\uff0c\u6700\u540e\u7684HTTP/1.1\u6307\u793a\u91c7\u7528\u7684HTTP\u534f\u8bae\u7248\u672c\u662f1.1\u3002\u76ee\u524dHTTP\u534f\u8bae\u7684\u7248\u672c\u5c31\u662f1.1\uff0c\u4f46\u662f\u5927\u90e8\u5206\u670d\u52a1\u5668\u4e5f\u652f\u63011.0\u7248\u672c\uff0c\u4e3b\u8981\u533a\u522b\u5728\u4e8e1.1\u7248\u672c\u5141\u8bb8\u591a\u4e2aHTTP\u8bf7\u6c42\u590d\u7528\u4e00\u4e2aTCP\u8fde\u63a5\uff0c\u4ee5\u52a0\u5feb\u4f20\u8f93\u901f\u5ea6\u3002 \u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\uff0c\u6bcf\u4e00\u884c\u90fd\u7c7b\u4f3c\u4e8eXxx: abcdefg\uff1a Host: www.sina.com \u8868\u793a\u8bf7\u6c42\u7684\u57df\u540d\u662fwww.sina.com\u3002\u5982\u679c\u4e00\u53f0\u670d\u52a1\u5668\u6709\u591a\u4e2a\u7f51\u7ad9\uff0c\u670d\u52a1\u5668\u5c31\u9700\u8981\u901a\u8fc7Host\u6765\u533a\u5206\u6d4f\u89c8\u5668\u8bf7\u6c42\u7684\u662f\u54ea\u4e2a\u7f51\u7ad9\u3002 2.2 \u670d\u52a1\u5668\u54cd\u5e94 \u00b6 \u7ee7\u7eed\u5f80\u4e0b\u627e\u5230Response Headers\uff0c\u70b9\u51fbview source\uff0c\u663e\u793a\u670d\u52a1\u5668\u8fd4\u56de\u7684\u539f\u59cb\u54cd\u5e94\u6570\u636e\uff1a HTTP\u54cd\u5e94\u5206\u4e3aHeader\u548cBody\u4e24\u90e8\u5206\uff08Body\u662f\u53ef\u9009\u9879\uff09\uff0c\u6211\u4eec\u5728Network\u4e2d\u770b\u5230\u7684Header\u6700\u91cd\u8981\u7684\u51e0\u884c\u5982\u4e0b\uff1a HTTP/1.1 200 OK 200\u8868\u793a\u4e00\u4e2a\u6210\u529f\u7684\u54cd\u5e94\uff0c\u540e\u9762\u7684OK\u662f\u8bf4\u660e\u3002 \u5982\u679c\u8fd4\u56de\u7684\u4e0d\u662f200\uff0c\u90a3\u4e48\u5f80\u5f80\u6709\u5176\u4ed6\u7684\u529f\u80fd\uff0c\u4f8b\u5982 \u5931\u8d25\u7684\u54cd\u5e94\u6709404 Not Found\uff1a\u7f51\u9875\u4e0d\u5b58\u5728 500 Internal Server Error\uff1a\u670d\u52a1\u5668\u5185\u90e8\u51fa\u9519 ...\u7b49\u7b49... Content-Type: text/html Content-Type\u6307\u793a\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u662ftext/html\u8868\u793aHTML\u7f51\u9875\u3002 \u8bf7\u6ce8\u610f\uff0c\u6d4f\u89c8\u5668\u5c31\u662f\u4f9d\u9760Content-Type\u6765\u5224\u65ad\u54cd\u5e94\u7684\u5185\u5bb9\u662f\u7f51\u9875\u8fd8\u662f\u56fe\u7247\uff0c\u662f\u89c6\u9891\u8fd8\u662f\u97f3\u4e50\u3002\u6d4f\u89c8\u5668\u5e76\u4e0d\u9760URL\u6765\u5224\u65ad\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\uff0c\u5373\u4f7fURL\u662f http://www.baidu.com/meimei.jpg \uff0c\u5b83\u4e5f\u4e0d\u4e00\u5b9a\u5c31\u662f\u56fe\u7247\u3002 HTTP\u54cd\u5e94\u7684Body\u5c31\u662fHTML\u6e90\u7801\uff0c\u6211\u4eec\u5728\u83dc\u5355\u680f\u9009\u62e9\u201c\u89c6\u56fe\u201d\uff0c\u201c\u5f00\u53d1\u8005\u201d\uff0c\u201c\u67e5\u770b\u7f51\u9875\u6e90\u7801\u201d\u5c31\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u67e5\u770bHTML\u6e90\u7801\uff1a \u6d4f\u89c8\u5668\u89e3\u6790\u8fc7\u7a0b \u00b6 \u5f53\u6d4f\u89c8\u5668\u8bfb\u53d6\u5230\u65b0\u6d6a\u9996\u9875\u7684HTML\u6e90\u7801\u540e\uff0c\u5b83\u4f1a\u89e3\u6790HTML\uff0c\u663e\u793a\u9875\u9762\uff0c\u7136\u540e\uff0c\u6839\u636eHTML\u91cc\u9762\u7684\u5404\u79cd\u94fe\u63a5\uff0c\u518d\u53d1\u9001HTTP\u8bf7\u6c42\u7ed9\u65b0\u6d6a\u670d\u52a1\u5668\uff0c\u62ff\u5230\u76f8\u5e94\u7684\u56fe\u7247\u3001\u89c6\u9891\u3001Flash\u3001JavaScript\u811a\u672c\u3001CSS\u7b49\u5404\u79cd\u8d44\u6e90\uff0c\u6700\u7ec8\u663e\u793a\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u9875\u9762\u3002\u6240\u4ee5\u6211\u4eec\u5728Network\u4e0b\u9762\u80fd\u770b\u5230\u5f88\u591a\u989d\u5916\u7684HTTP\u8bf7\u6c42\u3002 3. \u603b\u7ed3 \u00b6 3.1 HTTP\u8bf7\u6c42 \u00b6 \u8ddf\u8e2a\u4e86\u65b0\u6d6a\u7684\u9996\u9875\uff0c\u6211\u4eec\u6765\u603b\u7ed3\u4e00\u4e0bHTTP\u8bf7\u6c42\u7684\u6d41\u7a0b\uff1a 3.1.1 \u6b65\u9aa41\uff1a\u6d4f\u89c8\u5668\u9996\u5148\u5411\u670d\u52a1\u5668\u53d1\u9001HTTP\u8bf7\u6c42\uff0c\u8bf7\u6c42\u5305\u62ec\uff1a \u00b6 \u65b9\u6cd5\uff1aGET\u8fd8\u662fPOST\uff0cGET\u4ec5\u8bf7\u6c42\u8d44\u6e90\uff0cPOST\u4f1a\u9644\u5e26\u7528\u6237\u6570\u636e\uff1b \u8def\u5f84\uff1a/full/url/path\uff1b \u57df\u540d\uff1a\u7531Host\u5934\u6307\u5b9a\uff1aHost: www.sina.com \u4ee5\u53ca\u5176\u4ed6\u76f8\u5173\u7684Header\uff1b \u5982\u679c\u662fPOST\uff0c\u90a3\u4e48\u8bf7\u6c42\u8fd8\u5305\u62ec\u4e00\u4e2aBody\uff0c\u5305\u542b\u7528\u6237\u6570\u636e 3.1.1 \u6b65\u9aa42\uff1a\u670d\u52a1\u5668\u5411\u6d4f\u89c8\u5668\u8fd4\u56deHTTP\u54cd\u5e94\uff0c\u54cd\u5e94\u5305\u62ec\uff1a \u00b6 \u54cd\u5e94\u4ee3\u7801\uff1a200\u8868\u793a\u6210\u529f\uff0c3xx\u8868\u793a\u91cd\u5b9a\u5411\uff0c4xx\u8868\u793a\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u8bf7\u6c42\u6709\u9519\u8bef\uff0c5xx\u8868\u793a\u670d\u52a1\u5668\u7aef\u5904\u7406\u65f6\u53d1\u751f\u4e86\u9519\u8bef\uff1b \u54cd\u5e94\u7c7b\u578b\uff1a\u7531Content-Type\u6307\u5b9a\uff1b \u4ee5\u53ca\u5176\u4ed6\u76f8\u5173\u7684Header\uff1b \u901a\u5e38\u670d\u52a1\u5668\u7684HTTP\u54cd\u5e94\u4f1a\u643a\u5e26\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u6709\u4e00\u4e2aBody\uff0c\u5305\u542b\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u7f51\u9875\u7684HTML\u6e90\u7801\u5c31\u5728Body\u4e2d\u3002 3.1.1 \u6b65\u9aa43\uff1a\u5982\u679c\u6d4f\u89c8\u5668\u8fd8\u9700\u8981\u7ee7\u7eed\u5411\u670d\u52a1\u5668\u8bf7\u6c42\u5176\u4ed6\u8d44\u6e90\uff0c\u6bd4\u5982\u56fe\u7247\uff0c\u5c31\u518d\u6b21\u53d1\u51faHTTP\u8bf7\u6c42\uff0c\u91cd\u590d\u6b65\u9aa41\u30012\u3002 \u00b6 Web\u91c7\u7528\u7684HTTP\u534f\u8bae\u91c7\u7528\u4e86\u975e\u5e38\u7b80\u5355\u7684\u8bf7\u6c42-\u54cd\u5e94\u6a21\u5f0f\uff0c\u4ece\u800c\u5927\u5927\u7b80\u5316\u4e86\u5f00\u53d1\u3002\u5f53\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u9875\u9762\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728HTTP\u8bf7\u6c42\u4e2d\u628aHTML\u53d1\u9001\u51fa\u53bb\uff0c\u4e0d\u9700\u8981\u8003\u8651\u5982\u4f55\u9644\u5e26\u56fe\u7247\u3001\u89c6\u9891\u7b49\uff0c\u6d4f\u89c8\u5668\u5982\u679c\u9700\u8981\u8bf7\u6c42\u56fe\u7247\u548c\u89c6\u9891\uff0c\u5b83\u4f1a\u53d1\u9001\u53e6\u4e00\u4e2aHTTP\u8bf7\u6c42\uff0c\u56e0\u6b64\uff0c\u4e00\u4e2aHTTP\u8bf7\u6c42\u53ea\u5904\u7406\u4e00\u4e2a\u8d44\u6e90(\u6b64\u65f6\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3aTCP\u534f\u8bae\u4e2d\u7684\u77ed\u8fde\u63a5\uff0c\u6bcf\u4e2a\u94fe\u63a5\u53ea\u83b7\u53d6\u4e00\u4e2a\u8d44\u6e90\uff0c\u5982\u9700\u8981\u591a\u4e2a\u5c31\u9700\u8981\u5efa\u7acb\u591a\u4e2a\u94fe\u63a5) HTTP\u534f\u8bae\u540c\u65f6\u5177\u5907\u6781\u5f3a\u7684\u6269\u5c55\u6027\uff0c\u867d\u7136\u6d4f\u89c8\u5668\u8bf7\u6c42\u7684\u662f http://www.sina.com \u7684\u9996\u9875\uff0c\u4f46\u662f\u65b0\u6d6a\u5728HTML\u4e2d\u53ef\u4ee5\u94fe\u5165\u5176\u4ed6\u670d\u52a1\u5668\u7684\u8d44\u6e90\uff0c\u6bd4\u5982 <img src=\"http://i1.sinaimg.cn/home/2013/1008/U8455P30DT20131008135420.png\"> \uff0c\u4ece\u800c\u5c06\u8bf7\u6c42\u538b\u529b\u5206\u6563\u5230\u5404\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u5e76\u4e14\uff0c\u4e00\u4e2a\u7ad9\u70b9\u53ef\u4ee5\u94fe\u63a5\u5230\u5176\u4ed6\u7ad9\u70b9\uff0c\u65e0\u6570\u4e2a\u7ad9\u70b9\u4e92\u76f8\u94fe\u63a5\u8d77\u6765\uff0c\u5c31\u5f62\u6210\u4e86World Wide Web\uff0c\u7b80\u79f0WWW\u3002 3.2 HTTP\u683c\u5f0f \u00b6 \u6bcf\u4e2aHTTP\u8bf7\u6c42\u548c\u54cd\u5e94\u90fd\u9075\u5faa\u76f8\u540c\u7684\u683c\u5f0f\uff0c\u4e00\u4e2aHTTP\u5305\u542bHeader\u548cBody\u4e24\u90e8\u5206\uff0c\u5176\u4e2dBody\u662f\u53ef\u9009\u7684\u3002 HTTP\u534f\u8bae\u662f\u4e00\u79cd\u6587\u672c\u534f\u8bae\uff0c\u6240\u4ee5\uff0c\u5b83\u7684\u683c\u5f0f\u4e5f\u975e\u5e38\u7b80\u5355\u3002 3.2.1 HTTP GET\u8bf7\u6c42\u7684\u683c\u5f0f\uff1a \u00b6 GET /path HTTP/1.1 Header1: Value1 Header2: Value2 Header3: Value3 \u6bcf\u4e2aHeader\u4e00\u884c\u4e00\u4e2a\uff0c\u6362\u884c\u7b26\u662f\\r\\n\u3002 3.2.2 HTTP POST\u8bf7\u6c42\u7684\u683c\u5f0f\uff1a \u00b6 POST /path HTTP/1.1 Header1: Value1 Header2: Value2 Header3: Value3 body data goes here... \u5f53\u9047\u5230\u8fde\u7eed\u4e24\u4e2a\\r\\n(\u6709\u4e00\u4e2a\u7a7a\u884c)\u65f6\uff0cHeader\u90e8\u5206\u7ed3\u675f\uff0c\u540e\u9762\u7684\u6570\u636e\u5168\u90e8\u662fBody\u3002 3.2.3 HTTP\u54cd\u5e94\u7684\u683c\u5f0f\uff1a \u00b6 200 OK Header1: Value1 Header2: Value2 Header3: Value3 body data goes here... HTTP\u54cd\u5e94\u5982\u679c\u5305\u542bbody\uff0c\u4e5f\u662f\u901a\u8fc7\\r\\n\\r\\n\u6765\u5206\u9694\u7684\u3002 \u8bf7\u518d\u6b21\u6ce8\u610f\uff0cBody\u7684\u6570\u636e\u7c7b\u578b\u7531Content-Type\u5934\u6765\u786e\u5b9a\uff0c\u5982\u679c\u662f\u7f51\u9875\uff0cBody\u5c31\u662f\u6587\u672c\uff0c\u5982\u679c\u662f\u56fe\u7247\uff0cBody\u5c31\u662f\u56fe\u7247\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5f53\u5b58\u5728Content-Encoding\u65f6\uff0cBody\u6570\u636e\u662f\u88ab\u538b\u7f29\u7684\uff0c\u6700\u5e38\u89c1\u7684\u538b\u7f29\u65b9\u5f0f\u662fgzip\uff0c\u6240\u4ee5\uff0c\u770b\u5230Content-Encoding: gzip\u65f6\uff0c\u9700\u8981\u5c06Body\u6570\u636e\u5148\u89e3\u538b\u7f29\uff0c\u624d\u80fd\u5f97\u5230\u771f\u6b63\u7684\u6570\u636e\u3002\u538b\u7f29\u7684\u76ee\u7684\u5728\u4e8e\u51cf\u5c11Body\u7684\u5927\u5c0f\uff0c\u52a0\u5feb\u7f51\u7edc\u4f20\u8f93\u3002 \u6d4f\u89c8\u5668---->\u670d\u52a1\u5668\u53d1\u9001\u7684\u8bf7\u6c42\u683c\u5f0f\u5982\u4e0b\uff1a GET / HTTP/1.1 //\u8bf7\u6c42\u7684\u65f6\u5019\u5fc5\u987b\u6709 Host: 127.0.0.1:8080 Connection: keep-alive Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36 Accept-Encoding: gzip, deflate, sdch Accept-Language: zh-CN,zh;q=0.8 \u670d\u52a1\u5668--->\u6d4f\u89c8\u5668\u56de\u9001\u7684\u6570\u636e\u683c\u5f0f\u5982\u4e0b: HTTP/1.1 200 OK //\u8fd4\u56de\u5fc5\u987b\u8981\u6709 Bdpagetype: 1 Bdqid: 0xe87cb3f700023783 Bduserid: 0 Cache-Control: private Connection: Keep-Alive Content-Encoding: gzip Content-Type: text/html; charset=utf-8 Cxy_all: baidu+55617f8533383cbe48d5d2b7dc84b7f0 Date: Fri, 20 Oct 2017 00:59:55 GMT Expires: Fri, 20 Oct 2017 00:59:11 GMT Server: BWS/1.1 Set-Cookie: BDSVRTM=0; path=/ Set-Cookie: BD_HOME=0; path=/ Set-Cookie: H_PS_PSSID=1463_21080_17001_20929; path=/; domain=.baidu.com Strict-Transport-Security: max-age=172800 Vary: Accept-Encoding X-Powered-By: HPHP X-Ua-Compatible: IE=Edge,chrome=1 Transfer-Encoding: chunked < h1 > haha </ h1 > //\u8fd9\u662f\u8fd4\u56de\u7684\u5185\u5bb9 9.2. Web\u9759\u6001\u670d\u52a1\u5668-1-\u663e\u793a\u56fa\u5b9a\u7684\u9875\u9762 \u00b6 Web\u9759\u6001\u670d\u52a1\u5668-1-\u663e\u793a\u56fa\u5b9a\u7684\u9875\u9762 \u00b6 #coding=utf-8 import socket def handle_client ( client_socket ): \"\u4e3a\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1\" recv_data = client_socket . recv ( 1024 ) . decode ( \"utf-8\" ) request_header_lines = recv_data . splitlines () for line in request_header_lines : print ( line ) # \u7ec4\u7ec7\u76f8\u5e94 \u5934\u4fe1\u606f(header) response_headers = \"HTTP/1.1 200 OK \\r\\n \" # 200\u8868\u793a\u627e\u5230\u8fd9\u4e2a\u8d44\u6e90 response_headers += \" \\r\\n \" # \u7528\u4e00\u4e2a\u7a7a\u7684\u884c\u4e0ebody\u8fdb\u884c\u9694\u5f00 # \u7ec4\u7ec7 \u5185\u5bb9(body) response_body = \"hello world\" response = response_headers + response_body client_socket . send ( response . encode ( \"utf-8\" )) client_socket . close () def main (): \"\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u4e3b\u63a7\u5236\u5165\u53e3\" server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # \u8bbe\u7f6e\u5f53\u670d\u52a1\u5668\u5148close \u5373\u670d\u52a1\u5668\u7aef4\u6b21\u6325\u624b\u4e4b\u540e\u8d44\u6e90\u80fd\u591f\u7acb\u5373\u91ca\u653e\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\uff0c\u4e0b\u6b21\u8fd0\u884c\u7a0b\u5e8f\u65f6 \u53ef\u4ee5\u7acb\u5373\u7ed1\u5b9a7788\u7aef\u53e3 server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) server_socket . bind (( \"\" , 7788 )) server_socket . listen ( 128 ) while True : client_socket , client_addr = server_socket . accept () handle_client ( client_socket ) if __name__ == \"__main__\" : main () \u670d\u52a1\u5668\u7aef \u00b6 \u5ba2\u6237\u7aef \u00b6 \u624b\u6572\u4ee3\u7801: # -*- coding: utf-8 -*- import socket def service_client ( new_socket ): \"\"\"\u4e3a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1.\u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42,\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # .... request = new_socket . recv ( 1024 ) #\u63a5\u6536\u5ba2\u6237\u7aef\u7684\u6570\u636e print ( request ) # 2.\u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e # 2.1\u51c6\u5907\u7ed9\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u6570\u636e --header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u7ed9\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u6570\u636e --boday response += \"hehe\" new_socket . send ( response . encode ( \"gbk\" )) #\u6570\u636e\u7684\u8fd4\u56de #\u5173\u95ed\u5957\u63a5\u5b57 new_socket . close () def main (): \"\"\"\u7528\u6765\u8fdb\u884c\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1.\u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #AF_INET ipv4 stream\u65f6\u6d41\u7684\u610f\u601d # \u8bbe\u7f6e\u5f53\u670d\u52a1\u5668\u5148close \u5373\u670d\u52a1\u5668\u7aef4\u6b21\u6325\u624b\u4e4b\u540e\u8d44\u6e90\u80fd\u591f\u7acb\u5373\u91ca\u653e\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\uff0c\u4e0b\u6b21\u8fd0\u884c\u7a0b\u5e8f\u65f6 \u53ef\u4ee5\u7acb\u5373\u7ed1\u5b9a7890\u7aef\u53e3 server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) #\u7ed1\u5b9a\u9ed8\u8ba4\u7684ip\u4ee5\u53ca\u7aef\u53e3\u53f7 # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1 service_client ( new_socket ) #\u5c06\u63a5\u6536\u5230\u7684\u5ba2\u6237\u5bf9\u8c61\u8fdb\u884c\u63a5\u6536 # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () 9.3. Web\u9759\u6001\u670d\u52a1\u5668-2-\u663e\u793a\u9700\u8981\u7684\u9875\u9762 \u00b6 Web\u9759\u6001\u670d\u52a1\u5668-2-\u663e\u793a\u9700\u8981\u7684\u9875\u9762 \u00b6 03-\u8fd4\u56deinde.html\u9875\u9762.py import socket def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) print ( \">>>\" * 50 ) print ( request ) # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" f = open ( \"./html/index.html\" , \"rb\" ) html_content = f . read () f . close () # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 service_client ( new_socket ) # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u670d\u52a1\u5668\u7aef \u00b6 \u5ba2\u6237\u7aef \u00b6 04-\u6839\u636e\u7528\u6237\u7684\u9700\u6c42\u8fd4\u56de\u76f8\u5e94\u7684\u9875\u9762.py import socket import re def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) #\u5bf9\u63a5\u6536\u7684\u6570\u636e\u8fdb\u884c\u89e3\u7801 # print(\">>>\"*50) # print(request) request_lines = request . splitlines () #\u5c06\u5b57\u7b26\u4e32\u6bcf\u4e00\u884c\u5207\u5272\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32 print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) #[^/]+\u5339\u914d\u4e0d\u662f/\u6709\u591a\u4e2a,[^ ]* \u5339\u914d\u975e\u7a7a\u683c\u5b57\u7b26\u96f6\u4e2a\u6216\u591a\u4e2a #\u5982\u679c\u5339\u914d\u5230\u4e86\u6570\u636e\u7684\u8bdd\u90a3\u4e48\u5c31\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 #\u5c1d\u8bd5\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6 try : f = open ( \"./html\" + file_name , \"rb\" ) except : #try\u4e0d\u80fd\u6b63\u5e38\u7684\u6267\u884c\u5c31\u662f\u8bf4\u660e\u6ca1\u6709\u8fd9\u4e2a\u6587\u4ef6\u7684\u8bdd\u5c31\u8fd4\u56de404 response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : #else\u6267\u884c\u7684\u6761\u4ef6\u662ftry\u80fd\u591f\u6b63\u5e38\u6267\u884c #finally\u662f\u4e00\u5b9a\u4f1a\u6267\u884c html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 service_client ( new_socket ) # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u66f4\u8be6\u7ec6\u7684\u4ee3\u7801 #coding=utf-8 import socket import re def handle_client ( client_socket ): \"\u4e3a\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1\" recv_data = client_socket . recv ( 1024 ) . decode ( 'utf-8' , errors = \"ignore\" ) request_header_lines = recv_data . splitlines () for line in request_header_lines : print ( line ) http_request_line = request_header_lines [ 0 ] get_file_name = re . match ( \"[^/]+(/[^ ]*)\" , http_request_line ) . group ( 1 ) print ( \"file name is ===> %s \" % get_file_name ) # for test # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u8bbf\u95ee\u54ea\u4e2a\u9875\u9762\u3002\u4f8b\u5982index.html # GET / HTTP/1.1 if get_file_name == \"/\" : get_file_name = DOCUMENTS_ROOT + \"/index.html\" else : get_file_name = DOCUMENTS_ROOT + get_file_name print ( \"file name is ===2> %s \" % get_file_name ) #for test try : f = open ( get_file_name , \"rb\" ) except IOError : # 404\u8868\u793a\u6ca1\u6709\u8fd9\u4e2a\u9875\u9762 response_headers = \"HTTP/1.1 404 not found \\r\\n \" response_headers += \" \\r\\n \" response_body = \"====sorry ,file not found====\" else : response_headers = \"HTTP/1.1 200 OK \\r\\n \" response_headers += \" \\r\\n \" response_body = f . read () f . close () finally : # \u56e0\u4e3a\u5934\u4fe1\u606f\u5728\u7ec4\u7ec7\u7684\u65f6\u5019\uff0c\u662f\u6309\u7167\u5b57\u7b26\u4e32\u7ec4\u7ec7\u7684\uff0c\u4e0d\u80fd\u4e0e\u4ee5\u4e8c\u8fdb\u5236\u6253\u5f00\u6587\u4ef6\u8bfb\u53d6\u7684\u6570\u636e\u5408\u5e76\uff0c\u56e0\u6b64\u5206\u5f00\u53d1\u9001 # \u5148\u53d1\u9001response\u7684\u5934\u4fe1\u606f client_socket . send ( response_headers . encode ( 'utf-8' )) # \u518d\u53d1\u9001body client_socket . send ( response_body ) client_socket . close () def main (): \"\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u4e3b\u63a7\u5236\u5165\u53e3\" server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) server_socket . bind (( \"\" , 7788 )) server_socket . listen ( 128 ) while True : client_socket , clien_cAddr = server_socket . accept () handle_client ( client_socket ) #\u8fd9\u91cc\u914d\u7f6e\u670d\u52a1\u5668 DOCUMENTS_ROOT = \"./html\" if __name__ == \"__main__\" : main () 9.4. Web\u9759\u6001\u670d\u52a1\u5668-3-\u591a\u8fdb\u7a0b \u00b6 import socket import re import multiprocessing #\u5bfc\u5165\u591a\u8fdb\u7a0b\u7684\u5305 def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 #\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b,\u76ee\u6807\u662fservice_client\u51fd\u6570,\u4f20\u5165\u7684\u53c2\u6570\u662f\u65b0\u7684\u5ba2\u6237\u7aef,\u6ce8\u610f\u7684\u662f\u540e\u9762\u6709\u4e00\u4e2a, p = multiprocessing . Process ( target = service_client , args = ( new_socket ,)) p . start () new_socket . close () #\u8fd9\u91cc\u4e00\u5b9a\u8981\u8fdb\u884c\u5ba2\u6237\u7aef\u7684\u5173\u95ed,\u56e0\u4e3a\u5b50\u8fdb\u7a0b\u590d\u5236\u4e86\u4e00\u4efd\u7236\u8fdb\u7a0b(new_socket)\u6240\u4ee5\u5148\u628a\u7236\u7684\u5173\u4e86,\u540e\u9762\u5b50\u8fdb\u7a0b\u5173\u95ed\u7684\u65f6\u5019\u624d\u80fd\u5173\u95ed # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u4e3a\u4ec0\u4e48\u7236\u8fdb\u7a0b\u4e5f\u8981\u8fdb\u884c\u5ba2\u6237\u7aef\u7684\u5173\u95ed,\u662f\u56e0\u4e3a\u5b50\u8fdb\u7a0b\u7236\u8fdb\u7a0b\u90fd\u4f1a\u6307\u5411\u8fd9\u4e2a\u5ba2\u6237\u7aef,\u7236\u8fdb\u7a0b\u5173\u95ed\u4e0d\u4f1a\u771f\u7684\u5173\u4e86\u5ba2\u6237\u7aef\u53ea\u7528\u5b50\u8fdb\u7a0b\u5173\u95ed\u4e86\u4e4b\u540e\u624d\u4f1a\u771f\u7684\u5173\u95ed\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u56db\u6b21\u6325\u624b\u7684\u64cd\u4f5c. \u66f4\u52a0\u8be6\u7ec6\u7684\u4ee3\u7801 #coding=utf-8 import socket import re import multiprocessing class WSGIServer ( object ): def __init__ ( self , server_address ): # \u521b\u5efa\u4e00\u4e2atcp\u5957\u63a5\u5b57 self . listen_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # \u5141\u8bb8\u7acb\u5373\u4f7f\u7528\u4e0a\u6b21\u7ed1\u5b9a\u7684port self . listen_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # \u7ed1\u5b9a self . listen_socket . bind ( server_address ) # \u53d8\u4e3a\u88ab\u52a8\uff0c\u5e76\u5236\u5b9a\u961f\u5217\u7684\u957f\u5ea6 self . listen_socket . listen ( 128 ) def serve_forever ( self ): \"\u5faa\u73af\u8fd0\u884cweb\u670d\u52a1\u5668\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u94fe\u63a5\u5e76\u4e3a\u5ba2\u6237\u7aef\u670d\u52a1\" while True : # \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u5230\u6765 client_socket , client_address = self . listen_socket . accept () print ( client_address ) # for test new_process = multiprocessing . Process ( target = self . handleRequest , args = ( client_socket ,)) new_process . start () # \u56e0\u4e3a\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u590d\u5236\u4e86\u7236\u8fdb\u7a0b\u7684\u5957\u63a5\u5b57\u7b49\u8d44\u6e90\uff0c\u6240\u4ee5\u7236\u8fdb\u7a0b\u8c03\u7528close\u4e0d\u4f1a\u5c06\u4ed6\u4eec\u5bf9\u5e94\u7684\u8fd9\u4e2a\u94fe\u63a5\u5173\u95ed\u7684 client_socket . close () def handleRequest ( self , client_socket ): \"\u7528\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\uff0c\u4e3a\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1\" recv_data = client_socket . recv ( 1024 ) . decode ( 'utf-8' ) print ( recv_data ) requestHeaderLines = recv_data . splitlines () for line in requestHeaderLines : print ( line ) request_line = requestHeaderLines [ 0 ] get_file_name = re . match ( \"[^/]+(/[^ ]*)\" , request_line ) . group ( 1 ) print ( \"file name is ===> %s \" % get_file_name ) # for test if get_file_name == \"/\" : get_file_name = DOCUMENTS_ROOT + \"/index.html\" else : get_file_name = DOCUMENTS_ROOT + get_file_name print ( \"file name is ===2> %s \" % get_file_name ) # for test try : f = open ( get_file_name , \"rb\" ) except IOError : response_header = \"HTTP/1.1 404 not found \\r\\n \" response_header += \" \\r\\n \" response_body = \"====sorry ,file not found====\" else : response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \" \\r\\n \" response_body = f . read () f . close () finally : client_socket . send ( response_header . encode ( 'utf-8' )) client_socket . send ( response_body ) client_socket . close () # \u8bbe\u5b9a\u670d\u52a1\u5668\u7684\u7aef\u53e3 SERVER_ADDR = ( HOST , PORT ) = \"\" , 8888 # \u8bbe\u7f6e\u670d\u52a1\u5668\u670d\u52a1\u9759\u6001\u8d44\u6e90\u65f6\u7684\u8def\u5f84 DOCUMENTS_ROOT = \"./html\" def main (): httpd = WSGIServer ( SERVER_ADDR ) print ( \"web Server: Serving HTTP on port %d ... \\n \" % PORT ) httpd . serve_forever () if __name__ == \"__main__\" : main () 9.5. Web\u9759\u6001\u670d\u52a1\u5668-4-\u591a\u7ebf\u7a0b \u00b6 Web\u9759\u6001\u670d\u52a1\u5668-4-\u591a\u7ebf\u7a0b \u00b6 \u4f7f\u7528\u7ebf\u7a0b\u7684\u65f6\u5019\u662f\u4e0d\u7528\u5728\u4e3b\u4ee3\u7801\u4e2d\u8fdb\u884c\u5ba2\u6237\u7aef\u7684\u5173\u95ed,\u76f4\u63a5\u5728\u7ebf\u7a0b\u4e2d\u8fdb\u884c\u5173\u95ed\u5c31\u597d\u4e86 import socket import re import threading #\u5bfc\u5165\u7684\u662f\u591a\u7ebf\u7a0b\u7684\u5305 def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = threading . Thread ( target = service_client , args = ( new_socket ,)) #\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u8ddf\u8fdb\u7a0b\u4f20\u9012\u7684\u53c2\u6570\u90fd\u662f\u4e00\u6837\u7684 p . start () # new_socket.close() #\u7ebf\u7a0b\u4e0d\u9700\u8981\u8fdb\u884c\u5ba2\u6237\u7aef\u7684\u5173\u95ed,\u7ebf\u7a0b\u91cc\u8fdb\u884c\u5173\u95ed\u5c31\u597d\u4e86,\u8ddf\u8fdb\u7a0b\u8fdb\u884c\u533a\u5206 # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u66f4\u52a0\u8be6\u7ec6\u7684\u4ee3\u7801 #coding=utf-8 import socket import re import threading class WSGIServer ( object ): def __init__ ( self , server_address ): # \u521b\u5efa\u4e00\u4e2atcp\u5957\u63a5\u5b57 self . listen_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # \u5141\u8bb8\u7acb\u5373\u4f7f\u7528\u4e0a\u6b21\u7ed1\u5b9a\u7684port self . listen_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # \u7ed1\u5b9a self . listen_socket . bind ( server_address ) # \u53d8\u4e3a\u88ab\u52a8\uff0c\u5e76\u5236\u5b9a\u961f\u5217\u7684\u957f\u5ea6 self . listen_socket . listen ( 128 ) def serve_forever ( self ): \"\u5faa\u73af\u8fd0\u884cweb\u670d\u52a1\u5668\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u94fe\u63a5\u5e76\u4e3a\u5ba2\u6237\u7aef\u670d\u52a1\" while True : # \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u5230\u6765 client_socket , client_address = self . listen_socket . accept () print ( client_address ) new_process = threading . Thread ( target = self . handleRequest , args = ( client_socket ,)) new_process . start () # \u56e0\u4e3a\u7ebf\u7a0b\u662f\u5171\u4eab\u540c\u4e00\u4e2a\u5957\u63a5\u5b57\uff0c\u6240\u4ee5\u4e3b\u7ebf\u7a0b\u4e0d\u80fd\u5173\u95ed\uff0c\u5426\u5219\u5b50\u7ebf\u7a0b\u5c31\u4e0d\u80fd\u518d\u4f7f\u7528\u8fd9\u4e2a\u5957\u63a5\u5b57\u4e86 # client_socket.close() def handleRequest ( self , client_socket ): \"\u7528\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\uff0c\u4e3a\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1\" recv_data = client_socket . recv ( 1024 ) . decode ( 'utf-8' ) print ( recv_data ) requestHeaderLines = recv_data . splitlines () for line in requestHeaderLines : print ( line ) request_line = requestHeaderLines [ 0 ] get_file_name = re . match ( \"[^/]+(/[^ ]*)\" , request_line ) . group ( 1 ) print ( \"file name is ===> %s \" % get_file_name ) # for test if get_file_name == \"/\" : get_file_name = DOCUMENTS_ROOT + \"/index.html\" else : get_file_name = DOCUMENTS_ROOT + get_file_name print ( \"file name is ===2> %s \" % get_file_name ) # for test try : f = open ( get_file_name , \"rb\" ) except IOError : response_header = \"HTTP/1.1 404 not found \\r\\n \" response_header += \" \\r\\n \" response_body = \"====sorry ,file not found====\" else : response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \" \\r\\n \" response_body = f . read () f . close () finally : client_socket . send ( response_header . encode ( 'utf-8' )) client_socket . send ( response_body ) client_socket . close () # \u8bbe\u5b9a\u670d\u52a1\u5668\u7684\u7aef\u53e3 SERVER_ADDR = ( HOST , PORT ) = \"\" , 8888 # \u8bbe\u7f6e\u670d\u52a1\u5668\u670d\u52a1\u9759\u6001\u8d44\u6e90\u65f6\u7684\u8def\u5f84 DOCUMENTS_ROOT = \"./html\" def main (): httpd = WSGIServer ( SERVER_ADDR ) print ( \"web Server: Serving HTTP on port %d ... \\n \" % PORT ) httpd . serve_forever () if __name__ == \"__main__\" : main () \u534f\u7a0b\u7684\u5b9e\u73b0 \u00b6 import socket import re import gevent #\u5bfc\u5165\u534f\u7a0b\u7684\u5305 from gevent import monkey monkey . patch_all () def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 gevent . spawn ( service_client , new_socket ) #\u534f\u7a0b\u7684\u5b9e\u73b0\u8fd9\u91cc\u5b9e\u73b0\u7684\u8ddf\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u8fd8\u662f\u4e0d\u4e00\u6837\u7684,\u76f4\u63a5\u4f20\u9012\u51fd\u6570\u8ddf\u5ba2\u6237\u7aef # new_socket.close() #\u534f\u7a0b\u8ddf\u7ebf\u7a0b\u90fd\u662f\u5171\u4eab\u7684\u56e0\u6b64\u4e0d\u7528\u8fdb\u884c\u5173\u95ed # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main ()","title":"9.1. http\u534f\u8bae"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#91-http","text":"","title":"9.1. http\u534f\u8bae"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#http","text":"","title":"HTTP\u534f\u8bae\u7b80\u4ecb"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#146","text":"\u5728Web\u5e94\u7528\u4e2d\uff0c\u670d\u52a1\u5668\u628a\u7f51\u9875\u4f20\u7ed9\u6d4f\u89c8\u5668\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u7f51\u9875\u7684HTML\u4ee3\u7801\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\uff0c\u8ba9\u6d4f\u89c8\u5668\u663e\u793a\u51fa\u6765\u3002\u800c\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4f20\u8f93\u534f\u8bae\u662fHTTP\uff0c\u6240\u4ee5\uff1a HTML\u662f\u4e00\u79cd\u7528\u6765\u5b9a\u4e49\u7f51\u9875\u7684\u6587\u672c\uff0c\u4f1aHTML\uff0c\u5c31\u53ef\u4ee5\u7f16\u5199\u7f51\u9875\uff1b HTTP\u662f\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93HTML\u7684\u534f\u8bae\uff0c\u7528\u4e8e\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u7684\u901a\u4fe1\u3002 Chrome\u6d4f\u89c8\u5668\u63d0\u4f9b\u4e86\u4e00\u5957\u5b8c\u6574\u5730\u8c03\u8bd5\u5de5\u5177\uff0c\u975e\u5e38\u9002\u5408Web\u5f00\u53d1\u3002 \u5b89\u88c5\u597dChrome\u6d4f\u89c8\u5668\u540e\uff0c\u6253\u5f00Chrome\uff0c\u5728\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u89c6\u56fe\u201d\uff0c\u201c\u5f00\u53d1\u8005\u201d\uff0c\u201c\u5f00\u53d1\u8005\u5de5\u5177\u201d\uff0c\u5c31\u53ef\u4ee5\u663e\u793a\u5f00\u53d1\u8005\u5de5\u5177\uff1a","title":"1. \u4f7f\u7528\u8c37\u6b4c/\u706b\u72d0\u6d4f\u89c8\u5668\u5206\u6790"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#_1","text":"Elements\u663e\u793a\u7f51\u9875\u7684\u7ed3\u6784 Network\u663e\u793a\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u7684\u901a\u4fe1 \u6211\u4eec\u70b9Network\uff0c\u786e\u4fdd\u7b2c\u4e00\u4e2a\u5c0f\u7ea2\u706f\u4eae\u7740\uff0cChrome\u5c31\u4f1a\u8bb0\u5f55\u6240\u6709\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\uff1a","title":"\u8bf4\u660e"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#246-http","text":"\u5f53\u6211\u4eec\u5728\u5730\u5740\u680f\u8f93\u5165www.sina.com\u65f6\uff0c\u6d4f\u89c8\u5668\u5c06\u663e\u793a\u65b0\u6d6a\u7684\u9996\u9875\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6d4f\u89c8\u5668\u90fd\u5e72\u4e86\u54ea\u4e9b\u4e8b\u60c5\u5462\uff1f\u901a\u8fc7Network\u7684\u8bb0\u5f55\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u3002\u5728Network\u4e2d\uff0c\u627e\u5230www.sina.com\u90a3\u6761\u8bb0\u5f55\uff0c\u70b9\u51fb\uff0c\u53f3\u4fa7\u5c06\u663e\u793aRequest Headers\uff0c\u70b9\u51fb\u53f3\u4fa7\u7684view source\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u770b\u5230\u6d4f\u89c8\u5668\u53d1\u7ed9\u65b0\u6d6a\u670d\u52a1\u5668\u7684\u8bf7\u6c42\uff1a","title":"2. http\u534f\u8bae\u7684\u5206\u6790"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#21","text":"","title":"2.1 \u6d4f\u89c8\u5668\u8bf7\u6c42"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#_2","text":"\u6700\u4e3b\u8981\u7684\u5934\u4e24\u884c\u5206\u6790\u5982\u4e0b\uff0c\u7b2c\u4e00\u884c\uff1a GET / HTTP/1.1 GET\u8868\u793a\u4e00\u4e2a\u8bfb\u53d6\u8bf7\u6c42\uff0c\u5c06\u4ece\u670d\u52a1\u5668\u83b7\u5f97\u7f51\u9875\u6570\u636e\uff0c/\u8868\u793aURL\u7684\u8def\u5f84\uff0cURL\u603b\u662f\u4ee5/\u5f00\u5934\uff0c/\u5c31\u8868\u793a\u9996\u9875\uff0c\u6700\u540e\u7684HTTP/1.1\u6307\u793a\u91c7\u7528\u7684HTTP\u534f\u8bae\u7248\u672c\u662f1.1\u3002\u76ee\u524dHTTP\u534f\u8bae\u7684\u7248\u672c\u5c31\u662f1.1\uff0c\u4f46\u662f\u5927\u90e8\u5206\u670d\u52a1\u5668\u4e5f\u652f\u63011.0\u7248\u672c\uff0c\u4e3b\u8981\u533a\u522b\u5728\u4e8e1.1\u7248\u672c\u5141\u8bb8\u591a\u4e2aHTTP\u8bf7\u6c42\u590d\u7528\u4e00\u4e2aTCP\u8fde\u63a5\uff0c\u4ee5\u52a0\u5feb\u4f20\u8f93\u901f\u5ea6\u3002 \u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\uff0c\u6bcf\u4e00\u884c\u90fd\u7c7b\u4f3c\u4e8eXxx: abcdefg\uff1a Host: www.sina.com \u8868\u793a\u8bf7\u6c42\u7684\u57df\u540d\u662fwww.sina.com\u3002\u5982\u679c\u4e00\u53f0\u670d\u52a1\u5668\u6709\u591a\u4e2a\u7f51\u7ad9\uff0c\u670d\u52a1\u5668\u5c31\u9700\u8981\u901a\u8fc7Host\u6765\u533a\u5206\u6d4f\u89c8\u5668\u8bf7\u6c42\u7684\u662f\u54ea\u4e2a\u7f51\u7ad9\u3002","title":"\u8bf4\u660e"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#22","text":"\u7ee7\u7eed\u5f80\u4e0b\u627e\u5230Response Headers\uff0c\u70b9\u51fbview source\uff0c\u663e\u793a\u670d\u52a1\u5668\u8fd4\u56de\u7684\u539f\u59cb\u54cd\u5e94\u6570\u636e\uff1a HTTP\u54cd\u5e94\u5206\u4e3aHeader\u548cBody\u4e24\u90e8\u5206\uff08Body\u662f\u53ef\u9009\u9879\uff09\uff0c\u6211\u4eec\u5728Network\u4e2d\u770b\u5230\u7684Header\u6700\u91cd\u8981\u7684\u51e0\u884c\u5982\u4e0b\uff1a HTTP/1.1 200 OK 200\u8868\u793a\u4e00\u4e2a\u6210\u529f\u7684\u54cd\u5e94\uff0c\u540e\u9762\u7684OK\u662f\u8bf4\u660e\u3002 \u5982\u679c\u8fd4\u56de\u7684\u4e0d\u662f200\uff0c\u90a3\u4e48\u5f80\u5f80\u6709\u5176\u4ed6\u7684\u529f\u80fd\uff0c\u4f8b\u5982 \u5931\u8d25\u7684\u54cd\u5e94\u6709404 Not Found\uff1a\u7f51\u9875\u4e0d\u5b58\u5728 500 Internal Server Error\uff1a\u670d\u52a1\u5668\u5185\u90e8\u51fa\u9519 ...\u7b49\u7b49... Content-Type: text/html Content-Type\u6307\u793a\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u662ftext/html\u8868\u793aHTML\u7f51\u9875\u3002 \u8bf7\u6ce8\u610f\uff0c\u6d4f\u89c8\u5668\u5c31\u662f\u4f9d\u9760Content-Type\u6765\u5224\u65ad\u54cd\u5e94\u7684\u5185\u5bb9\u662f\u7f51\u9875\u8fd8\u662f\u56fe\u7247\uff0c\u662f\u89c6\u9891\u8fd8\u662f\u97f3\u4e50\u3002\u6d4f\u89c8\u5668\u5e76\u4e0d\u9760URL\u6765\u5224\u65ad\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\uff0c\u5373\u4f7fURL\u662f http://www.baidu.com/meimei.jpg \uff0c\u5b83\u4e5f\u4e0d\u4e00\u5b9a\u5c31\u662f\u56fe\u7247\u3002 HTTP\u54cd\u5e94\u7684Body\u5c31\u662fHTML\u6e90\u7801\uff0c\u6211\u4eec\u5728\u83dc\u5355\u680f\u9009\u62e9\u201c\u89c6\u56fe\u201d\uff0c\u201c\u5f00\u53d1\u8005\u201d\uff0c\u201c\u67e5\u770b\u7f51\u9875\u6e90\u7801\u201d\u5c31\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u67e5\u770bHTML\u6e90\u7801\uff1a","title":"2.2 \u670d\u52a1\u5668\u54cd\u5e94"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#_3","text":"\u5f53\u6d4f\u89c8\u5668\u8bfb\u53d6\u5230\u65b0\u6d6a\u9996\u9875\u7684HTML\u6e90\u7801\u540e\uff0c\u5b83\u4f1a\u89e3\u6790HTML\uff0c\u663e\u793a\u9875\u9762\uff0c\u7136\u540e\uff0c\u6839\u636eHTML\u91cc\u9762\u7684\u5404\u79cd\u94fe\u63a5\uff0c\u518d\u53d1\u9001HTTP\u8bf7\u6c42\u7ed9\u65b0\u6d6a\u670d\u52a1\u5668\uff0c\u62ff\u5230\u76f8\u5e94\u7684\u56fe\u7247\u3001\u89c6\u9891\u3001Flash\u3001JavaScript\u811a\u672c\u3001CSS\u7b49\u5404\u79cd\u8d44\u6e90\uff0c\u6700\u7ec8\u663e\u793a\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u9875\u9762\u3002\u6240\u4ee5\u6211\u4eec\u5728Network\u4e0b\u9762\u80fd\u770b\u5230\u5f88\u591a\u989d\u5916\u7684HTTP\u8bf7\u6c42\u3002","title":"\u6d4f\u89c8\u5668\u89e3\u6790\u8fc7\u7a0b"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#346","text":"","title":"3. \u603b\u7ed3"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#31-http","text":"\u8ddf\u8e2a\u4e86\u65b0\u6d6a\u7684\u9996\u9875\uff0c\u6211\u4eec\u6765\u603b\u7ed3\u4e00\u4e0bHTTP\u8bf7\u6c42\u7684\u6d41\u7a0b\uff1a","title":"3.1 HTTP\u8bf7\u6c42"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#311-1http","text":"\u65b9\u6cd5\uff1aGET\u8fd8\u662fPOST\uff0cGET\u4ec5\u8bf7\u6c42\u8d44\u6e90\uff0cPOST\u4f1a\u9644\u5e26\u7528\u6237\u6570\u636e\uff1b \u8def\u5f84\uff1a/full/url/path\uff1b \u57df\u540d\uff1a\u7531Host\u5934\u6307\u5b9a\uff1aHost: www.sina.com \u4ee5\u53ca\u5176\u4ed6\u76f8\u5173\u7684Header\uff1b \u5982\u679c\u662fPOST\uff0c\u90a3\u4e48\u8bf7\u6c42\u8fd8\u5305\u62ec\u4e00\u4e2aBody\uff0c\u5305\u542b\u7528\u6237\u6570\u636e","title":"3.1.1 \u6b65\u9aa41\uff1a\u6d4f\u89c8\u5668\u9996\u5148\u5411\u670d\u52a1\u5668\u53d1\u9001HTTP\u8bf7\u6c42\uff0c\u8bf7\u6c42\u5305\u62ec\uff1a"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#311-2http","text":"\u54cd\u5e94\u4ee3\u7801\uff1a200\u8868\u793a\u6210\u529f\uff0c3xx\u8868\u793a\u91cd\u5b9a\u5411\uff0c4xx\u8868\u793a\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u8bf7\u6c42\u6709\u9519\u8bef\uff0c5xx\u8868\u793a\u670d\u52a1\u5668\u7aef\u5904\u7406\u65f6\u53d1\u751f\u4e86\u9519\u8bef\uff1b \u54cd\u5e94\u7c7b\u578b\uff1a\u7531Content-Type\u6307\u5b9a\uff1b \u4ee5\u53ca\u5176\u4ed6\u76f8\u5173\u7684Header\uff1b \u901a\u5e38\u670d\u52a1\u5668\u7684HTTP\u54cd\u5e94\u4f1a\u643a\u5e26\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u6709\u4e00\u4e2aBody\uff0c\u5305\u542b\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u7f51\u9875\u7684HTML\u6e90\u7801\u5c31\u5728Body\u4e2d\u3002","title":"3.1.1 \u6b65\u9aa42\uff1a\u670d\u52a1\u5668\u5411\u6d4f\u89c8\u5668\u8fd4\u56deHTTP\u54cd\u5e94\uff0c\u54cd\u5e94\u5305\u62ec\uff1a"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#311-3http12","text":"Web\u91c7\u7528\u7684HTTP\u534f\u8bae\u91c7\u7528\u4e86\u975e\u5e38\u7b80\u5355\u7684\u8bf7\u6c42-\u54cd\u5e94\u6a21\u5f0f\uff0c\u4ece\u800c\u5927\u5927\u7b80\u5316\u4e86\u5f00\u53d1\u3002\u5f53\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u9875\u9762\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728HTTP\u8bf7\u6c42\u4e2d\u628aHTML\u53d1\u9001\u51fa\u53bb\uff0c\u4e0d\u9700\u8981\u8003\u8651\u5982\u4f55\u9644\u5e26\u56fe\u7247\u3001\u89c6\u9891\u7b49\uff0c\u6d4f\u89c8\u5668\u5982\u679c\u9700\u8981\u8bf7\u6c42\u56fe\u7247\u548c\u89c6\u9891\uff0c\u5b83\u4f1a\u53d1\u9001\u53e6\u4e00\u4e2aHTTP\u8bf7\u6c42\uff0c\u56e0\u6b64\uff0c\u4e00\u4e2aHTTP\u8bf7\u6c42\u53ea\u5904\u7406\u4e00\u4e2a\u8d44\u6e90(\u6b64\u65f6\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3aTCP\u534f\u8bae\u4e2d\u7684\u77ed\u8fde\u63a5\uff0c\u6bcf\u4e2a\u94fe\u63a5\u53ea\u83b7\u53d6\u4e00\u4e2a\u8d44\u6e90\uff0c\u5982\u9700\u8981\u591a\u4e2a\u5c31\u9700\u8981\u5efa\u7acb\u591a\u4e2a\u94fe\u63a5) HTTP\u534f\u8bae\u540c\u65f6\u5177\u5907\u6781\u5f3a\u7684\u6269\u5c55\u6027\uff0c\u867d\u7136\u6d4f\u89c8\u5668\u8bf7\u6c42\u7684\u662f http://www.sina.com \u7684\u9996\u9875\uff0c\u4f46\u662f\u65b0\u6d6a\u5728HTML\u4e2d\u53ef\u4ee5\u94fe\u5165\u5176\u4ed6\u670d\u52a1\u5668\u7684\u8d44\u6e90\uff0c\u6bd4\u5982 <img src=\"http://i1.sinaimg.cn/home/2013/1008/U8455P30DT20131008135420.png\"> \uff0c\u4ece\u800c\u5c06\u8bf7\u6c42\u538b\u529b\u5206\u6563\u5230\u5404\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u5e76\u4e14\uff0c\u4e00\u4e2a\u7ad9\u70b9\u53ef\u4ee5\u94fe\u63a5\u5230\u5176\u4ed6\u7ad9\u70b9\uff0c\u65e0\u6570\u4e2a\u7ad9\u70b9\u4e92\u76f8\u94fe\u63a5\u8d77\u6765\uff0c\u5c31\u5f62\u6210\u4e86World Wide Web\uff0c\u7b80\u79f0WWW\u3002","title":"3.1.1 \u6b65\u9aa43\uff1a\u5982\u679c\u6d4f\u89c8\u5668\u8fd8\u9700\u8981\u7ee7\u7eed\u5411\u670d\u52a1\u5668\u8bf7\u6c42\u5176\u4ed6\u8d44\u6e90\uff0c\u6bd4\u5982\u56fe\u7247\uff0c\u5c31\u518d\u6b21\u53d1\u51faHTTP\u8bf7\u6c42\uff0c\u91cd\u590d\u6b65\u9aa41\u30012\u3002"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#32-http","text":"\u6bcf\u4e2aHTTP\u8bf7\u6c42\u548c\u54cd\u5e94\u90fd\u9075\u5faa\u76f8\u540c\u7684\u683c\u5f0f\uff0c\u4e00\u4e2aHTTP\u5305\u542bHeader\u548cBody\u4e24\u90e8\u5206\uff0c\u5176\u4e2dBody\u662f\u53ef\u9009\u7684\u3002 HTTP\u534f\u8bae\u662f\u4e00\u79cd\u6587\u672c\u534f\u8bae\uff0c\u6240\u4ee5\uff0c\u5b83\u7684\u683c\u5f0f\u4e5f\u975e\u5e38\u7b80\u5355\u3002","title":"3.2 HTTP\u683c\u5f0f"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#321-http-get","text":"GET /path HTTP/1.1 Header1: Value1 Header2: Value2 Header3: Value3 \u6bcf\u4e2aHeader\u4e00\u884c\u4e00\u4e2a\uff0c\u6362\u884c\u7b26\u662f\\r\\n\u3002","title":"3.2.1 HTTP GET\u8bf7\u6c42\u7684\u683c\u5f0f\uff1a"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#322-http-post","text":"POST /path HTTP/1.1 Header1: Value1 Header2: Value2 Header3: Value3 body data goes here... \u5f53\u9047\u5230\u8fde\u7eed\u4e24\u4e2a\\r\\n(\u6709\u4e00\u4e2a\u7a7a\u884c)\u65f6\uff0cHeader\u90e8\u5206\u7ed3\u675f\uff0c\u540e\u9762\u7684\u6570\u636e\u5168\u90e8\u662fBody\u3002","title":"3.2.2 HTTP POST\u8bf7\u6c42\u7684\u683c\u5f0f\uff1a"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#323-http","text":"200 OK Header1: Value1 Header2: Value2 Header3: Value3 body data goes here... HTTP\u54cd\u5e94\u5982\u679c\u5305\u542bbody\uff0c\u4e5f\u662f\u901a\u8fc7\\r\\n\\r\\n\u6765\u5206\u9694\u7684\u3002 \u8bf7\u518d\u6b21\u6ce8\u610f\uff0cBody\u7684\u6570\u636e\u7c7b\u578b\u7531Content-Type\u5934\u6765\u786e\u5b9a\uff0c\u5982\u679c\u662f\u7f51\u9875\uff0cBody\u5c31\u662f\u6587\u672c\uff0c\u5982\u679c\u662f\u56fe\u7247\uff0cBody\u5c31\u662f\u56fe\u7247\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5f53\u5b58\u5728Content-Encoding\u65f6\uff0cBody\u6570\u636e\u662f\u88ab\u538b\u7f29\u7684\uff0c\u6700\u5e38\u89c1\u7684\u538b\u7f29\u65b9\u5f0f\u662fgzip\uff0c\u6240\u4ee5\uff0c\u770b\u5230Content-Encoding: gzip\u65f6\uff0c\u9700\u8981\u5c06Body\u6570\u636e\u5148\u89e3\u538b\u7f29\uff0c\u624d\u80fd\u5f97\u5230\u771f\u6b63\u7684\u6570\u636e\u3002\u538b\u7f29\u7684\u76ee\u7684\u5728\u4e8e\u51cf\u5c11Body\u7684\u5927\u5c0f\uff0c\u52a0\u5feb\u7f51\u7edc\u4f20\u8f93\u3002 \u6d4f\u89c8\u5668---->\u670d\u52a1\u5668\u53d1\u9001\u7684\u8bf7\u6c42\u683c\u5f0f\u5982\u4e0b\uff1a GET / HTTP/1.1 //\u8bf7\u6c42\u7684\u65f6\u5019\u5fc5\u987b\u6709 Host: 127.0.0.1:8080 Connection: keep-alive Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36 Accept-Encoding: gzip, deflate, sdch Accept-Language: zh-CN,zh;q=0.8 \u670d\u52a1\u5668--->\u6d4f\u89c8\u5668\u56de\u9001\u7684\u6570\u636e\u683c\u5f0f\u5982\u4e0b: HTTP/1.1 200 OK //\u8fd4\u56de\u5fc5\u987b\u8981\u6709 Bdpagetype: 1 Bdqid: 0xe87cb3f700023783 Bduserid: 0 Cache-Control: private Connection: Keep-Alive Content-Encoding: gzip Content-Type: text/html; charset=utf-8 Cxy_all: baidu+55617f8533383cbe48d5d2b7dc84b7f0 Date: Fri, 20 Oct 2017 00:59:55 GMT Expires: Fri, 20 Oct 2017 00:59:11 GMT Server: BWS/1.1 Set-Cookie: BDSVRTM=0; path=/ Set-Cookie: BD_HOME=0; path=/ Set-Cookie: H_PS_PSSID=1463_21080_17001_20929; path=/; domain=.baidu.com Strict-Transport-Security: max-age=172800 Vary: Accept-Encoding X-Powered-By: HPHP X-Ua-Compatible: IE=Edge,chrome=1 Transfer-Encoding: chunked < h1 > haha </ h1 > //\u8fd9\u662f\u8fd4\u56de\u7684\u5185\u5bb9","title":"3.2.3 HTTP\u54cd\u5e94\u7684\u683c\u5f0f\uff1a"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#92-web-1-","text":"","title":"9.2. Web\u9759\u6001\u670d\u52a1\u5668-1-\u663e\u793a\u56fa\u5b9a\u7684\u9875\u9762"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#web-1-","text":"#coding=utf-8 import socket def handle_client ( client_socket ): \"\u4e3a\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1\" recv_data = client_socket . recv ( 1024 ) . decode ( \"utf-8\" ) request_header_lines = recv_data . splitlines () for line in request_header_lines : print ( line ) # \u7ec4\u7ec7\u76f8\u5e94 \u5934\u4fe1\u606f(header) response_headers = \"HTTP/1.1 200 OK \\r\\n \" # 200\u8868\u793a\u627e\u5230\u8fd9\u4e2a\u8d44\u6e90 response_headers += \" \\r\\n \" # \u7528\u4e00\u4e2a\u7a7a\u7684\u884c\u4e0ebody\u8fdb\u884c\u9694\u5f00 # \u7ec4\u7ec7 \u5185\u5bb9(body) response_body = \"hello world\" response = response_headers + response_body client_socket . send ( response . encode ( \"utf-8\" )) client_socket . close () def main (): \"\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u4e3b\u63a7\u5236\u5165\u53e3\" server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # \u8bbe\u7f6e\u5f53\u670d\u52a1\u5668\u5148close \u5373\u670d\u52a1\u5668\u7aef4\u6b21\u6325\u624b\u4e4b\u540e\u8d44\u6e90\u80fd\u591f\u7acb\u5373\u91ca\u653e\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\uff0c\u4e0b\u6b21\u8fd0\u884c\u7a0b\u5e8f\u65f6 \u53ef\u4ee5\u7acb\u5373\u7ed1\u5b9a7788\u7aef\u53e3 server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) server_socket . bind (( \"\" , 7788 )) server_socket . listen ( 128 ) while True : client_socket , client_addr = server_socket . accept () handle_client ( client_socket ) if __name__ == \"__main__\" : main ()","title":"Web\u9759\u6001\u670d\u52a1\u5668-1-\u663e\u793a\u56fa\u5b9a\u7684\u9875\u9762"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#_4","text":"","title":"\u670d\u52a1\u5668\u7aef"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#_5","text":"\u624b\u6572\u4ee3\u7801: # -*- coding: utf-8 -*- import socket def service_client ( new_socket ): \"\"\"\u4e3a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1.\u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42,\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # .... request = new_socket . recv ( 1024 ) #\u63a5\u6536\u5ba2\u6237\u7aef\u7684\u6570\u636e print ( request ) # 2.\u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e # 2.1\u51c6\u5907\u7ed9\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u6570\u636e --header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u7ed9\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u6570\u636e --boday response += \"hehe\" new_socket . send ( response . encode ( \"gbk\" )) #\u6570\u636e\u7684\u8fd4\u56de #\u5173\u95ed\u5957\u63a5\u5b57 new_socket . close () def main (): \"\"\"\u7528\u6765\u8fdb\u884c\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1.\u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #AF_INET ipv4 stream\u65f6\u6d41\u7684\u610f\u601d # \u8bbe\u7f6e\u5f53\u670d\u52a1\u5668\u5148close \u5373\u670d\u52a1\u5668\u7aef4\u6b21\u6325\u624b\u4e4b\u540e\u8d44\u6e90\u80fd\u591f\u7acb\u5373\u91ca\u653e\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\uff0c\u4e0b\u6b21\u8fd0\u884c\u7a0b\u5e8f\u65f6 \u53ef\u4ee5\u7acb\u5373\u7ed1\u5b9a7890\u7aef\u53e3 server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) #\u7ed1\u5b9a\u9ed8\u8ba4\u7684ip\u4ee5\u53ca\u7aef\u53e3\u53f7 # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1 service_client ( new_socket ) #\u5c06\u63a5\u6536\u5230\u7684\u5ba2\u6237\u5bf9\u8c61\u8fdb\u884c\u63a5\u6536 # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main ()","title":"\u5ba2\u6237\u7aef"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#93-web-2-","text":"","title":"9.3. Web\u9759\u6001\u670d\u52a1\u5668-2-\u663e\u793a\u9700\u8981\u7684\u9875\u9762"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#web-2-","text":"03-\u8fd4\u56deinde.html\u9875\u9762.py import socket def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) print ( \">>>\" * 50 ) print ( request ) # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" f = open ( \"./html/index.html\" , \"rb\" ) html_content = f . read () f . close () # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 service_client ( new_socket ) # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main ()","title":"Web\u9759\u6001\u670d\u52a1\u5668-2-\u663e\u793a\u9700\u8981\u7684\u9875\u9762"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#_6","text":"","title":"\u670d\u52a1\u5668\u7aef"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#_7","text":"04-\u6839\u636e\u7528\u6237\u7684\u9700\u6c42\u8fd4\u56de\u76f8\u5e94\u7684\u9875\u9762.py import socket import re def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) #\u5bf9\u63a5\u6536\u7684\u6570\u636e\u8fdb\u884c\u89e3\u7801 # print(\">>>\"*50) # print(request) request_lines = request . splitlines () #\u5c06\u5b57\u7b26\u4e32\u6bcf\u4e00\u884c\u5207\u5272\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32 print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) #[^/]+\u5339\u914d\u4e0d\u662f/\u6709\u591a\u4e2a,[^ ]* \u5339\u914d\u975e\u7a7a\u683c\u5b57\u7b26\u96f6\u4e2a\u6216\u591a\u4e2a #\u5982\u679c\u5339\u914d\u5230\u4e86\u6570\u636e\u7684\u8bdd\u90a3\u4e48\u5c31\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 #\u5c1d\u8bd5\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6 try : f = open ( \"./html\" + file_name , \"rb\" ) except : #try\u4e0d\u80fd\u6b63\u5e38\u7684\u6267\u884c\u5c31\u662f\u8bf4\u660e\u6ca1\u6709\u8fd9\u4e2a\u6587\u4ef6\u7684\u8bdd\u5c31\u8fd4\u56de404 response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : #else\u6267\u884c\u7684\u6761\u4ef6\u662ftry\u80fd\u591f\u6b63\u5e38\u6267\u884c #finally\u662f\u4e00\u5b9a\u4f1a\u6267\u884c html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 service_client ( new_socket ) # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u66f4\u8be6\u7ec6\u7684\u4ee3\u7801 #coding=utf-8 import socket import re def handle_client ( client_socket ): \"\u4e3a\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1\" recv_data = client_socket . recv ( 1024 ) . decode ( 'utf-8' , errors = \"ignore\" ) request_header_lines = recv_data . splitlines () for line in request_header_lines : print ( line ) http_request_line = request_header_lines [ 0 ] get_file_name = re . match ( \"[^/]+(/[^ ]*)\" , http_request_line ) . group ( 1 ) print ( \"file name is ===> %s \" % get_file_name ) # for test # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u8bbf\u95ee\u54ea\u4e2a\u9875\u9762\u3002\u4f8b\u5982index.html # GET / HTTP/1.1 if get_file_name == \"/\" : get_file_name = DOCUMENTS_ROOT + \"/index.html\" else : get_file_name = DOCUMENTS_ROOT + get_file_name print ( \"file name is ===2> %s \" % get_file_name ) #for test try : f = open ( get_file_name , \"rb\" ) except IOError : # 404\u8868\u793a\u6ca1\u6709\u8fd9\u4e2a\u9875\u9762 response_headers = \"HTTP/1.1 404 not found \\r\\n \" response_headers += \" \\r\\n \" response_body = \"====sorry ,file not found====\" else : response_headers = \"HTTP/1.1 200 OK \\r\\n \" response_headers += \" \\r\\n \" response_body = f . read () f . close () finally : # \u56e0\u4e3a\u5934\u4fe1\u606f\u5728\u7ec4\u7ec7\u7684\u65f6\u5019\uff0c\u662f\u6309\u7167\u5b57\u7b26\u4e32\u7ec4\u7ec7\u7684\uff0c\u4e0d\u80fd\u4e0e\u4ee5\u4e8c\u8fdb\u5236\u6253\u5f00\u6587\u4ef6\u8bfb\u53d6\u7684\u6570\u636e\u5408\u5e76\uff0c\u56e0\u6b64\u5206\u5f00\u53d1\u9001 # \u5148\u53d1\u9001response\u7684\u5934\u4fe1\u606f client_socket . send ( response_headers . encode ( 'utf-8' )) # \u518d\u53d1\u9001body client_socket . send ( response_body ) client_socket . close () def main (): \"\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u4e3b\u63a7\u5236\u5165\u53e3\" server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) server_socket . bind (( \"\" , 7788 )) server_socket . listen ( 128 ) while True : client_socket , clien_cAddr = server_socket . accept () handle_client ( client_socket ) #\u8fd9\u91cc\u914d\u7f6e\u670d\u52a1\u5668 DOCUMENTS_ROOT = \"./html\" if __name__ == \"__main__\" : main ()","title":"\u5ba2\u6237\u7aef"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#94-web-3-","text":"import socket import re import multiprocessing #\u5bfc\u5165\u591a\u8fdb\u7a0b\u7684\u5305 def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 #\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b,\u76ee\u6807\u662fservice_client\u51fd\u6570,\u4f20\u5165\u7684\u53c2\u6570\u662f\u65b0\u7684\u5ba2\u6237\u7aef,\u6ce8\u610f\u7684\u662f\u540e\u9762\u6709\u4e00\u4e2a, p = multiprocessing . Process ( target = service_client , args = ( new_socket ,)) p . start () new_socket . close () #\u8fd9\u91cc\u4e00\u5b9a\u8981\u8fdb\u884c\u5ba2\u6237\u7aef\u7684\u5173\u95ed,\u56e0\u4e3a\u5b50\u8fdb\u7a0b\u590d\u5236\u4e86\u4e00\u4efd\u7236\u8fdb\u7a0b(new_socket)\u6240\u4ee5\u5148\u628a\u7236\u7684\u5173\u4e86,\u540e\u9762\u5b50\u8fdb\u7a0b\u5173\u95ed\u7684\u65f6\u5019\u624d\u80fd\u5173\u95ed # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u4e3a\u4ec0\u4e48\u7236\u8fdb\u7a0b\u4e5f\u8981\u8fdb\u884c\u5ba2\u6237\u7aef\u7684\u5173\u95ed,\u662f\u56e0\u4e3a\u5b50\u8fdb\u7a0b\u7236\u8fdb\u7a0b\u90fd\u4f1a\u6307\u5411\u8fd9\u4e2a\u5ba2\u6237\u7aef,\u7236\u8fdb\u7a0b\u5173\u95ed\u4e0d\u4f1a\u771f\u7684\u5173\u4e86\u5ba2\u6237\u7aef\u53ea\u7528\u5b50\u8fdb\u7a0b\u5173\u95ed\u4e86\u4e4b\u540e\u624d\u4f1a\u771f\u7684\u5173\u95ed\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u56db\u6b21\u6325\u624b\u7684\u64cd\u4f5c. \u66f4\u52a0\u8be6\u7ec6\u7684\u4ee3\u7801 #coding=utf-8 import socket import re import multiprocessing class WSGIServer ( object ): def __init__ ( self , server_address ): # \u521b\u5efa\u4e00\u4e2atcp\u5957\u63a5\u5b57 self . listen_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # \u5141\u8bb8\u7acb\u5373\u4f7f\u7528\u4e0a\u6b21\u7ed1\u5b9a\u7684port self . listen_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # \u7ed1\u5b9a self . listen_socket . bind ( server_address ) # \u53d8\u4e3a\u88ab\u52a8\uff0c\u5e76\u5236\u5b9a\u961f\u5217\u7684\u957f\u5ea6 self . listen_socket . listen ( 128 ) def serve_forever ( self ): \"\u5faa\u73af\u8fd0\u884cweb\u670d\u52a1\u5668\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u94fe\u63a5\u5e76\u4e3a\u5ba2\u6237\u7aef\u670d\u52a1\" while True : # \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u5230\u6765 client_socket , client_address = self . listen_socket . accept () print ( client_address ) # for test new_process = multiprocessing . Process ( target = self . handleRequest , args = ( client_socket ,)) new_process . start () # \u56e0\u4e3a\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u590d\u5236\u4e86\u7236\u8fdb\u7a0b\u7684\u5957\u63a5\u5b57\u7b49\u8d44\u6e90\uff0c\u6240\u4ee5\u7236\u8fdb\u7a0b\u8c03\u7528close\u4e0d\u4f1a\u5c06\u4ed6\u4eec\u5bf9\u5e94\u7684\u8fd9\u4e2a\u94fe\u63a5\u5173\u95ed\u7684 client_socket . close () def handleRequest ( self , client_socket ): \"\u7528\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\uff0c\u4e3a\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1\" recv_data = client_socket . recv ( 1024 ) . decode ( 'utf-8' ) print ( recv_data ) requestHeaderLines = recv_data . splitlines () for line in requestHeaderLines : print ( line ) request_line = requestHeaderLines [ 0 ] get_file_name = re . match ( \"[^/]+(/[^ ]*)\" , request_line ) . group ( 1 ) print ( \"file name is ===> %s \" % get_file_name ) # for test if get_file_name == \"/\" : get_file_name = DOCUMENTS_ROOT + \"/index.html\" else : get_file_name = DOCUMENTS_ROOT + get_file_name print ( \"file name is ===2> %s \" % get_file_name ) # for test try : f = open ( get_file_name , \"rb\" ) except IOError : response_header = \"HTTP/1.1 404 not found \\r\\n \" response_header += \" \\r\\n \" response_body = \"====sorry ,file not found====\" else : response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \" \\r\\n \" response_body = f . read () f . close () finally : client_socket . send ( response_header . encode ( 'utf-8' )) client_socket . send ( response_body ) client_socket . close () # \u8bbe\u5b9a\u670d\u52a1\u5668\u7684\u7aef\u53e3 SERVER_ADDR = ( HOST , PORT ) = \"\" , 8888 # \u8bbe\u7f6e\u670d\u52a1\u5668\u670d\u52a1\u9759\u6001\u8d44\u6e90\u65f6\u7684\u8def\u5f84 DOCUMENTS_ROOT = \"./html\" def main (): httpd = WSGIServer ( SERVER_ADDR ) print ( \"web Server: Serving HTTP on port %d ... \\n \" % PORT ) httpd . serve_forever () if __name__ == \"__main__\" : main ()","title":"9.4. Web\u9759\u6001\u670d\u52a1\u5668-3-\u591a\u8fdb\u7a0b"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#95-web-4-","text":"","title":"9.5. Web\u9759\u6001\u670d\u52a1\u5668-4-\u591a\u7ebf\u7a0b"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#web-4-","text":"\u4f7f\u7528\u7ebf\u7a0b\u7684\u65f6\u5019\u662f\u4e0d\u7528\u5728\u4e3b\u4ee3\u7801\u4e2d\u8fdb\u884c\u5ba2\u6237\u7aef\u7684\u5173\u95ed,\u76f4\u63a5\u5728\u7ebf\u7a0b\u4e2d\u8fdb\u884c\u5173\u95ed\u5c31\u597d\u4e86 import socket import re import threading #\u5bfc\u5165\u7684\u662f\u591a\u7ebf\u7a0b\u7684\u5305 def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = threading . Thread ( target = service_client , args = ( new_socket ,)) #\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u8ddf\u8fdb\u7a0b\u4f20\u9012\u7684\u53c2\u6570\u90fd\u662f\u4e00\u6837\u7684 p . start () # new_socket.close() #\u7ebf\u7a0b\u4e0d\u9700\u8981\u8fdb\u884c\u5ba2\u6237\u7aef\u7684\u5173\u95ed,\u7ebf\u7a0b\u91cc\u8fdb\u884c\u5173\u95ed\u5c31\u597d\u4e86,\u8ddf\u8fdb\u7a0b\u8fdb\u884c\u533a\u5206 # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u66f4\u52a0\u8be6\u7ec6\u7684\u4ee3\u7801 #coding=utf-8 import socket import re import threading class WSGIServer ( object ): def __init__ ( self , server_address ): # \u521b\u5efa\u4e00\u4e2atcp\u5957\u63a5\u5b57 self . listen_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # \u5141\u8bb8\u7acb\u5373\u4f7f\u7528\u4e0a\u6b21\u7ed1\u5b9a\u7684port self . listen_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # \u7ed1\u5b9a self . listen_socket . bind ( server_address ) # \u53d8\u4e3a\u88ab\u52a8\uff0c\u5e76\u5236\u5b9a\u961f\u5217\u7684\u957f\u5ea6 self . listen_socket . listen ( 128 ) def serve_forever ( self ): \"\u5faa\u73af\u8fd0\u884cweb\u670d\u52a1\u5668\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u94fe\u63a5\u5e76\u4e3a\u5ba2\u6237\u7aef\u670d\u52a1\" while True : # \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u5230\u6765 client_socket , client_address = self . listen_socket . accept () print ( client_address ) new_process = threading . Thread ( target = self . handleRequest , args = ( client_socket ,)) new_process . start () # \u56e0\u4e3a\u7ebf\u7a0b\u662f\u5171\u4eab\u540c\u4e00\u4e2a\u5957\u63a5\u5b57\uff0c\u6240\u4ee5\u4e3b\u7ebf\u7a0b\u4e0d\u80fd\u5173\u95ed\uff0c\u5426\u5219\u5b50\u7ebf\u7a0b\u5c31\u4e0d\u80fd\u518d\u4f7f\u7528\u8fd9\u4e2a\u5957\u63a5\u5b57\u4e86 # client_socket.close() def handleRequest ( self , client_socket ): \"\u7528\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\uff0c\u4e3a\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1\" recv_data = client_socket . recv ( 1024 ) . decode ( 'utf-8' ) print ( recv_data ) requestHeaderLines = recv_data . splitlines () for line in requestHeaderLines : print ( line ) request_line = requestHeaderLines [ 0 ] get_file_name = re . match ( \"[^/]+(/[^ ]*)\" , request_line ) . group ( 1 ) print ( \"file name is ===> %s \" % get_file_name ) # for test if get_file_name == \"/\" : get_file_name = DOCUMENTS_ROOT + \"/index.html\" else : get_file_name = DOCUMENTS_ROOT + get_file_name print ( \"file name is ===2> %s \" % get_file_name ) # for test try : f = open ( get_file_name , \"rb\" ) except IOError : response_header = \"HTTP/1.1 404 not found \\r\\n \" response_header += \" \\r\\n \" response_body = \"====sorry ,file not found====\" else : response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \" \\r\\n \" response_body = f . read () f . close () finally : client_socket . send ( response_header . encode ( 'utf-8' )) client_socket . send ( response_body ) client_socket . close () # \u8bbe\u5b9a\u670d\u52a1\u5668\u7684\u7aef\u53e3 SERVER_ADDR = ( HOST , PORT ) = \"\" , 8888 # \u8bbe\u7f6e\u670d\u52a1\u5668\u670d\u52a1\u9759\u6001\u8d44\u6e90\u65f6\u7684\u8def\u5f84 DOCUMENTS_ROOT = \"./html\" def main (): httpd = WSGIServer ( SERVER_ADDR ) print ( \"web Server: Serving HTTP on port %d ... \\n \" % PORT ) httpd . serve_forever () if __name__ == \"__main__\" : main ()","title":"Web\u9759\u6001\u670d\u52a1\u5668-4-\u591a\u7ebf\u7a0b"},{"location":"003-9--http\u534f\u8bae\u3001web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56681/#_8","text":"import socket import re import gevent #\u5bfc\u5165\u534f\u7a0b\u7684\u5305 from gevent import monkey monkey . patch_all () def service_client ( new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 gevent . spawn ( service_client , new_socket ) #\u534f\u7a0b\u7684\u5b9e\u73b0\u8fd9\u91cc\u5b9e\u73b0\u7684\u8ddf\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u8fd8\u662f\u4e0d\u4e00\u6837\u7684,\u76f4\u63a5\u4f20\u9012\u51fd\u6570\u8ddf\u5ba2\u6237\u7aef # new_socket.close() #\u534f\u7a0b\u8ddf\u7ebf\u7a0b\u90fd\u662f\u5171\u4eab\u7684\u56e0\u6b64\u4e0d\u7528\u8fdb\u884c\u5173\u95ed # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main ()","title":"\u534f\u7a0b\u7684\u5b9e\u73b0"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/","text":"10.1. Web\u9759\u6001\u670d\u52a1\u5668-5-\u975e\u5835\u585e\u6a21\u5f0f \u00b6 Web\u9759\u6001\u670d\u52a1\u5668-5-\u975e\u5835\u585e\u6a21\u5f0f \u00b6 \u5355\u8fdb\u7a0b\u975e\u5835\u585e \u6a21\u578b \u00b6 \u8bfe\u7a0b\u4ee3\u7801 import socket import time tcp_server_tcp = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #\u5efa\u7acbtcp\u670d\u52a1\u7aef tcp_server_tcp . bind (( \"\" , 7899 )) #\u7ed1\u5b9a\u7aef\u53e3 tcp_server_tcp . listen ( 128 ) #\u8bbe\u7f6e\u76d1\u542c tcp_server_tcp . setblocking ( False ) # \u8bbe\u7f6e\u5957\u63a5\u5b57\u4e3a\u975e\u5835\u585e\u7684\u65b9\u5f0f,\u670d\u52a1\u7aef\u8bbe\u7f6e\u4e3a\u8d39\u5835\u585e client_socket_list = list () #\u5efa\u7acb\u5ba2\u6237\u7aef\u5217\u8868,\u5982\u679c\u8fde\u5ba2\u6237\u7aef\u90fd\u6ca1\u6709\u90a3\u4e48\u4e0d\u7ba1\u600e\u4e48\u6837\u4f60\u90fd\u63a5\u6536\u4e0d\u5230\u6570\u636e,\u4f60try\u4e5f\u4e0d\u884c,\u56e0\u6b64\u4f7f\u7528\u5217\u8868 while True : # time.sleep(0.5) try : #\u5faa\u73af\u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42,\u5982\u679c\u6ca1\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u5c31\u4ea7\u751f\u5f02\u5e38\u5c31\u597d\u4e86 new_socket , new_addr = tcp_server_tcp . accept () except Exception as ret : #\u4ea7\u751f\u5f02\u5e38 print ( \"---\u6ca1\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u5230\u6765---\" ) else : #\u5982\u679c\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u5230\u6765\u4e86 print ( \"---\u53ea\u8981\u6ca1\u6709\u4ea7\u751f\u5f02\u5e38\uff0c\u90a3\u4e48\u4e5f\u5c31\u610f\u5473\u7740 \u6765\u4e86\u4e00\u4e2a\u65b0\u7684\u5ba2\u6237\u7aef----\" ) new_socket . setblocking ( False ) # \u8bbe\u7f6e\u5957\u63a5\u5b57\u4e3a\u975e\u5835\u585e\u7684\u65b9\u5f0f(True\u5c31\u662f\u9ed8\u8ba4\u5835\u585e),\u5ba2\u6237\u7aef\u4e5f\u8981\u8bbe\u7f6e\u6210\u8d39\u5835\u585e\u7684\u65b9\u5f0f #\u5982\u679c\u4e0d\u8bbe\u7f6e\u5ba2\u6237\u7aef\u662f\u8d39\u5835\u585e\u7684\u8bdd\u90a3\u4e48\u53ea\u6709\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u6570\u636e\u624d\u80fd\u89e3\u5835\u585e\u662f\u4e0d\u884c\u7684 client_socket_list . append ( new_socket ) #\u5ba2\u6237\u7aef\u6765\u4e86\u90a3\u5c31\u5b58\u50a8\u5230\u670d\u52a1\u5217\u8868\u4e2d for client_socket in client_socket_list : #\u4e3a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1 try : recv_data = client_socket . recv ( 1024 ) except Exception as ret : print ( ret ) print ( \"----\u8fd9\u4e2a\u5ba2\u6237\u7aef\u6ca1\u6709\u53d1\u9001\u8fc7\u6765\u6570\u636e----\" ) else : #try\u6267\u884c\u662f\u6b63\u786e\u7684\u624d\u4f1a\u8fdb\u5165else print ( \"-----\u6ca1\u6709\u5f02\u5e38-----\" ) print ( recv_data ) if recv_data : # \u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u6570\u636e print ( \"----\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u4e86\u6570\u636e-----\" ) else : # \u5bf9\u65b9\u8c03\u7528close \u5bfc\u81f4\u4e86 recv\u8fd4\u56de client_socket . close () client_socket_list . remove ( client_socket ) #\u670d\u52a1\u5b8c\u6210\u7684\u5ba2\u6237\u7aef\u5c31\u7ed9\u5173\u95ed print ( \"---\u5ba2\u6237\u7aef\u5df2\u7ecf\u5173\u95ed----\" ) \u8be6\u7ec6\u4ee3\u7801 #coding=utf-8 from socket import * import time # \u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u65b0\u94fe\u63a5\u7684socket g_socket_list = list () def main (): server_socket = socket ( AF_INET , SOCK_STREAM ) server_socket . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server_socket . bind (( '' , 7890 )) server_socket . listen ( 128 ) # \u5c06\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u5835\u585e # \u8bbe\u7f6e\u4e3a\u975e\u5835\u585e\u540e\uff0c\u5982\u679caccept\u65f6\uff0c\u6070\u5de7\u6ca1\u6709\u5ba2\u6237\u7aefconnect\uff0c\u90a3\u4e48accept\u4f1a # \u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38\uff0c\u6240\u4ee5\u9700\u8981try\u6765\u8fdb\u884c\u5904\u7406 server_socket . setblocking ( False ) while True : # \u7528\u6765\u6d4b\u8bd5 time . sleep ( 0.5 ) try : newClientInfo = server_socket . accept () except Exception as result : pass else : print ( \"\u4e00\u4e2a\u65b0\u7684\u5ba2\u6237\u7aef\u5230\u6765: %s \" % str ( newClientInfo )) newClientInfo [ 0 ] . setblocking ( False ) # \u8bbe\u7f6e\u4e3a\u975e\u5835\u585e g_socket_list . append ( newClientInfo ) for client_socket , client_addr in g_socket_list : try : recvData = client_socket . recv ( 1024 ) if recvData : print ( 'recv[ %s ]: %s ' % ( str ( client_addr ), recvData )) else : print ( '[ %s ]\u5ba2\u6237\u7aef\u5df2\u7ecf\u5173\u95ed' % str ( client_addr )) client_socket . close () g_socket_list . remove (( client_socket , client_addr )) except Exception as result : pass print ( g_socket_list ) # for test if __name__ == '__main__' : main () web\u9759\u6001\u670d\u52a1\u5668-\u5355\u8fdb\u7a0b\u975e\u5835\u585e(\u957f\u94fe\u63a5) \u00b6 \u4e0a\u8bfe\u7248\u672c import socket import re def service_client ( new_socket , request ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... # request = new_socket.recv(1024).decode(\"utf-8\") # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () response_body = html_content response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % len ( response_body ) #\u544a\u8bc9\u5ba2\u6237\u7aef\u63a5\u6536\u591a\u957f\u7684body,\u8fd9\u6837\u6d4f\u89c8\u5668\u63a5\u6536\u5230\u4e86\u5c31\u4e0d\u7528\u4e00\u76f4\u8f6c\u5708\u4e86 response_header += \" \\r\\n \" response = response_header . encode ( \"utf-8\" ) + response_body new_socket . send ( response ) #\u5173\u95ed\u5957\u63a5 # new_socket.close()#\u8fd9\u91cc\u4e0d\u518d\u5173\u95ed,\u653e\u5927\u4e3b\u51fd\u6570\u91cc\u8fdb\u884c\u5173\u95ed\u5b9e\u73b0\u957f\u94fe\u63a5 def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #\u521b\u5efa\u670d\u52a1\u7aef tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #\u8bbe\u7f6e\u5173\u95ed\u94fe\u63a5\u8fd8\u662f\u5565\u6765\u7740 # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) #\u7ed1\u5b9a\u7aef\u53e3 # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) tcp_server_socket . setblocking ( False ) # \u5c06\u5957\u63a5\u5b57\u53d8\u4e3a\u975e\u5835\u585e client_socket_list = list () #\u521b\u5efa\u670d\u52a1\u5217\u8868 while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 try : new_socket , client_addr = tcp_server_socket . accept () except Exception as ret : pass else : new_socket . setblocking ( False ) #\u8bbe\u7f6e\u5ba2\u6237\u7aef\u975e\u5835\u585e client_socket_list . append ( new_socket ) #\u6dfb\u52a0\u5230\u5217\u8868 for client_socket in client_socket_list : try : recv_data = client_socket . recv ( 1024 ) . decode ( \"utf-8\" ) #\u63a5\u6536\u6570\u636e except Exception as ret : pass else : if recv_data : service_client ( client_socket , recv_data ) else : #\u6240\u6709\u7684\u6570\u636e\u8bf7\u6c42\u5b8c\u4e86\u5728\u8fd9\u91cc\u5c06\u5ba2\u6237\u7aef\u5173\u95ed client_socket . close () client_socket_list . remove ( client_socket ) # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u8be6\u7ec6\u7248\u672c import time import socket import sys import re class WSGIServer ( object ): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__ ( self , port , documents_root ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # 2. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self . server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) self . server_socket . bind (( \"\" , port )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . server_socket . listen ( 128 ) self . server_socket . setblocking ( False ) self . client_socket_list = list () self . documents_root = documents_root def run_forever ( self ): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True : # time.sleep(0.5) # for test try : new_socket , new_addr = self . server_socket . accept () except Exception as ret : print ( \"-----1----\" , ret ) # for test else : new_socket . setblocking ( False ) self . client_socket_list . append ( new_socket ) for client_socket in self . client_socket_list : try : request = client_socket . recv ( 1024 ) . decode ( 'utf-8' ) except Exception as ret : print ( \"------2----\" , ret ) # for test else : if request : self . deal_with_request ( request , client_socket ) else : client_socket . close () self . client_socket_list . remove ( client_socket ) print ( self . client_socket_list ) def deal_with_request ( self , request , client_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" if not request : return request_lines = request . splitlines () for i , line in enumerate ( request_lines ): print ( i , line ) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re . match ( r \"([^/]*)([^ ]+)\" , request_lines [ 0 ]) if ret : print ( \"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\" , ret . group ( 1 )) print ( \"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\" , ret . group ( 2 )) file_name = ret . group ( 2 ) if file_name == \"/\" : file_name = \"/index.html\" # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try : f = open ( self . documents_root + file_name , \"rb\" ) except : response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found \\r\\n \" response_header += \"Content-Type: text/html; charset=utf-8 \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % ( len ( response_body )) response_header += \" \\r\\n \" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_header . encode ( 'utf-8' )) # \u5c06body\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_body . encode ( \"utf-8\" )) else : content = f . read () f . close () response_body = content response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % ( len ( response_body )) response_header += \" \\r\\n \" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_header . encode ( 'utf-8' ) + response_body ) # \u8bbe\u7f6e\u670d\u52a1\u5668\u670d\u52a1\u9759\u6001\u8d44\u6e90\u65f6\u7684\u8def\u5f84 DOCUMENTS_ROOT = \"./html\" def main (): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len ( sys . argv ) == 2 : port = sys . argv [ 1 ] if port . isdigit (): port = int ( port ) else : print ( \"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890\" ) return print ( \"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port: %s \" % port ) http_server = WSGIServer ( port , DOCUMENTS_ROOT ) http_server . run_forever () if __name__ == \"__main__\" : main () 10.2. Web\u9759\u6001\u670d\u52a1\u5668-6-epoll \u00b6 Web\u9759\u6001\u670d\u52a1\u5668-6-epoll \u00b6 IO \u591a\u8def\u590d\u7528 \u00b6 \u5c31\u662f\u6211\u4eec\u8bf4\u7684select\uff0cpoll\uff0cepoll\uff0c\u6709\u4e9b\u5730\u65b9\u4e5f\u79f0\u8fd9\u79cdIO\u65b9\u5f0f\u4e3aevent driven IO\u3002 select/epoll\u7684\u597d\u5904\u5c31\u5728\u4e8e\u5355\u4e2aprocess\u5c31\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u7f51\u7edc\u8fde\u63a5\u7684IO\u3002 \u5b83\u7684\u57fa\u672c\u539f\u7406\u5c31\u662fselect\uff0cpoll\uff0cepoll\u8fd9\u4e2afunction\u4f1a\u4e0d\u65ad\u7684\u8f6e\u8be2\u6240\u8d1f\u8d23\u7684\u6240\u6709socket\uff0c\u5f53\u67d0\u4e2asocket\u6709\u6570\u636e\u5230\u8fbe\u4e86\uff0c\u5c31\u901a\u77e5\u7528\u6237\u8fdb\u7a0b\u3002 \u8bfe\u4e0a\u5b9e\u73b0 import socket import re import select #\u5bfc\u5165select\u5305 def service_client ( new_socket , request ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... # request = new_socket.recv(1024).decode(\"utf-8\") # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () response_body = html_content response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % len ( response_body ) response_header += \" \\r\\n \" response = response_header . encode ( \"utf-8\" ) + response_body new_socket . send ( response ) def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) tcp_server_socket . setblocking ( False ) # \u5c06\u5957\u63a5\u5b57\u53d8\u4e3a\u975e\u5835\u585e # \u521b\u5efa\u4e00\u4e2aepoll\u5bf9\u8c61(\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u5171\u4eab) epl = select . epoll () #\u4f7f\u7528select\u7684epoll\u7c7b\u521b\u5efa\u4e00\u4e2aepoll\u5bf9\u8c61 # \u5c06\u76d1\u542c\u5957\u63a5\u5b57\u5bf9\u5e94\u7684fd(\u6587\u4ef6\u6807\u5fd7\u7b26)\u6ce8\u518c\u5230epoll\u4e2d epl . register ( tcp_server_socket . fileno (), select . EPOLLIN ) #fileno()\u6587\u4ef6\u6807\u8bc6\u7b26 select.EPOLLIN\u6807\u8bc6\u7684\u662f\u68c0\u6d4b\u8fd9\u4e2a\u670d\u52a1\u7aef\u662f\u5426\u6709\u8f93\u5165 fd_event_dict = dict () while True : fd_event_list = epl . poll () # \u9ed8\u8ba4\u4f1a\u5835\u585e\uff0c\u76f4\u5230 os\u76d1\u6d4b\u5230\u6570\u636e\u5230\u6765 \u901a\u8fc7\u4e8b\u4ef6\u901a\u77e5\u65b9\u5f0f \u544a\u8bc9\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u6b64\u65f6\u624d\u4f1a\u89e3\u5835\u585e # [(fd, event), (\u5957\u63a5\u5b57\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26, \u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u5230\u5e95\u662f\u4ec0\u4e48\u4e8b\u4ef6 \u4f8b\u5982 \u53ef\u4ee5\u8c03\u7528recv\u63a5\u6536\u7b49)](\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5217\u8868\u5c06\u591a\u4e2a\u7b49\u5f85\u5904\u7406\u7684\u4e8b\u4ef6\u4e00\u5757\u4f20\u9012) for fd , event in fd_event_list : #(\u52a8\u4f5c\u7684\u5957\u63a5\u5b57\u4f1a\u8fd4\u56de\u5230\u8fd9\u4e2alist\u4e2d\u6bcf\u4e00\u4e2alist\u662f\u4e00\u4e2a\u5143\u7956(\u5143\u7956\u4e2d\u662f\u6807\u5fd7\u7b26\u548c\u4e8b\u4ef6)) # \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5(\u76d1\u542c\u5957\u63a5\u5b57\u52a8\u4f5c\u8d70\u7684\u662fif,\u8fdb\u884c\u6dfb\u52a0\u65b0\u7684\u5ba2\u6237\u7aef) if fd == tcp_server_socket . fileno (): #\u6807\u5fd7\u7b26\u662f\u76d1\u542c\u5957\u63a5\u5b57\u7684\u90a3\u4e48\u5c31\u8981\u63a5\u53d7\u5ba2\u6237\u7aef new_socket , client_addr = tcp_server_socket . accept () epl . register ( new_socket . fileno (), select . EPOLLIN ) #\u63a5\u6536\u5230\u7684\u65b0\u7684\u5ba2\u6237\u7aef\u4e5f\u9700\u8981\u8fdb\u884c\u6ce8\u518c(\u8fd9\u4e2a\u4e3b\u8981\u662f\u76d1\u542c\u5957\u63a5\u5b57\u7684) fd_event_dict [ new_socket . fileno ()] = new_socket #\u5b58\u50a8\u5230\u5b57\u5178\u4e2d,\u5c06\u6587\u4ef6\u6807\u5fd7\u7b26\u4e0e\u5ba2\u6237\u7aef\u8fdb\u884c\u5bf9\u5e94 elif event == select . EPOLLIN : #\u8fd9\u91cc\u5c31\u4e0d\u662f\u5224\u65ad\u6807\u5fd7\u7b26\u4e86,\u800c\u662f\u5224\u65ad\u6709\u6ca1\u6709\u6570\u636e\u7684\u5230\u6765(\u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528\u6587\u4ef6\u6807\u5fd7\u7b26,\u4e0d\u80fd\u5224\u65ad\u662f\u54ea\u4e2a\u5ba2\u6237\u7aef) #\u5ba2\u6237\u7aef\u8fdb\u884c\u4f20\u6570\u636e\u7684\u65f6\u5019\u8d70\u7684\u662f\u8fd9\u4e2aelse,\u56e0\u4e3a\u6ca1\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u8fdb\u884c\u94fe\u63a5,\u800c\u662f\u5ba2\u6237\u7aef\u8fdb\u884c\u6570\u636e\u7684\u4f20\u8f93 # \u5224\u65ad\u5df2\u7ecf\u94fe\u63a5\u7684\u5ba2\u6237\u7aef\u662f\u5426\u6709\u6570\u636e\u53d1\u9001\u8fc7\u6765 recv_data = fd_event_dict [ fd ] . recv ( 1024 ) . decode ( \"utf-8\" ) #\u4ece\u5b57\u5178\u4e2d\u53d6\u51fa\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1 if recv_data : #\u6709\u6570\u636e\u5230\u6765 service_client ( fd_event_dict [ fd ], recv_data ) else : #\u7ed3\u675f\u4e86\u94fe\u63a5 fd_event_dict [ fd ] . close () #\u5173\u95ed\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 epl . unregister ( fd ) #\u53d6\u6d88\u6ce8\u518c del fd_event_dict [ fd ] #\u5220\u9664\u5b57\u5178\u4e2d\u7684\u952e\u503c\u5bf9 # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () epoll\u7b80\u5355\u6a21\u578b \u00b6 import socket import select # \u521b\u5efa\u5957\u63a5\u5b57 s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # \u8bbe\u7f6e\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u7ed1\u5b9a\u7684\u4fe1\u606f s . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # \u7ed1\u5b9a\u672c\u673a\u4fe1\u606f s . bind (( \"\" , 7788 )) # \u53d8\u4e3a\u88ab\u52a8 s . listen ( 10 ) # \u521b\u5efa\u4e00\u4e2aepoll\u5bf9\u8c61 epoll = select . epoll () # \u6d4b\u8bd5\uff0c\u7528\u6765\u6253\u5370\u5957\u63a5\u5b57\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 # print(s.fileno()) # print(select.EPOLLIN|select.EPOLLET) # \u6ce8\u518c\u4e8b\u4ef6\u5230epoll\u4e2d # epoll.register(fd[, eventmask]) # \u6ce8\u610f\uff0c\u5982\u679cfd\u5df2\u7ecf\u6ce8\u518c\u8fc7\uff0c\u5219\u4f1a\u53d1\u751f\u5f02\u5e38 # \u5c06\u521b\u5efa\u7684\u5957\u63a5\u5b57\u6dfb\u52a0\u5230epoll\u7684\u4e8b\u4ef6\u76d1\u542c\u4e2d epoll . register ( s . fileno (), select . EPOLLIN | select . EPOLLET ) connections = {} addresses = {} # \u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u5230\u6765\u6216\u8005\u5bf9\u65b9\u53d1\u9001\u6570\u636e while True : # epoll \u8fdb\u884c fd \u626b\u63cf\u7684\u5730\u65b9 -- \u672a\u6307\u5b9a\u8d85\u65f6\u65f6\u95f4\u5219\u4e3a\u963b\u585e\u7b49\u5f85 epoll_list = epoll . poll () # \u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5224\u65ad for fd , events in epoll_list : # print fd # print events # \u5982\u679c\u662fsocket\u521b\u5efa\u7684\u5957\u63a5\u5b57\u88ab\u6fc0\u6d3b if fd == s . fileno (): new_socket , new_addr = s . accept () print ( '\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u5230\u6765 %s ' % str ( new_addr )) # \u5c06 conn \u548c addr \u4fe1\u606f\u5206\u522b\u4fdd\u5b58\u8d77\u6765 connections [ new_socket . fileno ()] = new_socket addresses [ new_socket . fileno ()] = new_addr # \u5411 epoll \u4e2d\u6ce8\u518c \u65b0socket \u7684 \u53ef\u8bfb \u4e8b\u4ef6 epoll . register ( new_socket . fileno (), select . EPOLLIN | select . EPOLLET ) # \u5982\u679c\u662f\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e elif events == select . EPOLLIN : # \u4ece\u6fc0\u6d3b fd \u4e0a\u63a5\u6536 recvData = connections [ fd ] . recv ( 1024 ) . decode ( \"utf-8\" ) if recvData : print ( 'recv: %s ' % recvData ) else : # \u4ece epoll \u4e2d\u79fb\u9664\u8be5 \u8fde\u63a5 fd epoll . unregister ( fd ) # server \u4fa7\u4e3b\u52a8\u5173\u95ed\u8be5 \u8fde\u63a5 fd connections [ fd ] . close () print ( \" %s ---offline---\" % str ( addresses [ fd ])) del connections [ fd ] del addresses [ fd ] \u8bf4\u660e \u00b6 EPOLLIN \uff08\u53ef\u8bfb\uff09 EPOLLOUT \uff08\u53ef\u5199\uff09 EPOLLET \uff08ET\u6a21\u5f0f\uff09 epoll\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u64cd\u4f5c\u6709\u4e24\u79cd\u6a21\u5f0f\uff1aLT\uff08level trigger\uff09\u548cET\uff08edge trigger\uff09\u3002LT\u6a21\u5f0f\u662f\u9ed8\u8ba4\u6a21\u5f0f\uff0cLT\u6a21\u5f0f\u4e0eET\u6a21\u5f0f\u7684\u533a\u522b\u5982\u4e0b\uff1a LT\u6a21\u5f0f\uff1a\u5f53epoll\u68c0\u6d4b\u5230\u63cf\u8ff0\u7b26\u4e8b\u4ef6\u53d1\u751f\u5e76\u5c06\u6b64\u4e8b\u4ef6\u901a\u77e5\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4e0d\u7acb\u5373\u5904\u7406\u8be5\u4e8b\u4ef6\u3002\u4e0b\u6b21\u8c03\u7528epoll\u65f6\uff0c\u4f1a\u518d\u6b21\u54cd\u5e94\u5e94\u7528\u7a0b\u5e8f\u5e76\u901a\u77e5\u6b64\u4e8b\u4ef6\u3002 ET\u6a21\u5f0f\uff1a\u5f53epoll\u68c0\u6d4b\u5230\u63cf\u8ff0\u7b26\u4e8b\u4ef6\u53d1\u751f\u5e76\u5c06\u6b64\u4e8b\u4ef6\u901a\u77e5\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u7acb\u5373\u5904\u7406\u8be5\u4e8b\u4ef6\u3002\u5982\u679c\u4e0d\u5904\u7406\uff0c\u4e0b\u6b21\u8c03\u7528epoll\u65f6\uff0c\u4e0d\u4f1a\u518d\u6b21\u54cd\u5e94\u5e94\u7528\u7a0b\u5e8f\u5e76\u901a\u77e5\u6b64\u4e8b\u4ef6\u3002 web\u9759\u6001\u670d\u52a1\u5668-epool \u00b6 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u652f\u6301http\u7684\u957f\u8fde\u63a5\uff0c\u5373\u4f7f\u7528\u4e86 Content-Length import socket import time import sys import re import select class WSGIServer ( object ): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__ ( self , port , documents_root ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # 2. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self . server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) self . server_socket . bind (( \"\" , port )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . server_socket . listen ( 128 ) self . documents_root = documents_root # \u521b\u5efaepoll\u5bf9\u8c61 self . epoll = select . epoll () # \u5c06tcp\u670d\u52a1\u5668\u5957\u63a5\u5b57\u52a0\u5165\u5230epoll\u4e2d\u8fdb\u884c\u76d1\u542c self . epoll . register ( self . server_socket . fileno (), select . EPOLLIN | select . EPOLLET ) # \u521b\u5efa\u6dfb\u52a0\u7684fd\u5bf9\u5e94\u7684\u5957\u63a5\u5b57 self . fd_socket = dict () def run_forever ( self ): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True : # epoll \u8fdb\u884c fd \u626b\u63cf\u7684\u5730\u65b9 -- \u672a\u6307\u5b9a\u8d85\u65f6\u65f6\u95f4\u5219\u4e3a\u963b\u585e\u7b49\u5f85 epoll_list = self . epoll . poll () # \u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5224\u65ad for fd , event in epoll_list : # \u5982\u679c\u662f\u670d\u52a1\u5668\u5957\u63a5\u5b57\u53ef\u4ee5\u6536\u6570\u636e\uff0c\u90a3\u4e48\u610f\u5473\u7740\u53ef\u4ee5\u8fdb\u884caccept if fd == self . server_socket . fileno (): new_socket , new_addr = self . server_socket . accept () # \u5411 epoll \u4e2d\u6ce8\u518c \u8fde\u63a5 socket \u7684 \u53ef\u8bfb \u4e8b\u4ef6 self . epoll . register ( new_socket . fileno (), select . EPOLLIN | select . EPOLLET ) # \u8bb0\u5f55\u8fd9\u4e2a\u4fe1\u606f self . fd_socket [ new_socket . fileno ()] = new_socket # \u63a5\u6536\u5230\u6570\u636e elif event == select . EPOLLIN : request = self . fd_socket [ fd ] . recv ( 1024 ) . decode ( \"utf-8\" ) if request : self . deal_with_request ( request , self . fd_socket [ fd ]) else : # \u5728epoll\u4e2d\u6ce8\u9500\u5ba2\u6237\u7aef\u7684\u4fe1\u606f self . epoll . unregister ( fd ) # \u5173\u95ed\u5ba2\u6237\u7aef\u7684\u6587\u4ef6\u53e5\u67c4 self . fd_socket [ fd ] . close () # \u5728\u5b57\u5178\u4e2d\u5220\u9664\u4e0e\u5df2\u5173\u95ed\u5ba2\u6237\u7aef\u76f8\u5173\u7684\u4fe1\u606f del self . fd_socket [ fd ] def deal_with_request ( self , request , client_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" if not request : return request_lines = request . splitlines () for i , line in enumerate ( request_lines ): print ( i , line ) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re . match ( r \"([^/]*)([^ ]+)\" , request_lines [ 0 ]) if ret : print ( \"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\" , ret . group ( 1 )) print ( \"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\" , ret . group ( 2 )) file_name = ret . group ( 2 ) if file_name == \"/\" : file_name = \"/index.html\" # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try : f = open ( self . documents_root + file_name , \"rb\" ) except : response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found \\r\\n \" response_header += \"Content-Type: text/html; charset=utf-8 \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % len ( response_body ) response_header += \" \\r\\n \" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_header . encode ( 'utf-8' )) # \u5c06body\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_body . encode ( \"utf-8\" )) else : content = f . read () f . close () response_body = content response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % len ( response_body ) response_header += \" \\r\\n \" # \u5c06\u6570\u636e\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_header . encode ( \"utf-8\" ) + response_body ) # \u8bbe\u7f6e\u670d\u52a1\u5668\u670d\u52a1\u9759\u6001\u8d44\u6e90\u65f6\u7684\u8def\u5f84 DOCUMENTS_ROOT = \"./html\" def main (): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len ( sys . argv ) == 2 : port = sys . argv [ 1 ] if port . isdigit (): port = int ( port ) else : print ( \"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890\" ) return print ( \"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port: %s \" % port ) http_server = WSGIServer ( port , DOCUMENTS_ROOT ) http_server . run_forever () if __name__ == \"__main__\" : main () \u5c0f\u603b\u7ed3 \u00b6 I/O \u591a\u8def\u590d\u7528\u7684\u7279\u70b9\uff1a \u901a\u8fc7\u4e00\u79cd\u673a\u5236\u4f7f\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u540c\u65f6\u7b49\u5f85\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u800c\u8fd9\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26\uff09\u5176\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u8fdb\u5165\u8bfb\u5c31\u7eea\u72b6\u6001\uff0cepoll()\u51fd\u6570\u5c31\u53ef\u4ee5\u8fd4\u56de\u3002 \u6240\u4ee5, IO\u591a\u8def\u590d\u7528\uff0c\u672c\u8d28\u4e0a\u4e0d\u4f1a\u6709\u5e76\u53d1\u7684\u529f\u80fd\uff0c\u56e0\u4e3a\u4efb\u4f55\u65f6\u5019\u8fd8\u662f\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u8fdb\u884c\u5de5\u4f5c\uff0c\u5b83\u4e4b\u6240\u4ee5\u80fd\u63d0\u9ad8\u6548\u7387\u662f\u56e0\u4e3aselect\\epoll \u628a\u8fdb\u6765\u7684socket\u653e\u5230\u4ed6\u4eec\u7684 '\u76d1\u89c6' \u5217\u8868\u91cc\u9762\uff0c\u5f53\u4efb\u4f55socket\u6709\u53ef\u8bfb\u53ef\u5199\u6570\u636e\u7acb\u9a6c\u5904\u7406\uff0c\u90a3\u5982\u679cselect\\epoll \u624b\u91cc\u540c\u65f6\u68c0\u6d4b\u7740\u5f88\u591asocket\uff0c \u4e00\u6709\u52a8\u9759\u9a6c\u4e0a\u8fd4\u56de\u7ed9\u8fdb\u7a0b\u5904\u7406\uff0c\u603b\u6bd4\u4e00\u4e2a\u4e00\u4e2asocket\u8fc7\u6765,\u963b\u585e\u7b49\u5f85,\u5904\u7406\u9ad8\u6548\u7387\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u591a\u7ebf\u7a0b/\u591a\u8fdb\u7a0b\u65b9\u5f0f\uff0c\u4e00\u4e2a\u8fde\u63a5\u8fc7\u6765\u5f00\u4e00\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u5904\u7406\uff0c\u8fd9\u6837\u6d88\u8017\u7684\u5185\u5b58\u548c\u8fdb\u7a0b\u5207\u6362\u9875\u4f1a\u8017\u6389\u66f4\u591a\u7684\u7cfb\u7edf\u8d44\u6e90\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ed3\u5408IO\u591a\u8def\u590d\u7528\u548c\u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b \u6765\u9ad8\u6027\u80fd\u5e76\u53d1\uff0cIO\u590d\u7528\u8d1f\u8d23\u63d0\u9ad8\u63a5\u53d7socket\u7684\u901a\u77e5\u6548\u7387\uff0c\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u4ea4\u7ed9\u8fdb\u7a0b\u6c60/\u7ebf\u7a0b\u6c60\u6765\u5904\u7406\u903b\u8f91\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 \u5982\u679c\u60f3\u4e86\u89e3\u4e0bepoll\u5728Linux\u4e2d\u7684\u5b9e\u73b0\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\uff1a http://blog.csdn.net/xiajun07061225/article/details/9250579 10.4. \u77e5\u8bc6\u6269\u5c55-C10K\u95ee\u9898 \u00b6 \u77e5\u8bc6\u6269\u5c55-C10K\u95ee\u9898 \u00b6 \u53c2\u8003\u6587\u7ae0 : \u300a\u5355\u53f0\u670d\u52a1\u5668\u5e76\u53d1TCP\u8fde\u63a5\u6570\u5230\u5e95\u53ef\u4ee5\u6709\u591a\u5c11\u300b http://www.52im.net/thread-561-1-1.html \u300a\u4e0a\u4e00\u4e2a10\u5e74\uff0c\u8457\u540d\u7684C10K\u5e76\u53d1\u8fde\u63a5\u95ee\u9898\u300b http://www.52im.net/thread-566-1-1.html","title":"004  10  web\u670d\u52a1\u5668 \u5e76\u53d1\u670d\u52a1\u56682"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#101-web-5-","text":"","title":"10.1. Web\u9759\u6001\u670d\u52a1\u5668-5-\u975e\u5835\u585e\u6a21\u5f0f"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#web-5-","text":"","title":"Web\u9759\u6001\u670d\u52a1\u5668-5-\u975e\u5835\u585e\u6a21\u5f0f"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#_1","text":"\u8bfe\u7a0b\u4ee3\u7801 import socket import time tcp_server_tcp = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #\u5efa\u7acbtcp\u670d\u52a1\u7aef tcp_server_tcp . bind (( \"\" , 7899 )) #\u7ed1\u5b9a\u7aef\u53e3 tcp_server_tcp . listen ( 128 ) #\u8bbe\u7f6e\u76d1\u542c tcp_server_tcp . setblocking ( False ) # \u8bbe\u7f6e\u5957\u63a5\u5b57\u4e3a\u975e\u5835\u585e\u7684\u65b9\u5f0f,\u670d\u52a1\u7aef\u8bbe\u7f6e\u4e3a\u8d39\u5835\u585e client_socket_list = list () #\u5efa\u7acb\u5ba2\u6237\u7aef\u5217\u8868,\u5982\u679c\u8fde\u5ba2\u6237\u7aef\u90fd\u6ca1\u6709\u90a3\u4e48\u4e0d\u7ba1\u600e\u4e48\u6837\u4f60\u90fd\u63a5\u6536\u4e0d\u5230\u6570\u636e,\u4f60try\u4e5f\u4e0d\u884c,\u56e0\u6b64\u4f7f\u7528\u5217\u8868 while True : # time.sleep(0.5) try : #\u5faa\u73af\u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42,\u5982\u679c\u6ca1\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u5c31\u4ea7\u751f\u5f02\u5e38\u5c31\u597d\u4e86 new_socket , new_addr = tcp_server_tcp . accept () except Exception as ret : #\u4ea7\u751f\u5f02\u5e38 print ( \"---\u6ca1\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u5230\u6765---\" ) else : #\u5982\u679c\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u5230\u6765\u4e86 print ( \"---\u53ea\u8981\u6ca1\u6709\u4ea7\u751f\u5f02\u5e38\uff0c\u90a3\u4e48\u4e5f\u5c31\u610f\u5473\u7740 \u6765\u4e86\u4e00\u4e2a\u65b0\u7684\u5ba2\u6237\u7aef----\" ) new_socket . setblocking ( False ) # \u8bbe\u7f6e\u5957\u63a5\u5b57\u4e3a\u975e\u5835\u585e\u7684\u65b9\u5f0f(True\u5c31\u662f\u9ed8\u8ba4\u5835\u585e),\u5ba2\u6237\u7aef\u4e5f\u8981\u8bbe\u7f6e\u6210\u8d39\u5835\u585e\u7684\u65b9\u5f0f #\u5982\u679c\u4e0d\u8bbe\u7f6e\u5ba2\u6237\u7aef\u662f\u8d39\u5835\u585e\u7684\u8bdd\u90a3\u4e48\u53ea\u6709\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u6570\u636e\u624d\u80fd\u89e3\u5835\u585e\u662f\u4e0d\u884c\u7684 client_socket_list . append ( new_socket ) #\u5ba2\u6237\u7aef\u6765\u4e86\u90a3\u5c31\u5b58\u50a8\u5230\u670d\u52a1\u5217\u8868\u4e2d for client_socket in client_socket_list : #\u4e3a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1 try : recv_data = client_socket . recv ( 1024 ) except Exception as ret : print ( ret ) print ( \"----\u8fd9\u4e2a\u5ba2\u6237\u7aef\u6ca1\u6709\u53d1\u9001\u8fc7\u6765\u6570\u636e----\" ) else : #try\u6267\u884c\u662f\u6b63\u786e\u7684\u624d\u4f1a\u8fdb\u5165else print ( \"-----\u6ca1\u6709\u5f02\u5e38-----\" ) print ( recv_data ) if recv_data : # \u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u6570\u636e print ( \"----\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u4e86\u6570\u636e-----\" ) else : # \u5bf9\u65b9\u8c03\u7528close \u5bfc\u81f4\u4e86 recv\u8fd4\u56de client_socket . close () client_socket_list . remove ( client_socket ) #\u670d\u52a1\u5b8c\u6210\u7684\u5ba2\u6237\u7aef\u5c31\u7ed9\u5173\u95ed print ( \"---\u5ba2\u6237\u7aef\u5df2\u7ecf\u5173\u95ed----\" ) \u8be6\u7ec6\u4ee3\u7801 #coding=utf-8 from socket import * import time # \u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u65b0\u94fe\u63a5\u7684socket g_socket_list = list () def main (): server_socket = socket ( AF_INET , SOCK_STREAM ) server_socket . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) server_socket . bind (( '' , 7890 )) server_socket . listen ( 128 ) # \u5c06\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u5835\u585e # \u8bbe\u7f6e\u4e3a\u975e\u5835\u585e\u540e\uff0c\u5982\u679caccept\u65f6\uff0c\u6070\u5de7\u6ca1\u6709\u5ba2\u6237\u7aefconnect\uff0c\u90a3\u4e48accept\u4f1a # \u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38\uff0c\u6240\u4ee5\u9700\u8981try\u6765\u8fdb\u884c\u5904\u7406 server_socket . setblocking ( False ) while True : # \u7528\u6765\u6d4b\u8bd5 time . sleep ( 0.5 ) try : newClientInfo = server_socket . accept () except Exception as result : pass else : print ( \"\u4e00\u4e2a\u65b0\u7684\u5ba2\u6237\u7aef\u5230\u6765: %s \" % str ( newClientInfo )) newClientInfo [ 0 ] . setblocking ( False ) # \u8bbe\u7f6e\u4e3a\u975e\u5835\u585e g_socket_list . append ( newClientInfo ) for client_socket , client_addr in g_socket_list : try : recvData = client_socket . recv ( 1024 ) if recvData : print ( 'recv[ %s ]: %s ' % ( str ( client_addr ), recvData )) else : print ( '[ %s ]\u5ba2\u6237\u7aef\u5df2\u7ecf\u5173\u95ed' % str ( client_addr )) client_socket . close () g_socket_list . remove (( client_socket , client_addr )) except Exception as result : pass print ( g_socket_list ) # for test if __name__ == '__main__' : main ()","title":"\u5355\u8fdb\u7a0b\u975e\u5835\u585e \u6a21\u578b"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#web-","text":"\u4e0a\u8bfe\u7248\u672c import socket import re def service_client ( new_socket , request ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... # request = new_socket.recv(1024).decode(\"utf-8\") # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () response_body = html_content response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % len ( response_body ) #\u544a\u8bc9\u5ba2\u6237\u7aef\u63a5\u6536\u591a\u957f\u7684body,\u8fd9\u6837\u6d4f\u89c8\u5668\u63a5\u6536\u5230\u4e86\u5c31\u4e0d\u7528\u4e00\u76f4\u8f6c\u5708\u4e86 response_header += \" \\r\\n \" response = response_header . encode ( \"utf-8\" ) + response_body new_socket . send ( response ) #\u5173\u95ed\u5957\u63a5 # new_socket.close()#\u8fd9\u91cc\u4e0d\u518d\u5173\u95ed,\u653e\u5927\u4e3b\u51fd\u6570\u91cc\u8fdb\u884c\u5173\u95ed\u5b9e\u73b0\u957f\u94fe\u63a5 def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #\u521b\u5efa\u670d\u52a1\u7aef tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #\u8bbe\u7f6e\u5173\u95ed\u94fe\u63a5\u8fd8\u662f\u5565\u6765\u7740 # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) #\u7ed1\u5b9a\u7aef\u53e3 # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) tcp_server_socket . setblocking ( False ) # \u5c06\u5957\u63a5\u5b57\u53d8\u4e3a\u975e\u5835\u585e client_socket_list = list () #\u521b\u5efa\u670d\u52a1\u5217\u8868 while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 try : new_socket , client_addr = tcp_server_socket . accept () except Exception as ret : pass else : new_socket . setblocking ( False ) #\u8bbe\u7f6e\u5ba2\u6237\u7aef\u975e\u5835\u585e client_socket_list . append ( new_socket ) #\u6dfb\u52a0\u5230\u5217\u8868 for client_socket in client_socket_list : try : recv_data = client_socket . recv ( 1024 ) . decode ( \"utf-8\" ) #\u63a5\u6536\u6570\u636e except Exception as ret : pass else : if recv_data : service_client ( client_socket , recv_data ) else : #\u6240\u6709\u7684\u6570\u636e\u8bf7\u6c42\u5b8c\u4e86\u5728\u8fd9\u91cc\u5c06\u5ba2\u6237\u7aef\u5173\u95ed client_socket . close () client_socket_list . remove ( client_socket ) # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main () \u8be6\u7ec6\u7248\u672c import time import socket import sys import re class WSGIServer ( object ): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__ ( self , port , documents_root ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # 2. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self . server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) self . server_socket . bind (( \"\" , port )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . server_socket . listen ( 128 ) self . server_socket . setblocking ( False ) self . client_socket_list = list () self . documents_root = documents_root def run_forever ( self ): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True : # time.sleep(0.5) # for test try : new_socket , new_addr = self . server_socket . accept () except Exception as ret : print ( \"-----1----\" , ret ) # for test else : new_socket . setblocking ( False ) self . client_socket_list . append ( new_socket ) for client_socket in self . client_socket_list : try : request = client_socket . recv ( 1024 ) . decode ( 'utf-8' ) except Exception as ret : print ( \"------2----\" , ret ) # for test else : if request : self . deal_with_request ( request , client_socket ) else : client_socket . close () self . client_socket_list . remove ( client_socket ) print ( self . client_socket_list ) def deal_with_request ( self , request , client_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" if not request : return request_lines = request . splitlines () for i , line in enumerate ( request_lines ): print ( i , line ) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re . match ( r \"([^/]*)([^ ]+)\" , request_lines [ 0 ]) if ret : print ( \"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\" , ret . group ( 1 )) print ( \"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\" , ret . group ( 2 )) file_name = ret . group ( 2 ) if file_name == \"/\" : file_name = \"/index.html\" # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try : f = open ( self . documents_root + file_name , \"rb\" ) except : response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found \\r\\n \" response_header += \"Content-Type: text/html; charset=utf-8 \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % ( len ( response_body )) response_header += \" \\r\\n \" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_header . encode ( 'utf-8' )) # \u5c06body\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_body . encode ( \"utf-8\" )) else : content = f . read () f . close () response_body = content response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % ( len ( response_body )) response_header += \" \\r\\n \" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_header . encode ( 'utf-8' ) + response_body ) # \u8bbe\u7f6e\u670d\u52a1\u5668\u670d\u52a1\u9759\u6001\u8d44\u6e90\u65f6\u7684\u8def\u5f84 DOCUMENTS_ROOT = \"./html\" def main (): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len ( sys . argv ) == 2 : port = sys . argv [ 1 ] if port . isdigit (): port = int ( port ) else : print ( \"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890\" ) return print ( \"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port: %s \" % port ) http_server = WSGIServer ( port , DOCUMENTS_ROOT ) http_server . run_forever () if __name__ == \"__main__\" : main ()","title":"web\u9759\u6001\u670d\u52a1\u5668-\u5355\u8fdb\u7a0b\u975e\u5835\u585e(\u957f\u94fe\u63a5)"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#102-web-6-epoll","text":"","title":"10.2. Web\u9759\u6001\u670d\u52a1\u5668-6-epoll"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#web-6-epoll","text":"","title":"Web\u9759\u6001\u670d\u52a1\u5668-6-epoll"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#io","text":"\u5c31\u662f\u6211\u4eec\u8bf4\u7684select\uff0cpoll\uff0cepoll\uff0c\u6709\u4e9b\u5730\u65b9\u4e5f\u79f0\u8fd9\u79cdIO\u65b9\u5f0f\u4e3aevent driven IO\u3002 select/epoll\u7684\u597d\u5904\u5c31\u5728\u4e8e\u5355\u4e2aprocess\u5c31\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u7f51\u7edc\u8fde\u63a5\u7684IO\u3002 \u5b83\u7684\u57fa\u672c\u539f\u7406\u5c31\u662fselect\uff0cpoll\uff0cepoll\u8fd9\u4e2afunction\u4f1a\u4e0d\u65ad\u7684\u8f6e\u8be2\u6240\u8d1f\u8d23\u7684\u6240\u6709socket\uff0c\u5f53\u67d0\u4e2asocket\u6709\u6570\u636e\u5230\u8fbe\u4e86\uff0c\u5c31\u901a\u77e5\u7528\u6237\u8fdb\u7a0b\u3002 \u8bfe\u4e0a\u5b9e\u73b0 import socket import re import select #\u5bfc\u5165select\u5305 def service_client ( new_socket , request ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... # request = new_socket.recv(1024).decode(\"utf-8\") # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () response_body = html_content response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % len ( response_body ) response_header += \" \\r\\n \" response = response_header . encode ( \"utf-8\" ) + response_body new_socket . send ( response ) def main (): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" # 1. \u521b\u5efa\u5957\u63a5\u5b57 tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . listen ( 128 ) tcp_server_socket . setblocking ( False ) # \u5c06\u5957\u63a5\u5b57\u53d8\u4e3a\u975e\u5835\u585e # \u521b\u5efa\u4e00\u4e2aepoll\u5bf9\u8c61(\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u5171\u4eab) epl = select . epoll () #\u4f7f\u7528select\u7684epoll\u7c7b\u521b\u5efa\u4e00\u4e2aepoll\u5bf9\u8c61 # \u5c06\u76d1\u542c\u5957\u63a5\u5b57\u5bf9\u5e94\u7684fd(\u6587\u4ef6\u6807\u5fd7\u7b26)\u6ce8\u518c\u5230epoll\u4e2d epl . register ( tcp_server_socket . fileno (), select . EPOLLIN ) #fileno()\u6587\u4ef6\u6807\u8bc6\u7b26 select.EPOLLIN\u6807\u8bc6\u7684\u662f\u68c0\u6d4b\u8fd9\u4e2a\u670d\u52a1\u7aef\u662f\u5426\u6709\u8f93\u5165 fd_event_dict = dict () while True : fd_event_list = epl . poll () # \u9ed8\u8ba4\u4f1a\u5835\u585e\uff0c\u76f4\u5230 os\u76d1\u6d4b\u5230\u6570\u636e\u5230\u6765 \u901a\u8fc7\u4e8b\u4ef6\u901a\u77e5\u65b9\u5f0f \u544a\u8bc9\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u6b64\u65f6\u624d\u4f1a\u89e3\u5835\u585e # [(fd, event), (\u5957\u63a5\u5b57\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26, \u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u5230\u5e95\u662f\u4ec0\u4e48\u4e8b\u4ef6 \u4f8b\u5982 \u53ef\u4ee5\u8c03\u7528recv\u63a5\u6536\u7b49)](\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5217\u8868\u5c06\u591a\u4e2a\u7b49\u5f85\u5904\u7406\u7684\u4e8b\u4ef6\u4e00\u5757\u4f20\u9012) for fd , event in fd_event_list : #(\u52a8\u4f5c\u7684\u5957\u63a5\u5b57\u4f1a\u8fd4\u56de\u5230\u8fd9\u4e2alist\u4e2d\u6bcf\u4e00\u4e2alist\u662f\u4e00\u4e2a\u5143\u7956(\u5143\u7956\u4e2d\u662f\u6807\u5fd7\u7b26\u548c\u4e8b\u4ef6)) # \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5(\u76d1\u542c\u5957\u63a5\u5b57\u52a8\u4f5c\u8d70\u7684\u662fif,\u8fdb\u884c\u6dfb\u52a0\u65b0\u7684\u5ba2\u6237\u7aef) if fd == tcp_server_socket . fileno (): #\u6807\u5fd7\u7b26\u662f\u76d1\u542c\u5957\u63a5\u5b57\u7684\u90a3\u4e48\u5c31\u8981\u63a5\u53d7\u5ba2\u6237\u7aef new_socket , client_addr = tcp_server_socket . accept () epl . register ( new_socket . fileno (), select . EPOLLIN ) #\u63a5\u6536\u5230\u7684\u65b0\u7684\u5ba2\u6237\u7aef\u4e5f\u9700\u8981\u8fdb\u884c\u6ce8\u518c(\u8fd9\u4e2a\u4e3b\u8981\u662f\u76d1\u542c\u5957\u63a5\u5b57\u7684) fd_event_dict [ new_socket . fileno ()] = new_socket #\u5b58\u50a8\u5230\u5b57\u5178\u4e2d,\u5c06\u6587\u4ef6\u6807\u5fd7\u7b26\u4e0e\u5ba2\u6237\u7aef\u8fdb\u884c\u5bf9\u5e94 elif event == select . EPOLLIN : #\u8fd9\u91cc\u5c31\u4e0d\u662f\u5224\u65ad\u6807\u5fd7\u7b26\u4e86,\u800c\u662f\u5224\u65ad\u6709\u6ca1\u6709\u6570\u636e\u7684\u5230\u6765(\u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528\u6587\u4ef6\u6807\u5fd7\u7b26,\u4e0d\u80fd\u5224\u65ad\u662f\u54ea\u4e2a\u5ba2\u6237\u7aef) #\u5ba2\u6237\u7aef\u8fdb\u884c\u4f20\u6570\u636e\u7684\u65f6\u5019\u8d70\u7684\u662f\u8fd9\u4e2aelse,\u56e0\u4e3a\u6ca1\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u8fdb\u884c\u94fe\u63a5,\u800c\u662f\u5ba2\u6237\u7aef\u8fdb\u884c\u6570\u636e\u7684\u4f20\u8f93 # \u5224\u65ad\u5df2\u7ecf\u94fe\u63a5\u7684\u5ba2\u6237\u7aef\u662f\u5426\u6709\u6570\u636e\u53d1\u9001\u8fc7\u6765 recv_data = fd_event_dict [ fd ] . recv ( 1024 ) . decode ( \"utf-8\" ) #\u4ece\u5b57\u5178\u4e2d\u53d6\u51fa\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fdb\u884c\u670d\u52a1 if recv_data : #\u6709\u6570\u636e\u5230\u6765 service_client ( fd_event_dict [ fd ], recv_data ) else : #\u7ed3\u675f\u4e86\u94fe\u63a5 fd_event_dict [ fd ] . close () #\u5173\u95ed\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 epl . unregister ( fd ) #\u53d6\u6d88\u6ce8\u518c del fd_event_dict [ fd ] #\u5220\u9664\u5b57\u5178\u4e2d\u7684\u952e\u503c\u5bf9 # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 tcp_server_socket . close () if __name__ == \"__main__\" : main ()","title":"IO \u591a\u8def\u590d\u7528"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#epoll","text":"import socket import select # \u521b\u5efa\u5957\u63a5\u5b57 s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # \u8bbe\u7f6e\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u7ed1\u5b9a\u7684\u4fe1\u606f s . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # \u7ed1\u5b9a\u672c\u673a\u4fe1\u606f s . bind (( \"\" , 7788 )) # \u53d8\u4e3a\u88ab\u52a8 s . listen ( 10 ) # \u521b\u5efa\u4e00\u4e2aepoll\u5bf9\u8c61 epoll = select . epoll () # \u6d4b\u8bd5\uff0c\u7528\u6765\u6253\u5370\u5957\u63a5\u5b57\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 # print(s.fileno()) # print(select.EPOLLIN|select.EPOLLET) # \u6ce8\u518c\u4e8b\u4ef6\u5230epoll\u4e2d # epoll.register(fd[, eventmask]) # \u6ce8\u610f\uff0c\u5982\u679cfd\u5df2\u7ecf\u6ce8\u518c\u8fc7\uff0c\u5219\u4f1a\u53d1\u751f\u5f02\u5e38 # \u5c06\u521b\u5efa\u7684\u5957\u63a5\u5b57\u6dfb\u52a0\u5230epoll\u7684\u4e8b\u4ef6\u76d1\u542c\u4e2d epoll . register ( s . fileno (), select . EPOLLIN | select . EPOLLET ) connections = {} addresses = {} # \u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u5230\u6765\u6216\u8005\u5bf9\u65b9\u53d1\u9001\u6570\u636e while True : # epoll \u8fdb\u884c fd \u626b\u63cf\u7684\u5730\u65b9 -- \u672a\u6307\u5b9a\u8d85\u65f6\u65f6\u95f4\u5219\u4e3a\u963b\u585e\u7b49\u5f85 epoll_list = epoll . poll () # \u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5224\u65ad for fd , events in epoll_list : # print fd # print events # \u5982\u679c\u662fsocket\u521b\u5efa\u7684\u5957\u63a5\u5b57\u88ab\u6fc0\u6d3b if fd == s . fileno (): new_socket , new_addr = s . accept () print ( '\u6709\u65b0\u7684\u5ba2\u6237\u7aef\u5230\u6765 %s ' % str ( new_addr )) # \u5c06 conn \u548c addr \u4fe1\u606f\u5206\u522b\u4fdd\u5b58\u8d77\u6765 connections [ new_socket . fileno ()] = new_socket addresses [ new_socket . fileno ()] = new_addr # \u5411 epoll \u4e2d\u6ce8\u518c \u65b0socket \u7684 \u53ef\u8bfb \u4e8b\u4ef6 epoll . register ( new_socket . fileno (), select . EPOLLIN | select . EPOLLET ) # \u5982\u679c\u662f\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e elif events == select . EPOLLIN : # \u4ece\u6fc0\u6d3b fd \u4e0a\u63a5\u6536 recvData = connections [ fd ] . recv ( 1024 ) . decode ( \"utf-8\" ) if recvData : print ( 'recv: %s ' % recvData ) else : # \u4ece epoll \u4e2d\u79fb\u9664\u8be5 \u8fde\u63a5 fd epoll . unregister ( fd ) # server \u4fa7\u4e3b\u52a8\u5173\u95ed\u8be5 \u8fde\u63a5 fd connections [ fd ] . close () print ( \" %s ---offline---\" % str ( addresses [ fd ])) del connections [ fd ] del addresses [ fd ]","title":"epoll\u7b80\u5355\u6a21\u578b"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#_2","text":"EPOLLIN \uff08\u53ef\u8bfb\uff09 EPOLLOUT \uff08\u53ef\u5199\uff09 EPOLLET \uff08ET\u6a21\u5f0f\uff09 epoll\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u64cd\u4f5c\u6709\u4e24\u79cd\u6a21\u5f0f\uff1aLT\uff08level trigger\uff09\u548cET\uff08edge trigger\uff09\u3002LT\u6a21\u5f0f\u662f\u9ed8\u8ba4\u6a21\u5f0f\uff0cLT\u6a21\u5f0f\u4e0eET\u6a21\u5f0f\u7684\u533a\u522b\u5982\u4e0b\uff1a LT\u6a21\u5f0f\uff1a\u5f53epoll\u68c0\u6d4b\u5230\u63cf\u8ff0\u7b26\u4e8b\u4ef6\u53d1\u751f\u5e76\u5c06\u6b64\u4e8b\u4ef6\u901a\u77e5\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4e0d\u7acb\u5373\u5904\u7406\u8be5\u4e8b\u4ef6\u3002\u4e0b\u6b21\u8c03\u7528epoll\u65f6\uff0c\u4f1a\u518d\u6b21\u54cd\u5e94\u5e94\u7528\u7a0b\u5e8f\u5e76\u901a\u77e5\u6b64\u4e8b\u4ef6\u3002 ET\u6a21\u5f0f\uff1a\u5f53epoll\u68c0\u6d4b\u5230\u63cf\u8ff0\u7b26\u4e8b\u4ef6\u53d1\u751f\u5e76\u5c06\u6b64\u4e8b\u4ef6\u901a\u77e5\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u7acb\u5373\u5904\u7406\u8be5\u4e8b\u4ef6\u3002\u5982\u679c\u4e0d\u5904\u7406\uff0c\u4e0b\u6b21\u8c03\u7528epoll\u65f6\uff0c\u4e0d\u4f1a\u518d\u6b21\u54cd\u5e94\u5e94\u7528\u7a0b\u5e8f\u5e76\u901a\u77e5\u6b64\u4e8b\u4ef6\u3002","title":"\u8bf4\u660e"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#web-epool","text":"\u4ee5\u4e0b\u4ee3\u7801\uff0c\u652f\u6301http\u7684\u957f\u8fde\u63a5\uff0c\u5373\u4f7f\u7528\u4e86 Content-Length import socket import time import sys import re import select class WSGIServer ( object ): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__ ( self , port , documents_root ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) # 2. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self . server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) self . server_socket . bind (( \"\" , port )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . server_socket . listen ( 128 ) self . documents_root = documents_root # \u521b\u5efaepoll\u5bf9\u8c61 self . epoll = select . epoll () # \u5c06tcp\u670d\u52a1\u5668\u5957\u63a5\u5b57\u52a0\u5165\u5230epoll\u4e2d\u8fdb\u884c\u76d1\u542c self . epoll . register ( self . server_socket . fileno (), select . EPOLLIN | select . EPOLLET ) # \u521b\u5efa\u6dfb\u52a0\u7684fd\u5bf9\u5e94\u7684\u5957\u63a5\u5b57 self . fd_socket = dict () def run_forever ( self ): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True : # epoll \u8fdb\u884c fd \u626b\u63cf\u7684\u5730\u65b9 -- \u672a\u6307\u5b9a\u8d85\u65f6\u65f6\u95f4\u5219\u4e3a\u963b\u585e\u7b49\u5f85 epoll_list = self . epoll . poll () # \u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5224\u65ad for fd , event in epoll_list : # \u5982\u679c\u662f\u670d\u52a1\u5668\u5957\u63a5\u5b57\u53ef\u4ee5\u6536\u6570\u636e\uff0c\u90a3\u4e48\u610f\u5473\u7740\u53ef\u4ee5\u8fdb\u884caccept if fd == self . server_socket . fileno (): new_socket , new_addr = self . server_socket . accept () # \u5411 epoll \u4e2d\u6ce8\u518c \u8fde\u63a5 socket \u7684 \u53ef\u8bfb \u4e8b\u4ef6 self . epoll . register ( new_socket . fileno (), select . EPOLLIN | select . EPOLLET ) # \u8bb0\u5f55\u8fd9\u4e2a\u4fe1\u606f self . fd_socket [ new_socket . fileno ()] = new_socket # \u63a5\u6536\u5230\u6570\u636e elif event == select . EPOLLIN : request = self . fd_socket [ fd ] . recv ( 1024 ) . decode ( \"utf-8\" ) if request : self . deal_with_request ( request , self . fd_socket [ fd ]) else : # \u5728epoll\u4e2d\u6ce8\u9500\u5ba2\u6237\u7aef\u7684\u4fe1\u606f self . epoll . unregister ( fd ) # \u5173\u95ed\u5ba2\u6237\u7aef\u7684\u6587\u4ef6\u53e5\u67c4 self . fd_socket [ fd ] . close () # \u5728\u5b57\u5178\u4e2d\u5220\u9664\u4e0e\u5df2\u5173\u95ed\u5ba2\u6237\u7aef\u76f8\u5173\u7684\u4fe1\u606f del self . fd_socket [ fd ] def deal_with_request ( self , request , client_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" if not request : return request_lines = request . splitlines () for i , line in enumerate ( request_lines ): print ( i , line ) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re . match ( r \"([^/]*)([^ ]+)\" , request_lines [ 0 ]) if ret : print ( \"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\" , ret . group ( 1 )) print ( \"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\" , ret . group ( 2 )) file_name = ret . group ( 2 ) if file_name == \"/\" : file_name = \"/index.html\" # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try : f = open ( self . documents_root + file_name , \"rb\" ) except : response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found \\r\\n \" response_header += \"Content-Type: text/html; charset=utf-8 \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % len ( response_body ) response_header += \" \\r\\n \" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_header . encode ( 'utf-8' )) # \u5c06body\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_body . encode ( \"utf-8\" )) else : content = f . read () f . close () response_body = content response_header = \"HTTP/1.1 200 OK \\r\\n \" response_header += \"Content-Length: %d \\r\\n \" % len ( response_body ) response_header += \" \\r\\n \" # \u5c06\u6570\u636e\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket . send ( response_header . encode ( \"utf-8\" ) + response_body ) # \u8bbe\u7f6e\u670d\u52a1\u5668\u670d\u52a1\u9759\u6001\u8d44\u6e90\u65f6\u7684\u8def\u5f84 DOCUMENTS_ROOT = \"./html\" def main (): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len ( sys . argv ) == 2 : port = sys . argv [ 1 ] if port . isdigit (): port = int ( port ) else : print ( \"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890\" ) return print ( \"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port: %s \" % port ) http_server = WSGIServer ( port , DOCUMENTS_ROOT ) http_server . run_forever () if __name__ == \"__main__\" : main ()","title":"web\u9759\u6001\u670d\u52a1\u5668-epool"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#_3","text":"I/O \u591a\u8def\u590d\u7528\u7684\u7279\u70b9\uff1a \u901a\u8fc7\u4e00\u79cd\u673a\u5236\u4f7f\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u540c\u65f6\u7b49\u5f85\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u800c\u8fd9\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26\uff09\u5176\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u8fdb\u5165\u8bfb\u5c31\u7eea\u72b6\u6001\uff0cepoll()\u51fd\u6570\u5c31\u53ef\u4ee5\u8fd4\u56de\u3002 \u6240\u4ee5, IO\u591a\u8def\u590d\u7528\uff0c\u672c\u8d28\u4e0a\u4e0d\u4f1a\u6709\u5e76\u53d1\u7684\u529f\u80fd\uff0c\u56e0\u4e3a\u4efb\u4f55\u65f6\u5019\u8fd8\u662f\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u8fdb\u884c\u5de5\u4f5c\uff0c\u5b83\u4e4b\u6240\u4ee5\u80fd\u63d0\u9ad8\u6548\u7387\u662f\u56e0\u4e3aselect\\epoll \u628a\u8fdb\u6765\u7684socket\u653e\u5230\u4ed6\u4eec\u7684 '\u76d1\u89c6' \u5217\u8868\u91cc\u9762\uff0c\u5f53\u4efb\u4f55socket\u6709\u53ef\u8bfb\u53ef\u5199\u6570\u636e\u7acb\u9a6c\u5904\u7406\uff0c\u90a3\u5982\u679cselect\\epoll \u624b\u91cc\u540c\u65f6\u68c0\u6d4b\u7740\u5f88\u591asocket\uff0c \u4e00\u6709\u52a8\u9759\u9a6c\u4e0a\u8fd4\u56de\u7ed9\u8fdb\u7a0b\u5904\u7406\uff0c\u603b\u6bd4\u4e00\u4e2a\u4e00\u4e2asocket\u8fc7\u6765,\u963b\u585e\u7b49\u5f85,\u5904\u7406\u9ad8\u6548\u7387\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u591a\u7ebf\u7a0b/\u591a\u8fdb\u7a0b\u65b9\u5f0f\uff0c\u4e00\u4e2a\u8fde\u63a5\u8fc7\u6765\u5f00\u4e00\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u5904\u7406\uff0c\u8fd9\u6837\u6d88\u8017\u7684\u5185\u5b58\u548c\u8fdb\u7a0b\u5207\u6362\u9875\u4f1a\u8017\u6389\u66f4\u591a\u7684\u7cfb\u7edf\u8d44\u6e90\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ed3\u5408IO\u591a\u8def\u590d\u7528\u548c\u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b \u6765\u9ad8\u6027\u80fd\u5e76\u53d1\uff0cIO\u590d\u7528\u8d1f\u8d23\u63d0\u9ad8\u63a5\u53d7socket\u7684\u901a\u77e5\u6548\u7387\uff0c\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u4ea4\u7ed9\u8fdb\u7a0b\u6c60/\u7ebf\u7a0b\u6c60\u6765\u5904\u7406\u903b\u8f91\u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#_4","text":"\u5982\u679c\u60f3\u4e86\u89e3\u4e0bepoll\u5728Linux\u4e2d\u7684\u5b9e\u73b0\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\uff1a http://blog.csdn.net/xiajun07061225/article/details/9250579","title":"\u53c2\u8003\u8d44\u6599"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#104-c10k","text":"","title":"10.4. \u77e5\u8bc6\u6269\u5c55-C10K\u95ee\u9898"},{"location":"004--10--web\u670d\u52a1\u5668-\u5e76\u53d1\u670d\u52a1\u56682/#-c10k","text":"\u53c2\u8003\u6587\u7ae0 : \u300a\u5355\u53f0\u670d\u52a1\u5668\u5e76\u53d1TCP\u8fde\u63a5\u6570\u5230\u5e95\u53ef\u4ee5\u6709\u591a\u5c11\u300b http://www.52im.net/thread-561-1-1.html \u300a\u4e0a\u4e00\u4e2a10\u5e74\uff0c\u8457\u540d\u7684C10K\u5e76\u53d1\u8fde\u63a5\u95ee\u9898\u300b http://www.52im.net/thread-566-1-1.html","title":"\u77e5\u8bc6\u6269\u5c55-C10K\u95ee\u9898"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/","text":"\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b \u00b6 1. 2\u53f0\u7535\u8111\u7684\u7f51\u7edc \u00b6 \u8bf4\u660e \u00b6 \u5982\u679c\u4e24\u53f0\u7535\u8111\u4e4b\u95f4\u901a\u8fc7\u7f51\u7ebf\u8fde\u63a5\u662f\u53ef\u4ee5\u76f4\u63a5\u901a\u4fe1\u7684\uff0c\u4f46\u662f\u9700\u8981\u63d0\u524d\u8bbe\u7f6e\u597dip\u5730\u5740\u4ee5\u53ca\u7f51\u7edc\u63a9\u7801 \u5e76\u4e14ip\u5730\u5740\u9700\u8981\u63a7\u5236\u5728\u540c\u4e00\u7f51\u6bb5\u5185\uff0c\u4f8b\u5982 \u4e00\u53f0\u4e3a 192.168.1.1 \u53e6\u4e00\u53f0\u4e3a 192.168.1.2 \u5219\u53ef\u4ee5\u8fdb\u884c\u901a\u4fe1 2. \u4f7f\u7528\u96c6\u7ebf\u5668\u7ec4\u6210\u4e00\u4e2a\u7f51\u7edc \u00b6 \u8bf4\u660e \u00b6 \u5f53\u6709\u591a\u6001\u7535\u8111\u9700\u8981\u7ec4\u6210\u4e00\u4e2a\u7f51\u65f6\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u96c6\u7ebf\u5668\uff08Hub\uff09\u5c06\u5176\u94fe\u63a5\u5728\u4e00\u8d77 \u4e00\u822c\u60c5\u51b5\u4e0b\u96c6\u7ebf\u5668\u7684\u63a5\u53e3\u8f83\u5c11 \u96c6\u7ebf\u5668\u6709\u4e2a\u7f3a\u70b9\uff0c\u5b83\u4ee5\u5e7f\u64ad\u7684\u65b9\u5f0f\u8fdb\u884c\u53d1\u9001\u4efb\u4f55\u6570\u636e\uff0c\u5373\u5982\u679c\u96c6\u7ebf\u5668\u63a5\u6536\u5230\u6765\u81eaA\u7535\u8111\u7684\u6570\u636e\u672c\u6765\u662f\u60f3\u8f6c\u53d1\u7ed9B\u7535\u8111\uff0c\u5982\u679c\u6b64\u65f6\u5b83\u8fd8\u8fde\u63a5\u7740\u53e6\u5916\u4e24\u53f0\u7535\u8111C\u3001D\uff0c\u90a3\u4e48\u5b83\u4f1a\u628a\u8fd9\u4e2a\u6570\u636e\u7ed9\u6bcf\u4e2a\u7535\u8111\u90fd\u53d1\u9001\u4e00\u4efd\uff0c\u56e0\u6b64\u4f1a\u5bfc\u81f4\u7f51\u7edc\u62e5\u5835 3. \u4f7f\u7528\u4ea4\u6362\u673a\u7ec4\u6210\u4e00\u4e2a\u7f51\u7edc \u00b6 \u8bf4\u660e \u00b6 \u514b\u670d\u4e86\u96c6\u7ebf\u5668\u4ee5\u5e7f\u64ad\u53d1\u9001\u6570\u636e\u7684\u7f3a\u70b9\uff0c\u5f53\u9700\u8981\u5e7f\u64ad\u7684\u65f6\u5019\u53d1\u9001\u5e7f\u64ad\uff0c\u5f53\u9700\u8981\u5355\u64ad\u7684\u65f6\u5019\u53c8\u80fd\u591f\u4ee5\u5355\u64ad\u7684\u65b9\u5f0f\u8fdb\u884c\u53d1\u9001 \u5b83\u5df2\u7ecf\u66ff\u4ee3\u4e86\u4e4b\u524d\u7684\u96c6\u7ebf\u5668 \u4f01\u4e1a\u4e2d\u5c31\u662f\u7528\u4ea4\u6362\u673a\u6765\u5b8c\u6210\u591a\u6001\u7535\u8111\u8bbe\u5907\u7684\u94fe\u63a5\u6210\u7f51\u7edc\u7684 4. \u4f7f\u7528\u8def\u7531\u5668\u8fde\u63a5\u591a\u4e2a\u7f51\u7edc \u00b6 5. \u901a\u4fe1\u8fc7\u7a0b\uff08\u590d\u6742\uff09 \u00b6 \u8f83\u4e3a\u590d\u6742\u7684\u901a\u4fe1\u8fc7\u7a0b\u5982\uff1a\u8bbf\u95ee www.itheima.com \u9996\u5148\u7535\u8111\u83b7\u5f97\u57df\u540d\u4ee5\u540e\uff0c\u5148\u5411\u7f51\u5173\u4f7f\u7528arp\u8bf7\u6c42\u7f51\u5173\u7684mac\u5730\u5740\uff0c\u7136\u540e\u83b7\u53d6mac\u5730\u5740\u540e\u5c06\u57df\u540d\u53d1\u9001\u7ed9\u7f51\u5173\uff0c\u7f51\u5173\u8fde\u63a5\u4e92\u8054\u7f51\u8fde\u63a5dns\u670d\u52a1\u5668\uff0c\u7136\u540e\u4f20\u56de\u57df\u540d\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u7684ip\u5730\u5740\uff0c\u7136\u540e\u5ba2\u6237\u7aef\u7ecf\u8fc7\u7f51\u5173\u8ddf\u670d\u52a1\u7aef\u8fdb\u884c\u4e09\u6b21\u63e1\u624b\u8fdb\u884c\u8fde\u63a5\u3002\u7136\u540e\u8fdb\u884c\u6570\u636e\u7684\u4ea4\u4e92\u3002\u6570\u636e\u4ea4\u4e92\u5b8c\u6210\u8fdb\u884c\u56db\u6b21\u6325\u624b\u5b8c\u6210\u6570\u636e\u64cd\u4f5c \u8bf4\u660e \u00b6 \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\u4e00\u4e2a\u7f51\u5740\u65f6\uff0c\u9700\u8981\u5c06\u5b83\u5148\u89e3\u6790\u51faip\u5730\u5740\u6765 \u5f53\u5f97\u5230ip\u5730\u5740\u4e4b\u540e\uff0c\u6d4f\u89c8\u5668\u4ee5tcp\u7684\u65b9\u5f0f3\u6b21\u63e1\u624b\u94fe\u63a5\u670d\u52a1\u5668 \u4ee5tcp\u7684\u65b9\u5f0f\u53d1\u9001http\u534f\u8bae\u7684\u8bf7\u6c42\u6570\u636e \u7ed9 \u670d\u52a1\u5668 \u670d\u52a1\u5668tcp\u7684\u65b9\u5f0f\u56de\u5e94http\u534f\u8bae\u7684\u5e94\u7b54\u6570\u636e \u7ed9\u6d4f\u89c8\u5668 5 ip\u76f8\u5f53\u4e8e\u76ee\u7684\u5730\u3002mac\u76f8\u5f53\u4e8e\u8def\u53e3 \u603b\u7ed3 MAC\u5730\u5740\uff1a\u5728\u8bbe\u5907\u4e0e\u8bbe\u5907\u4e4b\u95f4\u6570\u636e\u901a\u4fe1\u65f6\u7528\u6765\u6807\u8bb0\u6536\u53d1\u53cc\u65b9\uff08\u7f51\u5361\u7684\u5e8f\u5217\u53f7\uff09 IP\u5730\u5740\uff1a\u5728\u903b\u8f91\u4e0a\u6807\u8bb0\u4e00\u53f0\u7535\u8111\uff0c\u7528\u6765\u6307\u5f15\u6570\u636e\u5305\u7684\u6536\u53d1\u65b9\u5411\uff08\u76f8\u5f53\u4e8e\u7535\u8111\u7684\u5e8f\u5217\u53f7\uff09 \u7f51\u7edc\u63a9\u7801\uff1a\u7528\u6765\u533a\u5206ip\u5730\u5740\u7684\u7f51\u7edc\u53f7\u548c\u4e3b\u673a\u53f7 \u9ed8\u8ba4\u7f51\u5173\uff1a\u5f53\u9700\u8981\u53d1\u9001\u7684\u6570\u636e\u5305\u7684\u76ee\u7684ip\u4e0d\u5728\u672c\u7f51\u6bb5\u5185\u65f6\uff0c\u5c31\u4f1a\u53d1\u9001\u7ed9\u9ed8\u8ba4\u7684\u4e00\u53f0\u7535\u8111\uff0c\u6210\u4e3a\u7f51\u5173\uff08\u4e00\u822c\u90fd\u662f\u8def\u7531\u5668\uff09 \u96c6\u7ebf\u5668\uff1a\u5df2\u8fc7\u65f6\uff0c\u7528\u6765\u8fde\u63a5\u591a\u6001\u7535\u8111\uff0c\u7f3a\u70b9\uff1a\u6bcf\u6b21\u6536\u53d1\u6570\u636e\u90fd\u8fdb\u884c\u5e7f\u64ad\uff0c\u7f51\u7edc\u4f1a\u53d8\u7684\u62e5\u5835 \u4ea4\u6362\u673a\uff1a\u96c6\u7ebf\u5668\u7684\u5347\u7ea7\u7248\uff0c\u6709\u5b66\u4e60\u529f\u80fd\u77e5\u9053\u9700\u8981\u53d1\u9001\u7ed9\u54ea\u53f0\u8bbe\u5907\uff0c\u6839\u636e\u9700\u8981\u8fdb\u884c\u5355\u64ad\u3001\u5e7f\u64ad \u8def\u7531\u5668\uff1a\u8fde\u63a5\u591a\u4e2a\u4e0d\u540c\u7684\u7f51\u6bb5\uff0c\u8ba9\u4ed6\u4eec\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884c\u6536\u53d1\u6570\u636e\uff0c\u6bcf\u6b21\u6536\u5230\u6570\u636e\u540e\uff0cip\u4e0d\u53d8\uff0c\u4f46\u662fMAC\u5730\u5740\u4f1a\u53d8\u5316 DNS\uff1a\u7528\u6765\u89e3\u6790\u51faIP\uff08\u7c7b\u4f3c\u7535\u8bdd\u7c3f\uff09 http\u670d\u52a1\u5668\uff1a\u63d0\u4f9b\u6d4f\u89c8\u5668\u80fd\u591f\u8bbf\u95ee\u5230\u7684\u6570\u636e 11.2 NAT \u00b6 NAT(\u7f51\u7edc\u5730\u5740\u8f6c\u6362\u5668) \u00b6 \u8bf4\u660e \u00b6 \u5f53\u5728\u5bb6\u91cc\u7528\u5bbd\u5e26\u94fe\u63a5\u4e0a\u7f51\u65f6\uff0c\u4f1a\u628a\u7535\u8bdd\u7ebf(\u4eca\u5929\u5f88\u591a\u5730\u65b9\u90fd\u662f\u5149\u7ea4)---->\u8c03\u5236\u89e3\u8c03\u5236(\u7b80\u79f0\u732b)------->\u7535\u8111\u7b49\u8bbe\u5907 \u7535\u8111\u4f1a\u5f97\u5230\u6765\u81ea\u7535\u4fe1\u670d\u52a1\u5546\u7684\u4e00\u4e2a\u516c\u7f51ip\u5730\u5740\uff08\u5207\u8bb0\u53ea\u6709\u516c\u7f51ip\u5730\u5740\u624d\u80fd\u4e0a\u7f51\uff09\uff0c\u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u4e0a\u7f51happy... \u4e3a\u4e86\u80fd\u591f\u8ba9\u591a\u53f0\u8bbe\u5907\u90fd\u53ef\u4ee5\u4e0a\u7f51\uff0c\u9700\u8981\u5c06\u6570\u636e\u8fdb\u884c\u201c\u5206\u6d41\u201d \u7535\u8bdd\u7ebf(\u4eca\u5929\u5f88\u591a\u5730\u65b9\u90fd\u662f\u5149\u7ea4)---->\u8c03\u5236\u89e3\u8c03\u5236(\u7b80\u79f0\u732b)------->\u8def\u7531\u5668------>\u7535\u8111\u7b49\u8bbe\u5907 \u6b64\u65f6\u8def\u7531\u5668\u7684\u4e00\u7aef\u6709\u4e00\u4e2a\u516c\u7f51ip\u5730\u5740\uff0c\u5269\u4e0b\u76844\u4e2a\uff08\u8def\u7531\u5668\u578b\u53f7\u4e0d\u540c\u4e2a\u6570\u4e0d\u540c\uff09\u53ef\u4ee5\u63a5\u5165\u7535\u8111\u7b49\u8bbe\u5907 \u5e76\u4e14 \u5b83\u4eec\u7684ip\u662f\u79c1\u6709ip(\u4f8b\u5982 192.168.1.2) \u5f53\u4e00\u4e2a\u7535\u8111\uff08192.168.1.2\uff09\u4e0a\u7f51\u65f6\uff0c\u5148\u901a\u8fc7DNS\u534f\u8bae\u89e3\u6790\u51fa\u67d0\u4e2a\u57df\u540d\u5bf9\u5e94\u7684ip\uff0c\u7136\u540e \u53d1\u9001\u6570\u636e\u65f6,\u5728\u7ecf\u8fc7\u8def\u7531\u5668\u65f6\u8f6c\u6362\u4e3a\u516c\u7f51ip\u4ee5\u53ca\u8def\u7531\u5668\u81ea\u5df1\u5206\u914d\u7684\u4e34\u65f6\u7aef\u53e3 192.168.1.2:6789----->192.168.1.1 \u8def\u7531\u5668 116.226.52.212:6539------->\u732b---->\u4e07\u7ef4\u7f51 \u63a5\u6536\u6570\u636e\u65f6,\u5728\u7ecf\u8fc7\u8def\u7531\u5668\u65f6\u8f6c\u6362\u4e3a\u8def\u7531\u5668\u4e4b\u524d\u8bb0\u5f55\u7684ip\u4ee5\u53caport \u4e07\u7ef4\u7f51------->\u732b----->116.226.52.212:6539 \u8def\u7531\u5668 192.168.1.1 ---->192.168.1.2:6789","title":"005  11 \u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#_1","text":"","title":"\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#146-2","text":"","title":"1. 2\u53f0\u7535\u8111\u7684\u7f51\u7edc"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#_2","text":"\u5982\u679c\u4e24\u53f0\u7535\u8111\u4e4b\u95f4\u901a\u8fc7\u7f51\u7ebf\u8fde\u63a5\u662f\u53ef\u4ee5\u76f4\u63a5\u901a\u4fe1\u7684\uff0c\u4f46\u662f\u9700\u8981\u63d0\u524d\u8bbe\u7f6e\u597dip\u5730\u5740\u4ee5\u53ca\u7f51\u7edc\u63a9\u7801 \u5e76\u4e14ip\u5730\u5740\u9700\u8981\u63a7\u5236\u5728\u540c\u4e00\u7f51\u6bb5\u5185\uff0c\u4f8b\u5982 \u4e00\u53f0\u4e3a 192.168.1.1 \u53e6\u4e00\u53f0\u4e3a 192.168.1.2 \u5219\u53ef\u4ee5\u8fdb\u884c\u901a\u4fe1","title":"\u8bf4\u660e"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#246","text":"","title":"2. \u4f7f\u7528\u96c6\u7ebf\u5668\u7ec4\u6210\u4e00\u4e2a\u7f51\u7edc"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#_3","text":"\u5f53\u6709\u591a\u6001\u7535\u8111\u9700\u8981\u7ec4\u6210\u4e00\u4e2a\u7f51\u65f6\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u96c6\u7ebf\u5668\uff08Hub\uff09\u5c06\u5176\u94fe\u63a5\u5728\u4e00\u8d77 \u4e00\u822c\u60c5\u51b5\u4e0b\u96c6\u7ebf\u5668\u7684\u63a5\u53e3\u8f83\u5c11 \u96c6\u7ebf\u5668\u6709\u4e2a\u7f3a\u70b9\uff0c\u5b83\u4ee5\u5e7f\u64ad\u7684\u65b9\u5f0f\u8fdb\u884c\u53d1\u9001\u4efb\u4f55\u6570\u636e\uff0c\u5373\u5982\u679c\u96c6\u7ebf\u5668\u63a5\u6536\u5230\u6765\u81eaA\u7535\u8111\u7684\u6570\u636e\u672c\u6765\u662f\u60f3\u8f6c\u53d1\u7ed9B\u7535\u8111\uff0c\u5982\u679c\u6b64\u65f6\u5b83\u8fd8\u8fde\u63a5\u7740\u53e6\u5916\u4e24\u53f0\u7535\u8111C\u3001D\uff0c\u90a3\u4e48\u5b83\u4f1a\u628a\u8fd9\u4e2a\u6570\u636e\u7ed9\u6bcf\u4e2a\u7535\u8111\u90fd\u53d1\u9001\u4e00\u4efd\uff0c\u56e0\u6b64\u4f1a\u5bfc\u81f4\u7f51\u7edc\u62e5\u5835","title":"\u8bf4\u660e"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#346","text":"","title":"3. \u4f7f\u7528\u4ea4\u6362\u673a\u7ec4\u6210\u4e00\u4e2a\u7f51\u7edc"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#_4","text":"\u514b\u670d\u4e86\u96c6\u7ebf\u5668\u4ee5\u5e7f\u64ad\u53d1\u9001\u6570\u636e\u7684\u7f3a\u70b9\uff0c\u5f53\u9700\u8981\u5e7f\u64ad\u7684\u65f6\u5019\u53d1\u9001\u5e7f\u64ad\uff0c\u5f53\u9700\u8981\u5355\u64ad\u7684\u65f6\u5019\u53c8\u80fd\u591f\u4ee5\u5355\u64ad\u7684\u65b9\u5f0f\u8fdb\u884c\u53d1\u9001 \u5b83\u5df2\u7ecf\u66ff\u4ee3\u4e86\u4e4b\u524d\u7684\u96c6\u7ebf\u5668 \u4f01\u4e1a\u4e2d\u5c31\u662f\u7528\u4ea4\u6362\u673a\u6765\u5b8c\u6210\u591a\u6001\u7535\u8111\u8bbe\u5907\u7684\u94fe\u63a5\u6210\u7f51\u7edc\u7684","title":"\u8bf4\u660e"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#446","text":"","title":"4. \u4f7f\u7528\u8def\u7531\u5668\u8fde\u63a5\u591a\u4e2a\u7f51\u7edc"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#546","text":"\u8f83\u4e3a\u590d\u6742\u7684\u901a\u4fe1\u8fc7\u7a0b\u5982\uff1a\u8bbf\u95ee www.itheima.com \u9996\u5148\u7535\u8111\u83b7\u5f97\u57df\u540d\u4ee5\u540e\uff0c\u5148\u5411\u7f51\u5173\u4f7f\u7528arp\u8bf7\u6c42\u7f51\u5173\u7684mac\u5730\u5740\uff0c\u7136\u540e\u83b7\u53d6mac\u5730\u5740\u540e\u5c06\u57df\u540d\u53d1\u9001\u7ed9\u7f51\u5173\uff0c\u7f51\u5173\u8fde\u63a5\u4e92\u8054\u7f51\u8fde\u63a5dns\u670d\u52a1\u5668\uff0c\u7136\u540e\u4f20\u56de\u57df\u540d\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u7684ip\u5730\u5740\uff0c\u7136\u540e\u5ba2\u6237\u7aef\u7ecf\u8fc7\u7f51\u5173\u8ddf\u670d\u52a1\u7aef\u8fdb\u884c\u4e09\u6b21\u63e1\u624b\u8fdb\u884c\u8fde\u63a5\u3002\u7136\u540e\u8fdb\u884c\u6570\u636e\u7684\u4ea4\u4e92\u3002\u6570\u636e\u4ea4\u4e92\u5b8c\u6210\u8fdb\u884c\u56db\u6b21\u6325\u624b\u5b8c\u6210\u6570\u636e\u64cd\u4f5c","title":"5. \u901a\u4fe1\u8fc7\u7a0b\uff08\u590d\u6742\uff09"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#_5","text":"\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\u4e00\u4e2a\u7f51\u5740\u65f6\uff0c\u9700\u8981\u5c06\u5b83\u5148\u89e3\u6790\u51faip\u5730\u5740\u6765 \u5f53\u5f97\u5230ip\u5730\u5740\u4e4b\u540e\uff0c\u6d4f\u89c8\u5668\u4ee5tcp\u7684\u65b9\u5f0f3\u6b21\u63e1\u624b\u94fe\u63a5\u670d\u52a1\u5668 \u4ee5tcp\u7684\u65b9\u5f0f\u53d1\u9001http\u534f\u8bae\u7684\u8bf7\u6c42\u6570\u636e \u7ed9 \u670d\u52a1\u5668 \u670d\u52a1\u5668tcp\u7684\u65b9\u5f0f\u56de\u5e94http\u534f\u8bae\u7684\u5e94\u7b54\u6570\u636e \u7ed9\u6d4f\u89c8\u5668 5 ip\u76f8\u5f53\u4e8e\u76ee\u7684\u5730\u3002mac\u76f8\u5f53\u4e8e\u8def\u53e3 \u603b\u7ed3 MAC\u5730\u5740\uff1a\u5728\u8bbe\u5907\u4e0e\u8bbe\u5907\u4e4b\u95f4\u6570\u636e\u901a\u4fe1\u65f6\u7528\u6765\u6807\u8bb0\u6536\u53d1\u53cc\u65b9\uff08\u7f51\u5361\u7684\u5e8f\u5217\u53f7\uff09 IP\u5730\u5740\uff1a\u5728\u903b\u8f91\u4e0a\u6807\u8bb0\u4e00\u53f0\u7535\u8111\uff0c\u7528\u6765\u6307\u5f15\u6570\u636e\u5305\u7684\u6536\u53d1\u65b9\u5411\uff08\u76f8\u5f53\u4e8e\u7535\u8111\u7684\u5e8f\u5217\u53f7\uff09 \u7f51\u7edc\u63a9\u7801\uff1a\u7528\u6765\u533a\u5206ip\u5730\u5740\u7684\u7f51\u7edc\u53f7\u548c\u4e3b\u673a\u53f7 \u9ed8\u8ba4\u7f51\u5173\uff1a\u5f53\u9700\u8981\u53d1\u9001\u7684\u6570\u636e\u5305\u7684\u76ee\u7684ip\u4e0d\u5728\u672c\u7f51\u6bb5\u5185\u65f6\uff0c\u5c31\u4f1a\u53d1\u9001\u7ed9\u9ed8\u8ba4\u7684\u4e00\u53f0\u7535\u8111\uff0c\u6210\u4e3a\u7f51\u5173\uff08\u4e00\u822c\u90fd\u662f\u8def\u7531\u5668\uff09 \u96c6\u7ebf\u5668\uff1a\u5df2\u8fc7\u65f6\uff0c\u7528\u6765\u8fde\u63a5\u591a\u6001\u7535\u8111\uff0c\u7f3a\u70b9\uff1a\u6bcf\u6b21\u6536\u53d1\u6570\u636e\u90fd\u8fdb\u884c\u5e7f\u64ad\uff0c\u7f51\u7edc\u4f1a\u53d8\u7684\u62e5\u5835 \u4ea4\u6362\u673a\uff1a\u96c6\u7ebf\u5668\u7684\u5347\u7ea7\u7248\uff0c\u6709\u5b66\u4e60\u529f\u80fd\u77e5\u9053\u9700\u8981\u53d1\u9001\u7ed9\u54ea\u53f0\u8bbe\u5907\uff0c\u6839\u636e\u9700\u8981\u8fdb\u884c\u5355\u64ad\u3001\u5e7f\u64ad \u8def\u7531\u5668\uff1a\u8fde\u63a5\u591a\u4e2a\u4e0d\u540c\u7684\u7f51\u6bb5\uff0c\u8ba9\u4ed6\u4eec\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884c\u6536\u53d1\u6570\u636e\uff0c\u6bcf\u6b21\u6536\u5230\u6570\u636e\u540e\uff0cip\u4e0d\u53d8\uff0c\u4f46\u662fMAC\u5730\u5740\u4f1a\u53d8\u5316 DNS\uff1a\u7528\u6765\u89e3\u6790\u51faIP\uff08\u7c7b\u4f3c\u7535\u8bdd\u7c3f\uff09 http\u670d\u52a1\u5668\uff1a\u63d0\u4f9b\u6d4f\u89c8\u5668\u80fd\u591f\u8bbf\u95ee\u5230\u7684\u6570\u636e","title":"\u8bf4\u660e"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#112-nat","text":"","title":"11.2 NAT"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#nat","text":"","title":"NAT(\u7f51\u7edc\u5730\u5740\u8f6c\u6362\u5668)"},{"location":"005--11-\u7f51\u7edc\u901a\u4fe1\u8fc7\u7a0b/#_6","text":"\u5f53\u5728\u5bb6\u91cc\u7528\u5bbd\u5e26\u94fe\u63a5\u4e0a\u7f51\u65f6\uff0c\u4f1a\u628a\u7535\u8bdd\u7ebf(\u4eca\u5929\u5f88\u591a\u5730\u65b9\u90fd\u662f\u5149\u7ea4)---->\u8c03\u5236\u89e3\u8c03\u5236(\u7b80\u79f0\u732b)------->\u7535\u8111\u7b49\u8bbe\u5907 \u7535\u8111\u4f1a\u5f97\u5230\u6765\u81ea\u7535\u4fe1\u670d\u52a1\u5546\u7684\u4e00\u4e2a\u516c\u7f51ip\u5730\u5740\uff08\u5207\u8bb0\u53ea\u6709\u516c\u7f51ip\u5730\u5740\u624d\u80fd\u4e0a\u7f51\uff09\uff0c\u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u4e0a\u7f51happy... \u4e3a\u4e86\u80fd\u591f\u8ba9\u591a\u53f0\u8bbe\u5907\u90fd\u53ef\u4ee5\u4e0a\u7f51\uff0c\u9700\u8981\u5c06\u6570\u636e\u8fdb\u884c\u201c\u5206\u6d41\u201d \u7535\u8bdd\u7ebf(\u4eca\u5929\u5f88\u591a\u5730\u65b9\u90fd\u662f\u5149\u7ea4)---->\u8c03\u5236\u89e3\u8c03\u5236(\u7b80\u79f0\u732b)------->\u8def\u7531\u5668------>\u7535\u8111\u7b49\u8bbe\u5907 \u6b64\u65f6\u8def\u7531\u5668\u7684\u4e00\u7aef\u6709\u4e00\u4e2a\u516c\u7f51ip\u5730\u5740\uff0c\u5269\u4e0b\u76844\u4e2a\uff08\u8def\u7531\u5668\u578b\u53f7\u4e0d\u540c\u4e2a\u6570\u4e0d\u540c\uff09\u53ef\u4ee5\u63a5\u5165\u7535\u8111\u7b49\u8bbe\u5907 \u5e76\u4e14 \u5b83\u4eec\u7684ip\u662f\u79c1\u6709ip(\u4f8b\u5982 192.168.1.2) \u5f53\u4e00\u4e2a\u7535\u8111\uff08192.168.1.2\uff09\u4e0a\u7f51\u65f6\uff0c\u5148\u901a\u8fc7DNS\u534f\u8bae\u89e3\u6790\u51fa\u67d0\u4e2a\u57df\u540d\u5bf9\u5e94\u7684ip\uff0c\u7136\u540e \u53d1\u9001\u6570\u636e\u65f6,\u5728\u7ecf\u8fc7\u8def\u7531\u5668\u65f6\u8f6c\u6362\u4e3a\u516c\u7f51ip\u4ee5\u53ca\u8def\u7531\u5668\u81ea\u5df1\u5206\u914d\u7684\u4e34\u65f6\u7aef\u53e3 192.168.1.2:6789----->192.168.1.1 \u8def\u7531\u5668 116.226.52.212:6539------->\u732b---->\u4e07\u7ef4\u7f51 \u63a5\u6536\u6570\u636e\u65f6,\u5728\u7ecf\u8fc7\u8def\u7531\u5668\u65f6\u8f6c\u6362\u4e3a\u8def\u7531\u5668\u4e4b\u524d\u8bb0\u5f55\u7684ip\u4ee5\u53caport \u4e07\u7ef4\u7f51------->\u732b----->116.226.52.212:6539 \u8def\u7531\u5668 192.168.1.1 ---->192.168.1.2:6789","title":"\u8bf4\u660e"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/","text":"\u591a\u8fdb\u7a0b\u7684\u9762\u5411\u5bf9\u8c61\u7684web\u670d\u52a1\u5668 \u00b6 import socket import re import multiprocessing class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #\u670d\u52a1\u5668\u6302\u4e86\u4e5f\u4e0d\u4f1a\u7b49\u51e0\u5206\u949f\u624d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u7aef\u53e3 # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () #\u591a\u8fdb\u7a0b\u7248\u672c\u9700\u8981\u5173\u95ed,\u7ebf\u7a0b\u4e0d\u9700\u8981,\u7ebf\u7a0b\u662f\u8d44\u6e90\u5171\u4eab\u7684 # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () 1.\u9759\u6001\u8d44\u6e90\u548c\u52a8\u6001\u8d44\u6e90\u7684\u6982\u5ff5 \u00b6 \u7b80\u5355\u6765\u8bf4\uff1a \u9759\u6001\u8d44\u6e90\uff1a\u4e00\u822c\u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42\u5230web\u670d\u52a1\u5668\uff0cweb\u670d\u52a1\u5668\u4ece\u5185\u5b58\u5728\u53d6\u5230\u76f8\u5e94\u7684\u6587\u4ef6\uff0c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u5ba2\u6237\u7aef\u89e3\u6790\u5e76\u6e32\u67d3\u663e\u793a\u51fa\u6765\u3002 \u52a8\u6001\u8d44\u6e90\uff1a\u4e00\u822c\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u52a8\u6001\u8d44\u6e90\uff0c\u5148\u5c06\u8bf7\u6c42\u4ea4\u4e8eweb\u670d\u52a1\u5668\uff0cweb\u670d\u52a1\u5668\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u5904\u7406\u6570\u636e\u4e4b\u540e\uff0c\u5c06\u5185\u5bb9\u4ea4\u7ed9web\u670d\u52a1\u5668\uff0cweb\u670d\u52a1\u5668\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u89e3\u6790\u6e32\u67d3\u5904\u7406\u3002 2.\u9759\u6001\u8d44\u6e90\u548c\u52a8\u6001\u8d44\u6e90\u7684\u533a\u522b a.\u9759\u6001\u8d44\u6e90\u4e00\u822c\u90fd\u662f\u8bbe\u8ba1\u597d\u7684html\u9875\u9762\uff0c\u800c\u52a8\u6001\u8d44\u6e90\u4f9d\u9760\u8bbe\u8ba1\u597d\u7684\u7a0b\u5e8f\u6765\u5b9e\u73b0\u6309\u7167\u9700\u6c42\u7684\u52a8\u6001\u54cd\u5e94\uff1b b.\u9759\u6001\u8d44\u6e90\u7684\u4ea4\u4e92\u6027\u5dee\uff0c\u52a8\u6001\u8d44\u6e90\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u81ea\u7531\u5b9e\u73b0\uff1b c.\u5728\u670d\u52a1\u5668\u7684\u8fd0\u884c\u72b6\u6001\u4e0d\u540c\uff0c\u9759\u6001\u8d44\u6e90\u4e0d\u9700\u8981\u4e0e\u6570\u636e\u5e93\u53c2\u4e8e\u7a0b\u5e8f\u5904\u7406\uff0c\u52a8\u6001\u53ef\u80fd\u9700\u8981\u591a\u4e2a\u6570\u636e\u5e93\u7684\u53c2\u4e0e\u8fd0\u7b97\u3002 02-web\u670d\u52a1\u5668\u91cc\u96c6\u6210\u4e86\u89e3\u6790\u52a8\u6001\u8bf7\u6c42\u7684\u529f\u80fd \u00b6 import socket import re import multiprocessing import time class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 header = \"HTTP/1.1 200 OK \\r\\n \" header += \" \\r\\n \" body = \"hahahah %s \" % time . ctime () #ctime\u662f\u5f53\u524d\u65f6\u95f4 response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () 03-\u5c06web\u670d\u52a1\u5668\u548c\u903b\u8f91\u5904\u7406\u7684\u4ee3\u7801\u5206\u5f00 \u00b6 \u670d\u52a1\u5668\u4ee3\u7801 web_server.py \u00b6 import socket import re import multiprocessing import time import mini_frame #\u5bfc\u5165\u6211\u4eec\u52a8\u6001\u8d44\u6e90\u52a0\u8f7d\u7684\u5305 class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 header = \"HTTP/1.1 200 OK \\r\\n \" header += \" \\r\\n \" # body = \"hahahah %s \" % time.ctime() if file_name == \"/login.py\" : body = mini_frame . login () #\u8fd9\u91cc\u7684body\u5c31\u662f\u8c03\u7528\u51fd\u6570\u8fdb\u884c\u751f\u6210\u4e86 elif file_name == \"/register.py\" : body = mini_frame . register () response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () web\u6846\u67b6\u4ee3\u7801 mini_frame.py import time def login (): return \"welcome hahahh to our website.......time: %s \" % time . ctime () 04-\u5c06web\u670d\u52a1\u5668\u548c\u903b\u8f91\u5904\u7406\u7684\u4ee3\u7801\u5206\u5f00-\u5347\u7ea7\u7248\u672c \u00b6 web_server.py import socket import re import multiprocessing import time import mini_frame class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 header = \"HTTP/1.1 200 OK \\r\\n \" header += \" \\r\\n \" # body = \"hahahah %s \" % time.ctime() # if file_name == \"/login.py\": # body = mini_frame.login() # elif file_name == \"/register.py\": # body = mini_frame.register() body = mini_frame . application ( file_name ) #\u8fd9\u91cc\u5c31\u53ea\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u4f20\u9012\u51fd\u6570\u540d\u5373\u53ef response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame.py import time def login (): return \"i----login--welcome hahahh to our website.......time: %s \" % time . ctime () def register (): return \"-----register---welcome hahahh to our website.......time: %s \" % time . ctime () def profile (): return \"-----profile----welcome hahahh to our website.......time: %s \" % time . ctime () def application ( file_name ): if file_name == \"/login.py\" : return login () #\u8fd4\u56de\u8bf7\u6c42 elif file_name == \"/register.py\" : return register () else : return \"not found you page....\" \u4e0a\u9762\u7684\u53ea\u662f\u7528\u6765\u7406\u89e3,\u5b9e\u9645\u4e0a\u600e\u4e48\u4f1a\u7528\u81ea\u5df1\u5199\u7684\u8fd9\u4e9b\u73a9\u610f\u505a\u5f00\u53d1\u5462 18.1. \u670d\u52a1\u5668\u52a8\u6001\u8d44\u6e90\u8bf7\u6c42 \u00b6 \u670d\u52a1\u5668\u52a8\u6001\u8d44\u6e90\u8bf7\u6c42 \u00b6 1. \u6d4f\u89c8\u5668\u8bf7\u6c42\u52a8\u6001\u9875\u9762\u8fc7\u7a0b \u00b6 2. WSGI \u00b6 \u600e\u4e48\u5728\u4f60\u521a\u5efa\u7acb\u7684Web\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u4e00\u4e2a Django\u5e94\u7528 \u548c Flask\u5e94\u7528 \uff0c\u5982\u4f55\u4e0d\u505a\u4efb\u4f55\u6539\u53d8\u800c\u9002\u5e94\u4e0d\u540c\u7684web\u67b6\u6784\u5462\uff1f \u5728\u4ee5\u524d\uff0c\u9009\u62e9 Python web \u67b6\u6784 \u4f1a\u53d7\u5236\u4e8e\u53ef\u7528\u7684 web\u670d\u52a1\u5668 \uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u5982\u679c\u67b6\u6784\u548c\u670d\u52a1\u5668\u53ef\u4ee5\u534f\u540c\u5de5\u4f5c\uff0c\u90a3\u5c31\u597d\u4e86\uff1a \u4f46\u6709\u53ef\u80fd\u9762\u5bf9\uff08\u6216\u8005\u66fe\u6709\u8fc7\uff09\u4e0b\u9762\u7684\u95ee\u9898\uff0c\u5f53\u8981\u628a\u4e00\u4e2a\u670d\u52a1\u5668\u548c\u4e00\u4e2a\u67b6\u6784\u7ed3\u5408\u8d77\u6765\u65f6\uff0c\u5374\u53d1\u73b0\u4ed6\u4eec\u4e0d\u662f\u88ab\u8bbe\u8ba1\u6210\u534f\u540c\u5de5\u4f5c\u7684\uff1a \u90a3\u4e48\uff0c\u600e\u4e48\u53ef\u4ee5\u4e0d\u4fee\u6539\u670d\u52a1\u5668\u548c\u67b6\u6784\u4ee3\u7801\u800c\u786e\u4fdd\u53ef\u4ee5\u5728\u591a\u4e2a\u67b6\u6784\u4e0b\u8fd0\u884cweb\u670d\u52a1\u5668\u5462\uff1f\u7b54\u6848\u5c31\u662f Python Web Server Gateway Interface (\u6216\u7b80\u79f0 WSGI\uff0c\u8bfb\u4f5c\u201cwizgy\u201d)\u3002 WSGI\u5141\u8bb8\u5f00\u53d1\u8005\u5c06\u9009\u62e9web\u6846\u67b6\u548cweb\u670d\u52a1\u5668\u5206\u5f00\u3002\u53ef\u4ee5\u6df7\u5408\u5339\u914dweb\u670d\u52a1\u5668\u548cweb\u6846\u67b6\uff0c\u9009\u62e9\u4e00\u4e2a\u9002\u5408\u7684\u914d\u5bf9\u3002\u6bd4\u5982,\u53ef\u4ee5\u5728Gunicorn \u6216\u8005 Nginx/uWSGI \u6216\u8005 Waitress\u4e0a\u8fd0\u884c Django, Flask, \u6216 Pyramid\u3002\u771f\u6b63\u7684\u6df7\u5408\u5339\u914d\uff0c\u5f97\u76ca\u4e8eWSGI\u540c\u65f6\u652f\u6301\u670d\u52a1\u5668\u548c\u67b6\u6784\uff1a web\u670d\u52a1\u5668\u5fc5\u987b\u5177\u5907WSGI\u63a5\u53e3\uff0c\u6240\u6709\u7684\u73b0\u4ee3Python Web\u6846\u67b6\u90fd\u5df2\u5177\u5907WSGI\u63a5\u53e3\uff0c\u5b83\u8ba9\u4f60\u4e0d\u5bf9\u4ee3\u7801\u4f5c\u4fee\u6539\u5c31\u80fd\u4f7f\u670d\u52a1\u5668\u548c\u7279\u70b9\u7684web\u6846\u67b6\u534f\u540c\u5de5\u4f5c\u3002 WSGI\u7531web\u670d\u52a1\u5668\u652f\u6301\uff0c\u800cweb\u6846\u67b6\u5141\u8bb8\u4f60\u9009\u62e9\u9002\u5408\u81ea\u5df1\u7684\u914d\u5bf9\uff0c\u4f46\u5b83\u540c\u6837\u5bf9\u4e8e\u670d\u52a1\u5668\u548c\u6846\u67b6\u5f00\u53d1\u8005\u63d0\u4f9b\u4fbf\u5229\u4f7f\u4ed6\u4eec\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u81ea\u5df1\u504f\u7231\u7684\u9886\u57df\u548c\u4e13\u957f\u800c\u4e0d\u81f3\u4e8e\u76f8\u4e92\u7275\u5236\u3002\u5176\u4ed6\u8bed\u8a00\u4e5f\u6709\u7c7b\u4f3c\u63a5\u53e3\uff1ajava\u6709Servlet API\uff0cRuby \u6709 Rack\u3002 3.\u5b9a\u4e49WSGI\u63a5\u53e3 \u00b6 WSGI\u63a5\u53e3\u5b9a\u4e49\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u53ea\u8981\u6c42Web\u5f00\u53d1\u8005\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u54cd\u5e94HTTP\u8bf7\u6c42\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684Web\u7248\u672c\u7684\u201cHello World!\u201d\uff1a def application ( environ , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html' )]) return 'Hello World!' \u4e0a\u9762\u7684 application() \u51fd\u6570\u5c31\u662f\u7b26\u5408WSGI\u6807\u51c6\u7684\u4e00\u4e2aHTTP\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1a environ\uff1a\u4e00\u4e2a\u5305\u542b\u6240\u6709HTTP\u8bf7\u6c42\u4fe1\u606f\u7684dict\u5bf9\u8c61\uff1b start_response\uff1a\u4e00\u4e2a\u53d1\u9001HTTP\u54cd\u5e94\u7684\u51fd\u6570\u3002 \u6574\u4e2a application() \u51fd\u6570\u672c\u8eab\u6ca1\u6709\u6d89\u53ca\u5230\u4efb\u4f55\u89e3\u6790HTTP\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u5e95\u5c42web\u670d\u52a1\u5668\u89e3\u6790\u90e8\u5206\u548c\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u90e8\u5206\u8fdb\u884c\u4e86\u5206\u79bb\uff0c\u8fd9\u6837\u5f00\u53d1\u8005\u5c31\u53ef\u4ee5\u4e13\u5fc3\u505a\u4e00\u4e2a\u9886\u57df\u4e86 \u4e0d\u8fc7\uff0c\u7b49\u7b49\uff0c\u8fd9\u4e2a application() \u51fd\u6570\u600e\u4e48\u8c03\u7528\uff1f\u5982\u679c\u6211\u4eec\u81ea\u5df1\u8c03\u7528\uff0c\u4e24\u4e2a\u53c2\u6570environ\u548cstart_response\u6211\u4eec\u6ca1\u6cd5\u63d0\u4f9b\uff0c\u8fd4\u56de\u7684str\u4e5f\u6ca1\u6cd5\u53d1\u7ed9\u6d4f\u89c8\u5668\u3002 \u6240\u4ee5 application() \u51fd\u6570\u5fc5\u987b\u7531WSGI\u670d\u52a1\u5668\u6765\u8c03\u7528\u3002\u6709\u5f88\u591a\u7b26\u5408WSGI\u89c4\u8303\u7684\u670d\u52a1\u5668\u3002\u800c\u6211\u4eec\u6b64\u65f6\u7684web\u670d\u52a1\u5668\u9879\u76ee\u7684\u76ee\u7684\u5c31\u662f\u505a\u4e00\u4e2a\u65e2\u80fd\u89e3\u6790\u9759\u6001\u7f51\u9875\u8fd8\u53ef\u4ee5\u89e3\u6790\u52a8\u6001\u7f51\u9875\u7684\u670d\u52a1\u5668 4. web\u670d\u52a1\u5668-----WSGI\u534f\u8bae---->web\u6846\u67b6 \u4f20\u9012\u7684\u5b57\u5178 \u00b6 { 'HTTP_ACCEPT_LANGUAGE' : 'zh-cn' , 'wsgi.file_wrapper' : < built - infunctionuwsgi_sendfile > , 'HTTP_UPGRADE_INSECURE_REQUESTS' : '1' , 'uwsgi.version' : b '2.0.15' , 'REMOTE_ADDR' : '172.16.7.1' , 'wsgi.errors' : < _io . TextIOWrappername = 2 mode = 'w' encoding = 'UTF-8' > , 'wsgi.version' : ( 1 , 0 ), 'REMOTE_PORT' : '40432' , 'REQUEST_URI' : '/' , 'SERVER_PORT' : '8000' , 'wsgi.multithread' : False , 'HTTP_ACCEPT' : 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' , 'HTTP_HOST' : '172.16.7.152: 8000' , 'wsgi.run_once' : False , 'wsgi.input' : < uwsgi . _Inputobjectat0x7f7faecdc9c0 > , 'SERVER_PROTOCOL' : 'HTTP/1.1' , 'REQUEST_METHOD' : 'GET' , 'HTTP_ACCEPT_ENCODING' : 'gzip,deflate' , 'HTTP_CONNECTION' : 'keep-alive' , 'uwsgi.node' : b 'ubuntu' , 'HTTP_DNT' : '1' , 'UWSGI_ROUTER' : 'http' , 'SCRIPT_NAME' : '' , 'wsgi.multiprocess' : False , 'QUERY_STRING' : '' , 'PATH_INFO' : '/index.html' , 'wsgi.url_scheme' : 'http' , 'HTTP_USER_AGENT' : 'Mozilla/5.0(Macintosh;IntelMacOSX10_12_5)AppleWebKit/603.2.4(KHTML,likeGecko)Version/10.1.1Safari/603.2.4' , 'SERVER_NAME' : 'ubuntu' } 18.2. \u5e94\u7528\u7a0b\u5e8f\u793a\u4f8b \u00b6 \u5e94\u7528\u7a0b\u5e8f\u793a\u4f8b import time def application ( environ , start_response ): status = '200 OK' response_headers = [( 'Content-Type' , 'text/html' )] start_response ( status , response_headers ) return str ( environ ) + '==Hello world from a simple WSGI application!---> %s \\n ' % time . ctime () web_server.py import socket import re import multiprocessing import time import mini_frame class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () body = mini_frame . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status for temp in self . headers : header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame.py def application ( environ , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....' 06-\u901a\u8fc7\u4f20\u9012\u5b57\u5178\u5b9e\u73b0\u6d4f\u89c8\u5668\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u4e00\u6837\u76f8\u5e94\u7684\u4e0d\u4e00\u6837 \u00b6 import socket import re import multiprocessing import time import mini_frame class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () # \u8fd9\u4e2a\u5b57\u5178\u4e2d\u5b58\u653e\u7684\u662fweb\u670d\u52a1\u5668\u8981\u4f20\u9012\u7ed9 web\u6846\u67b6\u7684\u6570\u636e\u4fe1\u606f env [ 'PATH_INFO' ] = file_name # {\"PATH_INFO\": \"/index.py\"} body = mini_frame . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status #\u5c06\u72b6\u6001\u4fe1\u606f\u5199\u5230\u5934\u4e0a for temp in self . headers : #\u5c06\u5176\u4ed6\u7684\u6846\u67b6\u8fd4\u56de\u7684\u5143\u7ec4\u901a\u8fc7for\u5faa\u73af\u7ed9\u53d8\u6210 .. : ..\u7684\u5f62\u5f0f,\u4e00\u4e2a\u5143\u7ec4\u5360\u4e00\u884c header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () #\u628a\u670d\u52a1\u5668\u7684\u4fe1\u606f\u8ddf\u6846\u67b6\u7684\u4fe1\u606f\u8fd4\u56de def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] #\u670d\u52a1\u5668\u7248\u672c\u7684\u4fe1\u606f\u5199\u5728\u670d\u52a1\u5668\u4ee3\u7801\u4e2d self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame def index (): return \"\u8fd9\u662f\u4e3b\u9875\" def login (): return \"\u8fd9\u662f\u767b\u5f55\u9875\u9762\" def application ( env , start_response ): #charset=utf-8\u8bbe\u7f6e\u6d4f\u89c8\u5668\u7f16\u7801 start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) #\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u76f4\u63a5\u5bf9\u53d8\u91cf\u8fdb\u884c \u8d4b\u503c\u7684,\u5389\u5bb3\u4e86 file_name = env [ 'PATH_INFO' ] # file_name = \"/index.py\" if file_name == \"/index.py\" : return index () elif file_name == \"/login.py\" : return login () else : return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....' 07-\u5b9e\u73b0\u6a21\u677f\u6587\u4ef6 \u00b6 web_server.py import socket import re import multiprocessing import time import dynamic.mini_frame class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./static\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response ic.mini_frame.applicationbody\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () # \u8fd9\u4e2a\u5b57\u5178\u4e2d\u5b58\u653e\u7684\u662fweb\u670d\u52a1\u5668\u8981\u4f20\u9012\u7ed9 web\u6846\u67b6\u7684\u6570\u636e\u4fe1\u606f env [ 'PATH_INFO' ] = file_name # {\"PATH_INFO\": \"/index.py\"} body = dynamic . mini_frame . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status for temp in self . headers : header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame.py def index (): with open ( \"./templates/index.html\" , encoding = \"utf-8\" ) as f : #\u6ce8\u610f\u7f16\u7801\u7684\u683c\u5f0f content = f . read () return content def center (): with open ( \"./templates/center.html\" , encoding = \"utf-8\" ) as f : return f . read () def application ( env , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) file_name = env [ 'PATH_INFO' ] # file_name = \"/index.py\" if file_name == \"/index.py\" : return index () elif file_name == \"/center.py\" : return center () else : return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....' 09-\u8fd0\u884cweb\u670d\u52a1\u5668\u65f6\u6307\u5b9a\u7aef\u53e3\u4ee5\u53ca\u6846\u67b6 \u00b6 mini_frame.py import re def index (): with open ( \"./templates/index.html\" ) as f : content = f . read () my_stock_info = \"\u54c8\u54c8\u54c8\u54c8 \u8fd9\u662f\u4f60\u7684\u672c\u6708\u540d\u79f0.....\" content = re . sub ( r \"\\{ %c ontent%\\}\" , my_stock_info , content ) return content def center (): with open ( \"./templates/center.html\" ) as f : content = f . read () my_stock_info = \"\u8fd9\u91cc\u662f\u4ecemysql\u67e5\u8be2\u51fa\u6765\u7684\u6570\u636e\u3002\u3002\u3002\" content = re . sub ( r \"\\{ %c ontent%\\}\" , my_stock_info , content ) return content def application ( env , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) file_name = env [ 'PATH_INFO' ] # file_name = \"/index.py\" if file_name == \"/index.py\" : return index () elif file_name == \"/center.py\" : return center () else : return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....' web_server.py import socket import re import multiprocessing import time # import dynamic.mini_frame import sys class WSGIServer ( object ): def __init__ ( self , port , app ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , port )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) self . application = app def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./static\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response ic.mini_frame.applicationbody\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () # \u8fd9\u4e2a\u5b57\u5178\u4e2d\u5b58\u653e\u7684\u662fweb\u670d\u52a1\u5668\u8981\u4f20\u9012\u7ed9 web\u6846\u67b6\u7684\u6570\u636e\u4fe1\u606f env [ 'PATH_INFO' ] = file_name # {\"PATH_INFO\": \"/index.py\"} # body = dynamic.mini_frame.application(env, self.set_response_header) body = self . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status for temp in self . headers : header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" if len ( sys . argv ) == 3 : try : port = int ( sys . argv [ 1 ]) # 7890 frame_app_name = sys . argv [ 2 ] # mini_frame:application except Exception as ret : print ( \"\u7aef\u53e3\u8f93\u5165\u9519\u8bef\u3002\u3002\u3002\u3002\u3002\" ) return else : print ( \"\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c:\" ) print ( \"python3 xxxx.py 7890 mini_frame:application\" ) return # mini_frame:application ret = re . match ( r \"([^:]+):(.*)\" , frame_app_name ) if ret : frame_name = ret . group ( 1 ) # mini_frame app_name = ret . group ( 2 ) # application else : print ( \"\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c:\" ) print ( \"python3 xxxx.py 7890 mini_frame:application\" ) return sys . path . append ( \"./dynamic\" ) #\u6dfb\u52a0\u8fd9\u4e2a\u8def\u5f84.\u4e0b\u9762\u5bfc\u6a21\u5757\u7684\u65f6\u5019\u624d\u77e5\u9053\u6709\u8fd9\u4e48\u4e2a\u8def\u5f84\u53ef\u4ee5\u4f7f\u7528 # import frame_name --->\u627eframe_name.py frame = __import__ ( frame_name ) # \u8fd4\u56de\u503c\u6807\u8bb0\u8fd9 \u5bfc\u5165\u7684\u8fd9\u4e2a\u6a21\u5757(\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528import,\u5c31\u4f1a\u8ba4\u4e3a\u4f7f\u7528\u7684\u662fframe_name\u5305\u800c\u4e0d\u662f\u53d8\u91cf\u4ee3\u8868\u7684\u610f\u601d) #\u4e0a\u9762\u662f\u5bfc\u5305,\u4e0b\u9762\u662f\u627e\u51fd\u6570(\u4f7f\u7528\u7684\u662fgetattr\u51fd\u6570) app = getattr ( frame , app_name ) # \u6b64\u65f6app\u5c31\u6307\u5411\u4e86 dynamic/mini_frame\u6a21\u5757\u4e2d\u7684application\u8fd9\u4e2a\u51fd\u6570 # print(app) wsgi_server = WSGIServer ( port , app ) #\u5c06\u8fd9\u4e2a\u51fd\u6570\u4f20\u9012\u8fdb\u53bb wsgi_server . run_forever () if __name__ == \"__main__\" : main () 10-\u8ba9web\u670d\u52a1\u5668\u652f\u6301\u914d\u7f6e\u6587\u4ef6 \u00b6 run.sh \u8fd0\u884c\u811a\u672c python3 web_server.py 7890 mini_frame:application web_server.conf \u8def\u5f84\u914d\u7f6e\u6587\u4ef6 { \"static_path\" : \"./static\" , \"dynamic_path\" : \"./dynamic\" } web_server.py import socket import re import multiprocessing import time # import dynamic.mini_frame import sys class WSGIServer ( object ): def __init__ ( self , port , app , static_path ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , port )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) self . application = app self . static_path = static_path #\u9759\u6001\u8d44\u6e90\u7684\u8def\u5f84 def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( self . static_path + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response ic.mini_frame.applicationbody\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () # \u8fd9\u4e2a\u5b57\u5178\u4e2d\u5b58\u653e\u7684\u662fweb\u670d\u52a1\u5668\u8981\u4f20\u9012\u7ed9 web\u6846\u67b6\u7684\u6570\u636e\u4fe1\u606f env [ 'PATH_INFO' ] = file_name # {\"PATH_INFO\": \"/index.py\"} # body = dynamic.mini_frame.application(env, self.set_response_header) body = self . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status for temp in self . headers : header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" if len ( sys . argv ) == 3 : try : port = int ( sys . argv [ 1 ]) # 7890 frame_app_name = sys . argv [ 2 ] # mini_frame:application except Exception as ret : print ( \"\u7aef\u53e3\u8f93\u5165\u9519\u8bef\u3002\u3002\u3002\u3002\u3002\" ) return else : print ( \"\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c:\" ) print ( \"python3 xxxx.py 7890 mini_frame:application\" ) return # mini_frame:application ret = re . match ( r \"([^:]+):(.*)\" , frame_app_name ) if ret : frame_name = ret . group ( 1 ) # mini_frame app_name = ret . group ( 2 ) # application else : print ( \"\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c:\" ) print ( \"python3 xxxx.py 7890 mini_frame:application\" ) return with open ( \"./web_server.conf\" ) as f : conf_info = eval ( f . read ()) #\u4f7f\u7528eval\u53d8\u6210\u6211\u4eec\u60f3\u8981\u7684\u5b57\u5178,\u540e\u9762\u770bpython\u4e2deval\u51fd\u6570 # \u6b64\u65f6 conf_info\u662f\u4e00\u4e2a\u5b57\u5178\u91cc\u9762\u7684\u6570\u636e\u4e3a\uff1a # { # \"static_path\":\"./static\", # \"dynamic_path\":\"./dynamic\" # } sys . path . append ( conf_info [ 'dynamic_path' ]) #\u8def\u5f84\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u8def\u5f84 # import frame_name --->\u627eframe_name.py frame = __import__ ( frame_name ) # \u8fd4\u56de\u503c\u6807\u8bb0\u8fd9 \u5bfc\u5165\u7684\u8fd9\u4e2a\u6a21\u677f app = getattr ( frame , app_name ) # \u6b64\u65f6app\u5c31\u6307\u5411\u4e86 dynamic/mini_frame\u6a21\u5757\u4e2d\u7684application\u8fd9\u4e2a\u51fd\u6570 # print(app) wsgi_server = WSGIServer ( port , app , conf_info [ 'static_path' ]) #\u4ece\u5b57\u5178\u4e2d\u5f97\u5230\u9759\u6001\u8d44\u6e90\u7684\u8def\u5f84 wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame.py import re def index (): with open ( \"./templates/index.html\" ) as f : content = f . read () my_stock_info = \"\u54c8\u54c8\u54c8\u54c8 \u8fd9\u662f\u4f60\u7684\u672c\u6708\u540d\u79f0.....\" content = re . sub ( r \"\\{ %c ontent%\\}\" , my_stock_info , content ) return content def center (): with open ( \"./templates/center.html\" ) as f : content = f . read () my_stock_info = \"\u8fd9\u91cc\u662f\u4ecemysql\u67e5\u8be2\u51fa\u6765\u7684\u6570\u636e\u3002\u3002\u3002\" content = re . sub ( r \"\\{ %c ontent%\\}\" , my_stock_info , content ) return content def application ( env , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) file_name = env [ 'PATH_INFO' ] # file_name = \"/index.py\" if file_name == \"/index.py\" : return index () elif file_name == \"/center.py\" : return center () else : return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....' 18.3. Web\u52a8\u6001\u670d\u52a1\u5668-\u57fa\u672c\u5b9e\u73b0 \u00b6 python\u9ad8\u7ea7 \u00b6 Web\u52a8\u6001\u670d\u52a1\u5668-\u57fa\u672c\u5b9e\u73b0 \u00b6 \u6587\u4ef6\u7ed3\u6784 \u00b6 \u251c\u2500\u2500 web_server.py \u251c\u2500\u2500 web \u2502 \u2514\u2500\u2500 my_web.py \u2514\u2500\u2500 html \u2514\u2500\u2500 index.html ..... web/my_web.py \u00b6 import time def application(environ, start_response): status = '200 OK' response_headers = [('Content-Type', 'text/html')] start_response(status, response_headers) return str(environ) + '==Hello world from a simple WSGI application!--->%s\\n' % time.ctime() web_server.py \u00b6 import select import time import socket import sys import re import multiprocessing class WSGIServer(object): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__(self, port, documents_root, app): # 1\\. \u521b\u5efa\u5957\u63a5\u5b57 self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 2\\. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.server_socket.bind((\"\", port)) # 3\\. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self.server_socket.listen(128) # \u8bbe\u5b9a\u8d44\u6e90\u6587\u4ef6\u7684\u8def\u5f84 self.documents_root = documents_root # \u8bbe\u5b9aweb\u6846\u67b6\u53ef\u4ee5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) self.app = app def run_forever(self): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True: new_socket, new_addr = self.server_socket.accept() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u6765\u5b8c\u6210\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4efb\u52a1 new_socket.settimeout(3) # 3s new_process = multiprocessing.Process(target=self.deal_with_request, args=(new_socket,)) new_process.start() new_socket.close() def deal_with_request(self, client_socket): \"\"\"\u4ee5\u957f\u94fe\u63a5\u7684\u65b9\u5f0f\uff0c\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" while True: try: request = client_socket.recv(1024).decode(\"utf-8\") except Exception as ret: print(\"========>\", ret) client_socket.close() return # \u5224\u65ad\u6d4f\u89c8\u5668\u662f\u5426\u5173\u95ed if not request: client_socket.close() return request_lines = request.splitlines() for i, line in enumerate(request_lines): print(i, line) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re.match(r\"([^/]*)([^ ]+)\", request_lines[0]) if ret: print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(1)) print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(2)) file_name = ret.group(2) if file_name == \"/\": file_name = \"/index.html\" # \u5982\u679c\u4e0d\u662f\u4ee5py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u8ba4\u4e3a\u662f\u666e\u901a\u7684\u6587\u4ef6 if not file_name.endswith(\".py\"): # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try: f = open(self.documents_root+file_name, \"rb\") except: response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found\\r\\n\" response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" response = response_header + response_body # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response.encode('utf-8')) else: content = f.read() f.close() response_body = content response_header = \"HTTP/1.1 200 OK\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response_header.encode('utf-8') + response_body) # \u4ee5.py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5c31\u8ba4\u4e3a\u662f\u6d4f\u89c8\u9700\u8981\u52a8\u6001\u7684\u9875\u9762 else: # \u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u91cc\u9762\u5b58\u653e\u9700\u8981\u4f20\u9012\u7ed9web\u6846\u67b6\u7684\u6570\u636e env = {} # \u5b58web\u8fd4\u56de\u7684\u6570\u636e response_body = self.app(env, self.set_response_headers) # \u5408\u5e76header\u548cbody response_header = \"HTTP/1.1 {status}\\r\\n\".format(status=self.headers[0]) response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % len(response_body) for temp_head in self.headers[1]: response_header += \"{0}:{1}\\r\\n\".format(*temp_head) response = response_header + \"\\r\\n\" response += response_body client_socket.send(response.encode('utf-8')) def set_response_headers(self, status, headers): \"\"\"\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4f1a\u5728 web\u6846\u67b6\u4e2d\u88ab\u9ed8\u8ba4\u8c03\u7528\"\"\" response_header_default = [ (\"Data\", time.ctime()), (\"Server\", \"ItCast-python mini web server\") ] # \u5c06\u72b6\u6001\u7801/\u76f8\u5e94\u5934\u4fe1\u606f\u5b58\u50a8\u8d77\u6765 # [\u5b57\u7b26\u4e32, [xxxxx, xxx2]] self.headers = [status, response_header_default + headers] # \u8bbe\u7f6e\u9759\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_static_document_root = \"./html\" # \u8bbe\u7f6e\u52a8\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_dynamic_document_root = \"./web\" def main(): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len(sys.argv) == 3: # \u83b7\u53d6web\u670d\u52a1\u5668\u7684port port = sys.argv[1] if port.isdigit(): port = int(port) # \u83b7\u53d6web\u670d\u52a1\u5668\u9700\u8981\u52a8\u6001\u8d44\u6e90\u65f6\uff0c\u8bbf\u95ee\u7684web\u6846\u67b6\u540d\u5b57 web_frame_module_app_name = sys.argv[2] else: print(\"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890 my_web_frame_name:application\") return print(\"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port:%s\" % port) # \u5c06\u52a8\u6001\u8def\u5f84\u5373\u5b58\u653epy\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6dfb\u52a0\u5230path\u4e2d\uff0c\u8fd9\u6837python\u5c31\u80fd\u591f\u627e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e86 sys.path.append(g_dynamic_document_root) ret = re.match(r\"([^:]*):(.*)\", web_frame_module_app_name) if ret: # \u83b7\u53d6\u6a21\u5757\u540d web_frame_module_name = ret.group(1) # \u83b7\u53d6\u53ef\u4ee5\u8c03\u7528web\u6846\u67b6\u7684\u5e94\u7528\u540d\u79f0 app_name = ret.group(2) # \u5bfc\u5165web\u6846\u67b6\u7684\u4e3b\u6a21\u5757 web_frame_module = __import__(web_frame_module_name) # \u83b7\u53d6\u90a3\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) app = getattr(web_frame_module, app_name) # print(app) # for test # \u542f\u52a8http\u670d\u52a1\u5668 http_server = WSGIServer(port, g_static_document_root, app) # \u8fd0\u884chttp\u670d\u52a1\u5668 http_server.run_forever() if __name__ == \"__main__\": main() \u8fd0\u884c \u00b6 1. \u6253\u5f00\u7ec8\u7aef\uff0c\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u5f00\u59cb\u670d\u52a1\u5668 \u00b6 python3 web_server.py my_web:application 2. \u6253\u5f00\u6d4f\u89c8\u5668 \u00b6 18.4. mini-web\u6846\u67b6-1-\u6587\u4ef6\u7ed3\u6784 \u00b6 python\u9ad8\u7ea7 \u00b6 mini web\u6846\u67b6-1-\u6587\u4ef6\u7ed3\u6784 \u00b6 \u6587\u4ef6\u7ed3\u6784 \u00b6 \u251c\u2500\u2500 dynamic ---\u5b58\u653epy\u6a21\u5757 \u2502 \u2514\u2500\u2500 my_web.py \u251c\u2500\u2500 templates ---\u5b58\u653e\u6a21\u677f\u6587\u4ef6 \u2502 \u251c\u2500\u2500 center.html \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 location.html \u2502 \u2514\u2500\u2500 update.html \u251c\u2500\u2500 static ---\u5b58\u653e\u9759\u6001\u7684\u8d44\u6e90\u6587\u4ef6 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u2502 \u251c\u2500\u2500 main.css \u2502 \u2502 \u2514\u2500\u2500 swiper.min.css \u2502 \u2514\u2500\u2500 js \u2502 \u251c\u2500\u2500 a.js \u2502 \u251c\u2500\u2500 bootstrap.min.js \u2502 \u251c\u2500\u2500 jquery-1.12.4.js \u2502 \u251c\u2500\u2500 jquery-1.12.4.min.js \u2502 \u251c\u2500\u2500 jquery.animate-colors.js \u2502 \u251c\u2500\u2500 jquery.animate-colors-min.js \u2502 \u251c\u2500\u2500 jquery.cookie.js \u2502 \u251c\u2500\u2500 jquery-ui.min.js \u2502 \u251c\u2500\u2500 server.js \u2502 \u251c\u2500\u2500 swiper.jquery.min.js \u2502 \u251c\u2500\u2500 swiper.min.js \u2502 \u2514\u2500\u2500 zepto.min.js \u2514\u2500\u2500 web_server.py ---mini web\u670d\u52a1\u5668 my_web.py \u00b6 import time def application(environ, start_response): status = '200 OK' response_headers = [('Content-Type', 'text/html')] start_response(status, response_headers) return str(environ) + '==Hello world from a simple WSGI application!--->%s\\n' % time.ctime() web_server.py \u00b6 import select import time import socket import sys import re import multiprocessing class WSGIServer(object): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__(self, port, documents_root, app): # 1\\. \u521b\u5efa\u5957\u63a5\u5b57 self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 2\\. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.server_socket.bind((\"\", port)) # 3\\. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self.server_socket.listen(128) # \u8bbe\u5b9a\u8d44\u6e90\u6587\u4ef6\u7684\u8def\u5f84 self.documents_root = documents_root # \u8bbe\u5b9aweb\u6846\u67b6\u53ef\u4ee5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) self.app = app def run_forever(self): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True: new_socket, new_addr = self.server_socket.accept() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u6765\u5b8c\u6210\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4efb\u52a1 new_socket.settimeout(3) # 3s new_process = multiprocessing.Process(target=self.deal_with_request, args=(new_socket,)) new_process.start() new_socket.close() def deal_with_request(self, client_socket): \"\"\"\u4ee5\u957f\u94fe\u63a5\u7684\u65b9\u5f0f\uff0c\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" while True: try: request = client_socket.recv(1024).decode(\"utf-8\") except Exception as ret: print(\"========>\", ret) client_socket.close() return # \u5224\u65ad\u6d4f\u89c8\u5668\u662f\u5426\u5173\u95ed if not request: client_socket.close() return request_lines = request.splitlines() for i, line in enumerate(request_lines): print(i, line) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re.match(r\"([^/]*)([^ ]+)\", request_lines[0]) if ret: print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(1)) print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(2)) file_name = ret.group(2) if file_name == \"/\": file_name = \"/index.html\" # \u5982\u679c\u4e0d\u662f\u4ee5py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u8ba4\u4e3a\u662f\u666e\u901a\u7684\u6587\u4ef6 if not file_name.endswith(\".py\"): # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try: f = open(self.documents_root+file_name, \"rb\") except: response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found\\r\\n\" response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" response = response_header + response_body # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response.encode('utf-8')) else: content = f.read() f.close() response_body = content response_header = \"HTTP/1.1 200 OK\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response_header.encode('utf-8') + response_body) # \u4ee5.py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5c31\u8ba4\u4e3a\u662f\u6d4f\u89c8\u9700\u8981\u52a8\u6001\u7684\u9875\u9762 else: # \u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u91cc\u9762\u5b58\u653e\u9700\u8981\u4f20\u9012\u7ed9web\u6846\u67b6\u7684\u6570\u636e env = dict() # \u5b58web\u8fd4\u56de\u7684\u6570\u636e response_body = self.app(env, self.set_response_headers) # \u5408\u5e76header\u548cbody response_header = \"HTTP/1.1 {status}\\r\\n\".format(status=self.headers[0]) response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % len(response_body) for temp_head in self.headers[1]: response_header += \"{0}:{1}\\r\\n\".format(*temp_head) response = response_header + \"\\r\\n\" response += response_body client_socket.send(response.encode('utf-8')) def set_response_headers(self, status, headers): \"\"\"\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4f1a\u5728 web\u6846\u67b6\u4e2d\u88ab\u9ed8\u8ba4\u8c03\u7528\"\"\" response_header_default = [ (\"Data\", time.time()), (\"Server\", \"ItCast-python mini web server\") ] # \u5c06\u72b6\u6001\u7801/\u76f8\u5e94\u5934\u4fe1\u606f\u5b58\u50a8\u8d77\u6765 # [\u5b57\u7b26\u4e32, [xxxxx, xxx2]] self.headers = [status, response_header_default + headers] # \u8bbe\u7f6e\u9759\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_static_document_root = \"./static\" # \u8bbe\u7f6e\u52a8\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_dynamic_document_root = \"./dynamic\" def main(): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len(sys.argv) == 3: # \u83b7\u53d6web\u670d\u52a1\u5668\u7684port port = sys.argv[1] if port.isdigit(): port = int(port) # \u83b7\u53d6web\u670d\u52a1\u5668\u9700\u8981\u52a8\u6001\u8d44\u6e90\u65f6\uff0c\u8bbf\u95ee\u7684web\u6846\u67b6\u540d\u5b57 web_frame_module_app_name = sys.argv[2] else: print(\"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890 my_web_frame_name:application\") return print(\"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port:%s\" % port) # \u5c06\u52a8\u6001\u8def\u5f84\u5373\u5b58\u653epy\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6dfb\u52a0\u5230path\u4e2d\uff0c\u8fd9\u6837python\u5c31\u80fd\u591f\u627e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e86 sys.path.append(g_dynamic_document_root) ret = re.match(r\"([^:]*):(.*)\", web_frame_module_app_name) if ret: # \u83b7\u53d6\u6a21\u5757\u540d web_frame_module_name = ret.group(1) # \u83b7\u53d6\u53ef\u4ee5\u8c03\u7528web\u6846\u67b6\u7684\u5e94\u7528\u540d\u79f0 app_name = ret.group(2) # \u5bfc\u5165web\u6846\u67b6\u7684\u4e3b\u6a21\u5757 web_frame_module = __import__(web_frame_module_name) # \u83b7\u53d6\u90a3\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) app = getattr(web_frame_module, app_name) # print(app) # for test # \u542f\u52a8http\u670d\u52a1\u5668 http_server = WSGIServer(port, g_static_document_root, app) # \u8fd0\u884chttp\u670d\u52a1\u5668 http_server.run_forever() if __name__ == \"__main__\": main() 18.5. mini-web\u6846\u67b6-2-\u663e\u793a\u9875\u9762 \u00b6 mini web\u6846\u67b6-2-\u663e\u793a\u9875\u9762 \u00b6 dynamic/my_web.py (\u66f4\u65b0) \u00b6 import time import os template_root = \"./templates\" def index(file_name): \"\"\"\u8fd4\u56deindex.py\u9700\u8981\u7684\u9875\u9762\u5185\u5bb9\"\"\" # return \"hahha\" + os.getcwd() # for test \u8def\u5f84\u95ee\u9898 try: file_name = file_name.replace(\".py\", \".html\") f = open(template_root + file_name) except Exception as ret: return \"%s\" % ret else: content = f.read() f.close() return content def center(file_name): \"\"\"\u8fd4\u56decenter.py\u9700\u8981\u7684\u9875\u9762\u5185\u5bb9\"\"\" # return \"hahha\" + os.getcwd() # for test \u8def\u5f84\u95ee\u9898 try: file_name = file_name.replace(\".py\", \".html\") f = open(template_root + file_name) except Exception as ret: return \"%s\" % ret else: content = f.read() f.close() return content def application(environ, start_response): status = '200 OK' response_headers = [('Content-Type', 'text/html')] start_response(status, response_headers) file_name = environ['PATH_INFO'] if file_name == \"/index.py\": return index(file_name) elif file_name == \"/center.py\": return center(file_name) else: return str(environ) + '==Hello world from a simple WSGI application!--->%s\\n' % time.ctime() web_server.py (\u66f4\u65b0) \u00b6 import select import time import socket import sys import re import multiprocessing class WSGIServer(object): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__(self, port, documents_root, app): # 1\\. \u521b\u5efa\u5957\u63a5\u5b57 self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 2\\. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.server_socket.bind((\"\", port)) # 3\\. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self.server_socket.listen(128) # \u8bbe\u5b9a\u8d44\u6e90\u6587\u4ef6\u7684\u8def\u5f84 self.documents_root = documents_root # \u8bbe\u5b9aweb\u6846\u67b6\u53ef\u4ee5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) self.app = app def run_forever(self): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True: new_socket, new_addr = self.server_socket.accept() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u6765\u5b8c\u6210\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4efb\u52a1 new_socket.settimeout(3) # 3s new_process = multiprocessing.Process(target=self.deal_with_request, args=(new_socket,)) new_process.start() new_socket.close() def deal_with_request(self, client_socket): \"\"\"\u4ee5\u957f\u94fe\u63a5\u7684\u65b9\u5f0f\uff0c\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" while True: try: request = client_socket.recv(1024).decode(\"utf-8\") except Exception as ret: print(\"========>\", ret) client_socket.close() return # \u5224\u65ad\u6d4f\u89c8\u5668\u662f\u5426\u5173\u95ed if not request: client_socket.close() return request_lines = request.splitlines() for i, line in enumerate(request_lines): print(i, line) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re.match(r\"([^/]*)([^ ]+)\", request_lines[0]) if ret: print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(1)) print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(2)) file_name = ret.group(2) if file_name == \"/\": file_name = \"/index.html\" # \u5982\u679c\u4e0d\u662f\u4ee5py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u8ba4\u4e3a\u662f\u666e\u901a\u7684\u6587\u4ef6 if not file_name.endswith(\".py\"): # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try: print(self.documents_root+file_name) f = open(self.documents_root+file_name, \"rb\") except: response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found\\r\\n\" response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" response = response_header + response_body # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response.encode('utf-8')) else: content = f.read() f.close() response_body = content response_header = \"HTTP/1.1 200 OK\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response_header.encode('utf-8') + response_body) # \u4ee5.py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5c31\u8ba4\u4e3a\u662f\u6d4f\u89c8\u9700\u8981\u52a8\u6001\u7684\u9875\u9762 else: # \u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u91cc\u9762\u5b58\u653e\u9700\u8981\u4f20\u9012\u7ed9web\u6846\u67b6\u7684\u6570\u636e env = dict() # ----------\u66f4\u65b0--------- env['PATH_INFO'] = file_name # \u4f8b\u5982 index.py # \u5b58web\u8fd4\u56de\u7684\u6570\u636e response_body = self.app(env, self.set_response_headers) # \u5408\u5e76header\u548cbody response_header = \"HTTP/1.1 {status}\\r\\n\".format(status=self.headers[0]) response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % len(response_body.encode(\"utf-8\")) for temp_head in self.headers[1]: response_header += \"{0}:{1}\\r\\n\".format(*temp_head) response = response_header + \"\\r\\n\" response += response_body client_socket.send(response.encode('utf-8')) def set_response_headers(self, status, headers): \"\"\"\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4f1a\u5728 web\u6846\u67b6\u4e2d\u88ab\u9ed8\u8ba4\u8c03\u7528\"\"\" response_header_default = [ (\"Data\", time.time()), (\"Server\", \"ItCast-python mini web server\") ] # \u5c06\u72b6\u6001\u7801/\u76f8\u5e94\u5934\u4fe1\u606f\u5b58\u50a8\u8d77\u6765 # [\u5b57\u7b26\u4e32, [xxxxx, xxx2]] self.headers = [status, response_header_default + headers] # \u8bbe\u7f6e\u9759\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_static_document_root = \"./static\" # \u8bbe\u7f6e\u52a8\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_dynamic_document_root = \"./dynamic\" def main(): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len(sys.argv) == 3: # \u83b7\u53d6web\u670d\u52a1\u5668\u7684port port = sys.argv[1] if port.isdigit(): port = int(port) # \u83b7\u53d6web\u670d\u52a1\u5668\u9700\u8981\u52a8\u6001\u8d44\u6e90\u65f6\uff0c\u8bbf\u95ee\u7684web\u6846\u67b6\u540d\u5b57 web_frame_module_app_name = sys.argv[2] else: print(\"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890 my_web_frame_name:app\") return print(\"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port:%s\" % port) # \u5c06\u52a8\u6001\u8def\u5f84\u5373\u5b58\u653epy\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6dfb\u52a0\u5230path\u4e2d\uff0c\u8fd9\u6837python\u5c31\u80fd\u591f\u627e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e86 sys.path.append(g_dynamic_document_root) ret = re.match(r\"([^:]*):(.*)\", web_frame_module_app_name) if ret: # \u83b7\u53d6\u6a21\u5757\u540d web_frame_module_name = ret.group(1) # \u83b7\u53d6\u53ef\u4ee5\u8c03\u7528web\u6846\u67b6\u7684\u5e94\u7528\u540d\u79f0 app_name = ret.group(2) # \u5bfc\u5165web\u6846\u67b6\u7684\u4e3b\u6a21\u5757 web_frame_module = __import__(web_frame_module_name) # \u83b7\u53d6\u90a3\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) app = getattr(web_frame_module, app_name) # print(app) # for test # \u542f\u52a8http\u670d\u52a1\u5668 http_server = WSGIServer(port, g_static_document_root, app) # \u8fd0\u884chttp\u670d\u52a1\u5668 http_server.run_forever() if __name__ == \"__main__\": main() \u6d4f\u89c8\u5668\u6253\u5f00\u770b\u6548\u679c \u00b6 18.6. mini-web\u6846\u67b6-3-\u66ff\u6362\u6a21\u677f \u00b6 mini web\u6846\u67b6-3-\u66ff\u6362\u6a21\u677f \u00b6 dynamic/my_web.py \u00b6 import time import os import re template_root = \"./templates\" def index(file_name): \"\"\"\u8fd4\u56deindex.py\u9700\u8981\u7684\u9875\u9762\u5185\u5bb9\"\"\" # return \"hahha\" + os.getcwd() # for test \u8def\u5f84\u95ee\u9898 try: file_name = file_name.replace(\".py\", \".html\") f = open(template_root + file_name) except Exception as ret: return \"%s\" % ret else: content = f.read() f.close() # --------\u66f4\u65b0------- data_from_mysql = \"\u6570\u636e\u8fd8\u6ca1\u6709\u656c\u8bf7\u671f\u5f85....\" content = re.sub(r\"\\{%content%\\}\", data_from_mysql, content) return content def center(file_name): \"\"\"\u8fd4\u56decenter.py\u9700\u8981\u7684\u9875\u9762\u5185\u5bb9\"\"\" # return \"hahha\" + os.getcwd() # for test \u8def\u5f84\u95ee\u9898 try: file_name = file_name.replace(\".py\", \".html\") f = open(template_root + file_name) except Exception as ret: return \"%s\" % ret else: content = f.read() f.close() # --------\u66f4\u65b0------- data_from_mysql = \"\u6682\u65f6\u6ca1\u6709\u6570\u636e,,,,~~~~(>_<)~~~~ \" content = re.sub(r\"\\{%content%\\}\", data_from_mysql, content) return content def application(environ, start_response): status = '200 OK' response_headers = [('Content-Type', 'text/html')] start_response(status, response_headers) file_name = environ['PATH_INFO'] if file_name == \"/index.py\": return index(file_name) elif file_name == \"/center.py\": return center(file_name) else: return str(environ) + '==Hello world from a simple WSGI application!--->%s\\n' % time.ctime() \u6d4f\u89c8\u5668\u6253\u5f00\u770b\u6548\u679c \u00b6","title":"\u591a\u8fdb\u7a0b\u7684\u9762\u5411\u5bf9\u8c61\u7684web\u670d\u52a1\u5668"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#web","text":"import socket import re import multiprocessing class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #\u670d\u52a1\u5668\u6302\u4e86\u4e5f\u4e0d\u4f1a\u7b49\u51e0\u5206\u949f\u624d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u7aef\u53e3 # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) # \u5173\u95ed\u5957\u63a5 new_socket . close () def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () #\u591a\u8fdb\u7a0b\u7248\u672c\u9700\u8981\u5173\u95ed,\u7ebf\u7a0b\u4e0d\u9700\u8981,\u7ebf\u7a0b\u662f\u8d44\u6e90\u5171\u4eab\u7684 # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main ()","title":"\u591a\u8fdb\u7a0b\u7684\u9762\u5411\u5bf9\u8c61\u7684web\u670d\u52a1\u5668"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#1","text":"\u7b80\u5355\u6765\u8bf4\uff1a \u9759\u6001\u8d44\u6e90\uff1a\u4e00\u822c\u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42\u5230web\u670d\u52a1\u5668\uff0cweb\u670d\u52a1\u5668\u4ece\u5185\u5b58\u5728\u53d6\u5230\u76f8\u5e94\u7684\u6587\u4ef6\uff0c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u5ba2\u6237\u7aef\u89e3\u6790\u5e76\u6e32\u67d3\u663e\u793a\u51fa\u6765\u3002 \u52a8\u6001\u8d44\u6e90\uff1a\u4e00\u822c\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u52a8\u6001\u8d44\u6e90\uff0c\u5148\u5c06\u8bf7\u6c42\u4ea4\u4e8eweb\u670d\u52a1\u5668\uff0cweb\u670d\u52a1\u5668\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u5904\u7406\u6570\u636e\u4e4b\u540e\uff0c\u5c06\u5185\u5bb9\u4ea4\u7ed9web\u670d\u52a1\u5668\uff0cweb\u670d\u52a1\u5668\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u89e3\u6790\u6e32\u67d3\u5904\u7406\u3002 2.\u9759\u6001\u8d44\u6e90\u548c\u52a8\u6001\u8d44\u6e90\u7684\u533a\u522b a.\u9759\u6001\u8d44\u6e90\u4e00\u822c\u90fd\u662f\u8bbe\u8ba1\u597d\u7684html\u9875\u9762\uff0c\u800c\u52a8\u6001\u8d44\u6e90\u4f9d\u9760\u8bbe\u8ba1\u597d\u7684\u7a0b\u5e8f\u6765\u5b9e\u73b0\u6309\u7167\u9700\u6c42\u7684\u52a8\u6001\u54cd\u5e94\uff1b b.\u9759\u6001\u8d44\u6e90\u7684\u4ea4\u4e92\u6027\u5dee\uff0c\u52a8\u6001\u8d44\u6e90\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u81ea\u7531\u5b9e\u73b0\uff1b c.\u5728\u670d\u52a1\u5668\u7684\u8fd0\u884c\u72b6\u6001\u4e0d\u540c\uff0c\u9759\u6001\u8d44\u6e90\u4e0d\u9700\u8981\u4e0e\u6570\u636e\u5e93\u53c2\u4e8e\u7a0b\u5e8f\u5904\u7406\uff0c\u52a8\u6001\u53ef\u80fd\u9700\u8981\u591a\u4e2a\u6570\u636e\u5e93\u7684\u53c2\u4e0e\u8fd0\u7b97\u3002","title":"1.\u9759\u6001\u8d44\u6e90\u548c\u52a8\u6001\u8d44\u6e90\u7684\u6982\u5ff5"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#02-web","text":"import socket import re import multiprocessing import time class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 header = \"HTTP/1.1 200 OK \\r\\n \" header += \" \\r\\n \" body = \"hahahah %s \" % time . ctime () #ctime\u662f\u5f53\u524d\u65f6\u95f4 response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main ()","title":"02-web\u670d\u52a1\u5668\u91cc\u96c6\u6210\u4e86\u89e3\u6790\u52a8\u6001\u8bf7\u6c42\u7684\u529f\u80fd"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#03-web","text":"","title":"03-\u5c06web\u670d\u52a1\u5668\u548c\u903b\u8f91\u5904\u7406\u7684\u4ee3\u7801\u5206\u5f00"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#web_serverpy","text":"import socket import re import multiprocessing import time import mini_frame #\u5bfc\u5165\u6211\u4eec\u52a8\u6001\u8d44\u6e90\u52a0\u8f7d\u7684\u5305 class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 header = \"HTTP/1.1 200 OK \\r\\n \" header += \" \\r\\n \" # body = \"hahahah %s \" % time.ctime() if file_name == \"/login.py\" : body = mini_frame . login () #\u8fd9\u91cc\u7684body\u5c31\u662f\u8c03\u7528\u51fd\u6570\u8fdb\u884c\u751f\u6210\u4e86 elif file_name == \"/register.py\" : body = mini_frame . register () response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () web\u6846\u67b6\u4ee3\u7801 mini_frame.py import time def login (): return \"welcome hahahh to our website.......time: %s \" % time . ctime ()","title":"\u670d\u52a1\u5668\u4ee3\u7801 web_server.py"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#04-web-","text":"web_server.py import socket import re import multiprocessing import time import mini_frame class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 header = \"HTTP/1.1 200 OK \\r\\n \" header += \" \\r\\n \" # body = \"hahahah %s \" % time.ctime() # if file_name == \"/login.py\": # body = mini_frame.login() # elif file_name == \"/register.py\": # body = mini_frame.register() body = mini_frame . application ( file_name ) #\u8fd9\u91cc\u5c31\u53ea\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u4f20\u9012\u51fd\u6570\u540d\u5373\u53ef response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame.py import time def login (): return \"i----login--welcome hahahh to our website.......time: %s \" % time . ctime () def register (): return \"-----register---welcome hahahh to our website.......time: %s \" % time . ctime () def profile (): return \"-----profile----welcome hahahh to our website.......time: %s \" % time . ctime () def application ( file_name ): if file_name == \"/login.py\" : return login () #\u8fd4\u56de\u8bf7\u6c42 elif file_name == \"/register.py\" : return register () else : return \"not found you page....\" \u4e0a\u9762\u7684\u53ea\u662f\u7528\u6765\u7406\u89e3,\u5b9e\u9645\u4e0a\u600e\u4e48\u4f1a\u7528\u81ea\u5df1\u5199\u7684\u8fd9\u4e9b\u73a9\u610f\u505a\u5f00\u53d1\u5462","title":"04-\u5c06web\u670d\u52a1\u5668\u548c\u903b\u8f91\u5904\u7406\u7684\u4ee3\u7801\u5206\u5f00-\u5347\u7ea7\u7248\u672c"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#181","text":"","title":"18.1. \u670d\u52a1\u5668\u52a8\u6001\u8d44\u6e90\u8bf7\u6c42"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#_1","text":"","title":"\u670d\u52a1\u5668\u52a8\u6001\u8d44\u6e90\u8bf7\u6c42"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#146","text":"","title":"1. \u6d4f\u89c8\u5668\u8bf7\u6c42\u52a8\u6001\u9875\u9762\u8fc7\u7a0b"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#2-wsgi","text":"\u600e\u4e48\u5728\u4f60\u521a\u5efa\u7acb\u7684Web\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u4e00\u4e2a Django\u5e94\u7528 \u548c Flask\u5e94\u7528 \uff0c\u5982\u4f55\u4e0d\u505a\u4efb\u4f55\u6539\u53d8\u800c\u9002\u5e94\u4e0d\u540c\u7684web\u67b6\u6784\u5462\uff1f \u5728\u4ee5\u524d\uff0c\u9009\u62e9 Python web \u67b6\u6784 \u4f1a\u53d7\u5236\u4e8e\u53ef\u7528\u7684 web\u670d\u52a1\u5668 \uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u5982\u679c\u67b6\u6784\u548c\u670d\u52a1\u5668\u53ef\u4ee5\u534f\u540c\u5de5\u4f5c\uff0c\u90a3\u5c31\u597d\u4e86\uff1a \u4f46\u6709\u53ef\u80fd\u9762\u5bf9\uff08\u6216\u8005\u66fe\u6709\u8fc7\uff09\u4e0b\u9762\u7684\u95ee\u9898\uff0c\u5f53\u8981\u628a\u4e00\u4e2a\u670d\u52a1\u5668\u548c\u4e00\u4e2a\u67b6\u6784\u7ed3\u5408\u8d77\u6765\u65f6\uff0c\u5374\u53d1\u73b0\u4ed6\u4eec\u4e0d\u662f\u88ab\u8bbe\u8ba1\u6210\u534f\u540c\u5de5\u4f5c\u7684\uff1a \u90a3\u4e48\uff0c\u600e\u4e48\u53ef\u4ee5\u4e0d\u4fee\u6539\u670d\u52a1\u5668\u548c\u67b6\u6784\u4ee3\u7801\u800c\u786e\u4fdd\u53ef\u4ee5\u5728\u591a\u4e2a\u67b6\u6784\u4e0b\u8fd0\u884cweb\u670d\u52a1\u5668\u5462\uff1f\u7b54\u6848\u5c31\u662f Python Web Server Gateway Interface (\u6216\u7b80\u79f0 WSGI\uff0c\u8bfb\u4f5c\u201cwizgy\u201d)\u3002 WSGI\u5141\u8bb8\u5f00\u53d1\u8005\u5c06\u9009\u62e9web\u6846\u67b6\u548cweb\u670d\u52a1\u5668\u5206\u5f00\u3002\u53ef\u4ee5\u6df7\u5408\u5339\u914dweb\u670d\u52a1\u5668\u548cweb\u6846\u67b6\uff0c\u9009\u62e9\u4e00\u4e2a\u9002\u5408\u7684\u914d\u5bf9\u3002\u6bd4\u5982,\u53ef\u4ee5\u5728Gunicorn \u6216\u8005 Nginx/uWSGI \u6216\u8005 Waitress\u4e0a\u8fd0\u884c Django, Flask, \u6216 Pyramid\u3002\u771f\u6b63\u7684\u6df7\u5408\u5339\u914d\uff0c\u5f97\u76ca\u4e8eWSGI\u540c\u65f6\u652f\u6301\u670d\u52a1\u5668\u548c\u67b6\u6784\uff1a web\u670d\u52a1\u5668\u5fc5\u987b\u5177\u5907WSGI\u63a5\u53e3\uff0c\u6240\u6709\u7684\u73b0\u4ee3Python Web\u6846\u67b6\u90fd\u5df2\u5177\u5907WSGI\u63a5\u53e3\uff0c\u5b83\u8ba9\u4f60\u4e0d\u5bf9\u4ee3\u7801\u4f5c\u4fee\u6539\u5c31\u80fd\u4f7f\u670d\u52a1\u5668\u548c\u7279\u70b9\u7684web\u6846\u67b6\u534f\u540c\u5de5\u4f5c\u3002 WSGI\u7531web\u670d\u52a1\u5668\u652f\u6301\uff0c\u800cweb\u6846\u67b6\u5141\u8bb8\u4f60\u9009\u62e9\u9002\u5408\u81ea\u5df1\u7684\u914d\u5bf9\uff0c\u4f46\u5b83\u540c\u6837\u5bf9\u4e8e\u670d\u52a1\u5668\u548c\u6846\u67b6\u5f00\u53d1\u8005\u63d0\u4f9b\u4fbf\u5229\u4f7f\u4ed6\u4eec\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u81ea\u5df1\u504f\u7231\u7684\u9886\u57df\u548c\u4e13\u957f\u800c\u4e0d\u81f3\u4e8e\u76f8\u4e92\u7275\u5236\u3002\u5176\u4ed6\u8bed\u8a00\u4e5f\u6709\u7c7b\u4f3c\u63a5\u53e3\uff1ajava\u6709Servlet API\uff0cRuby \u6709 Rack\u3002","title":"2. WSGI"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#3wsgi","text":"WSGI\u63a5\u53e3\u5b9a\u4e49\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u53ea\u8981\u6c42Web\u5f00\u53d1\u8005\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u54cd\u5e94HTTP\u8bf7\u6c42\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684Web\u7248\u672c\u7684\u201cHello World!\u201d\uff1a def application ( environ , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html' )]) return 'Hello World!' \u4e0a\u9762\u7684 application() \u51fd\u6570\u5c31\u662f\u7b26\u5408WSGI\u6807\u51c6\u7684\u4e00\u4e2aHTTP\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1a environ\uff1a\u4e00\u4e2a\u5305\u542b\u6240\u6709HTTP\u8bf7\u6c42\u4fe1\u606f\u7684dict\u5bf9\u8c61\uff1b start_response\uff1a\u4e00\u4e2a\u53d1\u9001HTTP\u54cd\u5e94\u7684\u51fd\u6570\u3002 \u6574\u4e2a application() \u51fd\u6570\u672c\u8eab\u6ca1\u6709\u6d89\u53ca\u5230\u4efb\u4f55\u89e3\u6790HTTP\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u5e95\u5c42web\u670d\u52a1\u5668\u89e3\u6790\u90e8\u5206\u548c\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u90e8\u5206\u8fdb\u884c\u4e86\u5206\u79bb\uff0c\u8fd9\u6837\u5f00\u53d1\u8005\u5c31\u53ef\u4ee5\u4e13\u5fc3\u505a\u4e00\u4e2a\u9886\u57df\u4e86 \u4e0d\u8fc7\uff0c\u7b49\u7b49\uff0c\u8fd9\u4e2a application() \u51fd\u6570\u600e\u4e48\u8c03\u7528\uff1f\u5982\u679c\u6211\u4eec\u81ea\u5df1\u8c03\u7528\uff0c\u4e24\u4e2a\u53c2\u6570environ\u548cstart_response\u6211\u4eec\u6ca1\u6cd5\u63d0\u4f9b\uff0c\u8fd4\u56de\u7684str\u4e5f\u6ca1\u6cd5\u53d1\u7ed9\u6d4f\u89c8\u5668\u3002 \u6240\u4ee5 application() \u51fd\u6570\u5fc5\u987b\u7531WSGI\u670d\u52a1\u5668\u6765\u8c03\u7528\u3002\u6709\u5f88\u591a\u7b26\u5408WSGI\u89c4\u8303\u7684\u670d\u52a1\u5668\u3002\u800c\u6211\u4eec\u6b64\u65f6\u7684web\u670d\u52a1\u5668\u9879\u76ee\u7684\u76ee\u7684\u5c31\u662f\u505a\u4e00\u4e2a\u65e2\u80fd\u89e3\u6790\u9759\u6001\u7f51\u9875\u8fd8\u53ef\u4ee5\u89e3\u6790\u52a8\u6001\u7f51\u9875\u7684\u670d\u52a1\u5668","title":"3.\u5b9a\u4e49WSGI\u63a5\u53e3"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#446-web-wsgi-web","text":"{ 'HTTP_ACCEPT_LANGUAGE' : 'zh-cn' , 'wsgi.file_wrapper' : < built - infunctionuwsgi_sendfile > , 'HTTP_UPGRADE_INSECURE_REQUESTS' : '1' , 'uwsgi.version' : b '2.0.15' , 'REMOTE_ADDR' : '172.16.7.1' , 'wsgi.errors' : < _io . TextIOWrappername = 2 mode = 'w' encoding = 'UTF-8' > , 'wsgi.version' : ( 1 , 0 ), 'REMOTE_PORT' : '40432' , 'REQUEST_URI' : '/' , 'SERVER_PORT' : '8000' , 'wsgi.multithread' : False , 'HTTP_ACCEPT' : 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' , 'HTTP_HOST' : '172.16.7.152: 8000' , 'wsgi.run_once' : False , 'wsgi.input' : < uwsgi . _Inputobjectat0x7f7faecdc9c0 > , 'SERVER_PROTOCOL' : 'HTTP/1.1' , 'REQUEST_METHOD' : 'GET' , 'HTTP_ACCEPT_ENCODING' : 'gzip,deflate' , 'HTTP_CONNECTION' : 'keep-alive' , 'uwsgi.node' : b 'ubuntu' , 'HTTP_DNT' : '1' , 'UWSGI_ROUTER' : 'http' , 'SCRIPT_NAME' : '' , 'wsgi.multiprocess' : False , 'QUERY_STRING' : '' , 'PATH_INFO' : '/index.html' , 'wsgi.url_scheme' : 'http' , 'HTTP_USER_AGENT' : 'Mozilla/5.0(Macintosh;IntelMacOSX10_12_5)AppleWebKit/603.2.4(KHTML,likeGecko)Version/10.1.1Safari/603.2.4' , 'SERVER_NAME' : 'ubuntu' }","title":"4. web\u670d\u52a1\u5668-----WSGI\u534f\u8bae----&gt;web\u6846\u67b6 \u4f20\u9012\u7684\u5b57\u5178"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#182","text":"\u5e94\u7528\u7a0b\u5e8f\u793a\u4f8b import time def application ( environ , start_response ): status = '200 OK' response_headers = [( 'Content-Type' , 'text/html' )] start_response ( status , response_headers ) return str ( environ ) + '==Hello world from a simple WSGI application!---> %s \\n ' % time . ctime () web_server.py import socket import re import multiprocessing import time import mini_frame class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () body = mini_frame . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status for temp in self . headers : header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame.py def application ( environ , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....'","title":"18.2. \u5e94\u7528\u7a0b\u5e8f\u793a\u4f8b"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#06-","text":"import socket import re import multiprocessing import time import mini_frame class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./html\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response body\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () # \u8fd9\u4e2a\u5b57\u5178\u4e2d\u5b58\u653e\u7684\u662fweb\u670d\u52a1\u5668\u8981\u4f20\u9012\u7ed9 web\u6846\u67b6\u7684\u6570\u636e\u4fe1\u606f env [ 'PATH_INFO' ] = file_name # {\"PATH_INFO\": \"/index.py\"} body = mini_frame . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status #\u5c06\u72b6\u6001\u4fe1\u606f\u5199\u5230\u5934\u4e0a for temp in self . headers : #\u5c06\u5176\u4ed6\u7684\u6846\u67b6\u8fd4\u56de\u7684\u5143\u7ec4\u901a\u8fc7for\u5faa\u73af\u7ed9\u53d8\u6210 .. : ..\u7684\u5f62\u5f0f,\u4e00\u4e2a\u5143\u7ec4\u5360\u4e00\u884c header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () #\u628a\u670d\u52a1\u5668\u7684\u4fe1\u606f\u8ddf\u6846\u67b6\u7684\u4fe1\u606f\u8fd4\u56de def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] #\u670d\u52a1\u5668\u7248\u672c\u7684\u4fe1\u606f\u5199\u5728\u670d\u52a1\u5668\u4ee3\u7801\u4e2d self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame def index (): return \"\u8fd9\u662f\u4e3b\u9875\" def login (): return \"\u8fd9\u662f\u767b\u5f55\u9875\u9762\" def application ( env , start_response ): #charset=utf-8\u8bbe\u7f6e\u6d4f\u89c8\u5668\u7f16\u7801 start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) #\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u76f4\u63a5\u5bf9\u53d8\u91cf\u8fdb\u884c \u8d4b\u503c\u7684,\u5389\u5bb3\u4e86 file_name = env [ 'PATH_INFO' ] # file_name = \"/index.py\" if file_name == \"/index.py\" : return index () elif file_name == \"/login.py\" : return login () else : return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....'","title":"06-\u901a\u8fc7\u4f20\u9012\u5b57\u5178\u5b9e\u73b0\u6d4f\u89c8\u5668\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u4e00\u6837\u76f8\u5e94\u7684\u4e0d\u4e00\u6837"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#07-","text":"web_server.py import socket import re import multiprocessing import time import dynamic.mini_frame class WSGIServer ( object ): def __init__ ( self ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , 7890 )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./static\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response ic.mini_frame.applicationbody\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () # \u8fd9\u4e2a\u5b57\u5178\u4e2d\u5b58\u653e\u7684\u662fweb\u670d\u52a1\u5668\u8981\u4f20\u9012\u7ed9 web\u6846\u67b6\u7684\u6570\u636e\u4fe1\u606f env [ 'PATH_INFO' ] = file_name # {\"PATH_INFO\": \"/index.py\"} body = dynamic . mini_frame . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status for temp in self . headers : header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" wsgi_server = WSGIServer () wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame.py def index (): with open ( \"./templates/index.html\" , encoding = \"utf-8\" ) as f : #\u6ce8\u610f\u7f16\u7801\u7684\u683c\u5f0f content = f . read () return content def center (): with open ( \"./templates/center.html\" , encoding = \"utf-8\" ) as f : return f . read () def application ( env , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) file_name = env [ 'PATH_INFO' ] # file_name = \"/index.py\" if file_name == \"/index.py\" : return index () elif file_name == \"/center.py\" : return center () else : return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....'","title":"07-\u5b9e\u73b0\u6a21\u677f\u6587\u4ef6"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#09-web","text":"mini_frame.py import re def index (): with open ( \"./templates/index.html\" ) as f : content = f . read () my_stock_info = \"\u54c8\u54c8\u54c8\u54c8 \u8fd9\u662f\u4f60\u7684\u672c\u6708\u540d\u79f0.....\" content = re . sub ( r \"\\{ %c ontent%\\}\" , my_stock_info , content ) return content def center (): with open ( \"./templates/center.html\" ) as f : content = f . read () my_stock_info = \"\u8fd9\u91cc\u662f\u4ecemysql\u67e5\u8be2\u51fa\u6765\u7684\u6570\u636e\u3002\u3002\u3002\" content = re . sub ( r \"\\{ %c ontent%\\}\" , my_stock_info , content ) return content def application ( env , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) file_name = env [ 'PATH_INFO' ] # file_name = \"/index.py\" if file_name == \"/index.py\" : return index () elif file_name == \"/center.py\" : return center () else : return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....' web_server.py import socket import re import multiprocessing import time # import dynamic.mini_frame import sys class WSGIServer ( object ): def __init__ ( self , port , app ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , port )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) self . application = app def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( \"./static\" + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response ic.mini_frame.applicationbody\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () # \u8fd9\u4e2a\u5b57\u5178\u4e2d\u5b58\u653e\u7684\u662fweb\u670d\u52a1\u5668\u8981\u4f20\u9012\u7ed9 web\u6846\u67b6\u7684\u6570\u636e\u4fe1\u606f env [ 'PATH_INFO' ] = file_name # {\"PATH_INFO\": \"/index.py\"} # body = dynamic.mini_frame.application(env, self.set_response_header) body = self . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status for temp in self . headers : header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" if len ( sys . argv ) == 3 : try : port = int ( sys . argv [ 1 ]) # 7890 frame_app_name = sys . argv [ 2 ] # mini_frame:application except Exception as ret : print ( \"\u7aef\u53e3\u8f93\u5165\u9519\u8bef\u3002\u3002\u3002\u3002\u3002\" ) return else : print ( \"\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c:\" ) print ( \"python3 xxxx.py 7890 mini_frame:application\" ) return # mini_frame:application ret = re . match ( r \"([^:]+):(.*)\" , frame_app_name ) if ret : frame_name = ret . group ( 1 ) # mini_frame app_name = ret . group ( 2 ) # application else : print ( \"\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c:\" ) print ( \"python3 xxxx.py 7890 mini_frame:application\" ) return sys . path . append ( \"./dynamic\" ) #\u6dfb\u52a0\u8fd9\u4e2a\u8def\u5f84.\u4e0b\u9762\u5bfc\u6a21\u5757\u7684\u65f6\u5019\u624d\u77e5\u9053\u6709\u8fd9\u4e48\u4e2a\u8def\u5f84\u53ef\u4ee5\u4f7f\u7528 # import frame_name --->\u627eframe_name.py frame = __import__ ( frame_name ) # \u8fd4\u56de\u503c\u6807\u8bb0\u8fd9 \u5bfc\u5165\u7684\u8fd9\u4e2a\u6a21\u5757(\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528import,\u5c31\u4f1a\u8ba4\u4e3a\u4f7f\u7528\u7684\u662fframe_name\u5305\u800c\u4e0d\u662f\u53d8\u91cf\u4ee3\u8868\u7684\u610f\u601d) #\u4e0a\u9762\u662f\u5bfc\u5305,\u4e0b\u9762\u662f\u627e\u51fd\u6570(\u4f7f\u7528\u7684\u662fgetattr\u51fd\u6570) app = getattr ( frame , app_name ) # \u6b64\u65f6app\u5c31\u6307\u5411\u4e86 dynamic/mini_frame\u6a21\u5757\u4e2d\u7684application\u8fd9\u4e2a\u51fd\u6570 # print(app) wsgi_server = WSGIServer ( port , app ) #\u5c06\u8fd9\u4e2a\u51fd\u6570\u4f20\u9012\u8fdb\u53bb wsgi_server . run_forever () if __name__ == \"__main__\" : main ()","title":"09-\u8fd0\u884cweb\u670d\u52a1\u5668\u65f6\u6307\u5b9a\u7aef\u53e3\u4ee5\u53ca\u6846\u67b6"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#10-web","text":"run.sh \u8fd0\u884c\u811a\u672c python3 web_server.py 7890 mini_frame:application web_server.conf \u8def\u5f84\u914d\u7f6e\u6587\u4ef6 { \"static_path\" : \"./static\" , \"dynamic_path\" : \"./dynamic\" } web_server.py import socket import re import multiprocessing import time # import dynamic.mini_frame import sys class WSGIServer ( object ): def __init__ ( self , port , app , static_path ): # 1. \u521b\u5efa\u5957\u63a5\u5b57 self . tcp_server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . tcp_server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) # 2. \u7ed1\u5b9a self . tcp_server_socket . bind (( \"\" , port )) # 3. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . listen ( 128 ) self . application = app self . static_path = static_path #\u9759\u6001\u8d44\u6e90\u7684\u8def\u5f84 def service_client ( self , new_socket ): \"\"\"\u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u8fd4\u56de\u6570\u636e\"\"\" # 1. \u63a5\u6536\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42 \uff0c\u5373http\u8bf7\u6c42 # GET / HTTP/1.1 # ..... request = new_socket . recv ( 1024 ) . decode ( \"utf-8\" ) # print(\">>>\"*50) # print(request) request_lines = request . splitlines () print ( \"\" ) print ( \">\" * 20 ) print ( request_lines ) # GET /index.html HTTP/1.1 # get post put del file_name = \"\" ret = re . match ( r \"[^/]+(/[^ ]*)\" , request_lines [ 0 ]) if ret : file_name = ret . group ( 1 ) # print(\"*\"*50, file_name) if file_name == \"/\" : file_name = \"/index.html\" # 2. \u8fd4\u56dehttp\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7ed9\u6d4f\u89c8\u5668 # 2.1 \u5982\u679c\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u9759\u6001\u8d44\u6e90\uff08html/css/js/png\uff0cjpg\u7b49\uff09 if not file_name . endswith ( \".py\" ): try : f = open ( self . static_path + file_name , \"rb\" ) except : response = \"HTTP/1.1 404 NOT FOUND \\r\\n \" response += \" \\r\\n \" response += \"------file not found-----\" new_socket . send ( response . encode ( \"utf-8\" )) else : html_content = f . read () f . close () # 2.1 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---header response = \"HTTP/1.1 200 OK \\r\\n \" response += \" \\r\\n \" # 2.2 \u51c6\u5907\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u7684\u6570\u636e---boy # response += \"hahahhah\" # \u5c06response header\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5c06response ic.mini_frame.applicationbody\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( html_content ) else : # 2.2 \u5982\u679c\u662f\u4ee5.py\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u52a8\u6001\u8d44\u6e90\u7684\u8bf7\u6c42 env = dict () # \u8fd9\u4e2a\u5b57\u5178\u4e2d\u5b58\u653e\u7684\u662fweb\u670d\u52a1\u5668\u8981\u4f20\u9012\u7ed9 web\u6846\u67b6\u7684\u6570\u636e\u4fe1\u606f env [ 'PATH_INFO' ] = file_name # {\"PATH_INFO\": \"/index.py\"} # body = dynamic.mini_frame.application(env, self.set_response_header) body = self . application ( env , self . set_response_header ) header = \"HTTP/1.1 %s \\r\\n \" % self . status for temp in self . headers : header += \" %s : %s \\r\\n \" % ( temp [ 0 ], temp [ 1 ]) header += \" \\r\\n \" response = header + body # \u53d1\u9001response\u7ed9\u6d4f\u89c8\u5668 new_socket . send ( response . encode ( \"utf-8\" )) # \u5173\u95ed\u5957\u63a5 new_socket . close () def set_response_header ( self , status , headers ): self . status = status self . headers = [( \"server\" , \"mini_web v8.8\" )] self . headers += headers def run_forever ( self ): \"\"\"\u7528\u6765\u5b8c\u6210\u6574\u4f53\u7684\u63a7\u5236\"\"\" while True : # 4. \u7b49\u5f85\u65b0\u5ba2\u6237\u7aef\u7684\u94fe\u63a5 new_socket , client_addr = self . tcp_server_socket . accept () # 5. \u4e3a\u8fd9\u4e2a\u5ba2\u6237\u7aef\u670d\u52a1 p = multiprocessing . Process ( target = self . service_client , args = ( new_socket ,)) p . start () new_socket . close () # \u5173\u95ed\u76d1\u542c\u5957\u63a5\u5b57 self . tcp_server_socket . close () def main (): \"\"\"\u63a7\u5236\u6574\u4f53\uff0c\u521b\u5efa\u4e00\u4e2aweb \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684run_forever\u65b9\u6cd5\u8fd0\u884c\"\"\" if len ( sys . argv ) == 3 : try : port = int ( sys . argv [ 1 ]) # 7890 frame_app_name = sys . argv [ 2 ] # mini_frame:application except Exception as ret : print ( \"\u7aef\u53e3\u8f93\u5165\u9519\u8bef\u3002\u3002\u3002\u3002\u3002\" ) return else : print ( \"\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c:\" ) print ( \"python3 xxxx.py 7890 mini_frame:application\" ) return # mini_frame:application ret = re . match ( r \"([^:]+):(.*)\" , frame_app_name ) if ret : frame_name = ret . group ( 1 ) # mini_frame app_name = ret . group ( 2 ) # application else : print ( \"\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c:\" ) print ( \"python3 xxxx.py 7890 mini_frame:application\" ) return with open ( \"./web_server.conf\" ) as f : conf_info = eval ( f . read ()) #\u4f7f\u7528eval\u53d8\u6210\u6211\u4eec\u60f3\u8981\u7684\u5b57\u5178,\u540e\u9762\u770bpython\u4e2deval\u51fd\u6570 # \u6b64\u65f6 conf_info\u662f\u4e00\u4e2a\u5b57\u5178\u91cc\u9762\u7684\u6570\u636e\u4e3a\uff1a # { # \"static_path\":\"./static\", # \"dynamic_path\":\"./dynamic\" # } sys . path . append ( conf_info [ 'dynamic_path' ]) #\u8def\u5f84\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u8def\u5f84 # import frame_name --->\u627eframe_name.py frame = __import__ ( frame_name ) # \u8fd4\u56de\u503c\u6807\u8bb0\u8fd9 \u5bfc\u5165\u7684\u8fd9\u4e2a\u6a21\u677f app = getattr ( frame , app_name ) # \u6b64\u65f6app\u5c31\u6307\u5411\u4e86 dynamic/mini_frame\u6a21\u5757\u4e2d\u7684application\u8fd9\u4e2a\u51fd\u6570 # print(app) wsgi_server = WSGIServer ( port , app , conf_info [ 'static_path' ]) #\u4ece\u5b57\u5178\u4e2d\u5f97\u5230\u9759\u6001\u8d44\u6e90\u7684\u8def\u5f84 wsgi_server . run_forever () if __name__ == \"__main__\" : main () mini_frame.py import re def index (): with open ( \"./templates/index.html\" ) as f : content = f . read () my_stock_info = \"\u54c8\u54c8\u54c8\u54c8 \u8fd9\u662f\u4f60\u7684\u672c\u6708\u540d\u79f0.....\" content = re . sub ( r \"\\{ %c ontent%\\}\" , my_stock_info , content ) return content def center (): with open ( \"./templates/center.html\" ) as f : content = f . read () my_stock_info = \"\u8fd9\u91cc\u662f\u4ecemysql\u67e5\u8be2\u51fa\u6765\u7684\u6570\u636e\u3002\u3002\u3002\" content = re . sub ( r \"\\{ %c ontent%\\}\" , my_stock_info , content ) return content def application ( env , start_response ): start_response ( '200 OK' , [( 'Content-Type' , 'text/html;charset=utf-8' )]) file_name = env [ 'PATH_INFO' ] # file_name = \"/index.py\" if file_name == \"/index.py\" : return index () elif file_name == \"/center.py\" : return center () else : return 'Hello World! \u6211\u7231\u4f60\u4e2d\u56fd....'","title":"10-\u8ba9web\u670d\u52a1\u5668\u652f\u6301\u914d\u7f6e\u6587\u4ef6"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#183-web-","text":"","title":"18.3. Web\u52a8\u6001\u670d\u52a1\u5668-\u57fa\u672c\u5b9e\u73b0"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#python","text":"","title":"python\u9ad8\u7ea7"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#web-","text":"","title":"Web\u52a8\u6001\u670d\u52a1\u5668-\u57fa\u672c\u5b9e\u73b0"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#_2","text":"\u251c\u2500\u2500 web_server.py \u251c\u2500\u2500 web \u2502 \u2514\u2500\u2500 my_web.py \u2514\u2500\u2500 html \u2514\u2500\u2500 index.html .....","title":"\u6587\u4ef6\u7ed3\u6784"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#webmy_webpy","text":"import time def application(environ, start_response): status = '200 OK' response_headers = [('Content-Type', 'text/html')] start_response(status, response_headers) return str(environ) + '==Hello world from a simple WSGI application!--->%s\\n' % time.ctime()","title":"web/my_web.py"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#web_serverpy_1","text":"import select import time import socket import sys import re import multiprocessing class WSGIServer(object): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__(self, port, documents_root, app): # 1\\. \u521b\u5efa\u5957\u63a5\u5b57 self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 2\\. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.server_socket.bind((\"\", port)) # 3\\. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self.server_socket.listen(128) # \u8bbe\u5b9a\u8d44\u6e90\u6587\u4ef6\u7684\u8def\u5f84 self.documents_root = documents_root # \u8bbe\u5b9aweb\u6846\u67b6\u53ef\u4ee5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) self.app = app def run_forever(self): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True: new_socket, new_addr = self.server_socket.accept() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u6765\u5b8c\u6210\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4efb\u52a1 new_socket.settimeout(3) # 3s new_process = multiprocessing.Process(target=self.deal_with_request, args=(new_socket,)) new_process.start() new_socket.close() def deal_with_request(self, client_socket): \"\"\"\u4ee5\u957f\u94fe\u63a5\u7684\u65b9\u5f0f\uff0c\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" while True: try: request = client_socket.recv(1024).decode(\"utf-8\") except Exception as ret: print(\"========>\", ret) client_socket.close() return # \u5224\u65ad\u6d4f\u89c8\u5668\u662f\u5426\u5173\u95ed if not request: client_socket.close() return request_lines = request.splitlines() for i, line in enumerate(request_lines): print(i, line) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re.match(r\"([^/]*)([^ ]+)\", request_lines[0]) if ret: print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(1)) print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(2)) file_name = ret.group(2) if file_name == \"/\": file_name = \"/index.html\" # \u5982\u679c\u4e0d\u662f\u4ee5py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u8ba4\u4e3a\u662f\u666e\u901a\u7684\u6587\u4ef6 if not file_name.endswith(\".py\"): # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try: f = open(self.documents_root+file_name, \"rb\") except: response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found\\r\\n\" response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" response = response_header + response_body # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response.encode('utf-8')) else: content = f.read() f.close() response_body = content response_header = \"HTTP/1.1 200 OK\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response_header.encode('utf-8') + response_body) # \u4ee5.py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5c31\u8ba4\u4e3a\u662f\u6d4f\u89c8\u9700\u8981\u52a8\u6001\u7684\u9875\u9762 else: # \u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u91cc\u9762\u5b58\u653e\u9700\u8981\u4f20\u9012\u7ed9web\u6846\u67b6\u7684\u6570\u636e env = {} # \u5b58web\u8fd4\u56de\u7684\u6570\u636e response_body = self.app(env, self.set_response_headers) # \u5408\u5e76header\u548cbody response_header = \"HTTP/1.1 {status}\\r\\n\".format(status=self.headers[0]) response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % len(response_body) for temp_head in self.headers[1]: response_header += \"{0}:{1}\\r\\n\".format(*temp_head) response = response_header + \"\\r\\n\" response += response_body client_socket.send(response.encode('utf-8')) def set_response_headers(self, status, headers): \"\"\"\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4f1a\u5728 web\u6846\u67b6\u4e2d\u88ab\u9ed8\u8ba4\u8c03\u7528\"\"\" response_header_default = [ (\"Data\", time.ctime()), (\"Server\", \"ItCast-python mini web server\") ] # \u5c06\u72b6\u6001\u7801/\u76f8\u5e94\u5934\u4fe1\u606f\u5b58\u50a8\u8d77\u6765 # [\u5b57\u7b26\u4e32, [xxxxx, xxx2]] self.headers = [status, response_header_default + headers] # \u8bbe\u7f6e\u9759\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_static_document_root = \"./html\" # \u8bbe\u7f6e\u52a8\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_dynamic_document_root = \"./web\" def main(): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len(sys.argv) == 3: # \u83b7\u53d6web\u670d\u52a1\u5668\u7684port port = sys.argv[1] if port.isdigit(): port = int(port) # \u83b7\u53d6web\u670d\u52a1\u5668\u9700\u8981\u52a8\u6001\u8d44\u6e90\u65f6\uff0c\u8bbf\u95ee\u7684web\u6846\u67b6\u540d\u5b57 web_frame_module_app_name = sys.argv[2] else: print(\"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890 my_web_frame_name:application\") return print(\"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port:%s\" % port) # \u5c06\u52a8\u6001\u8def\u5f84\u5373\u5b58\u653epy\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6dfb\u52a0\u5230path\u4e2d\uff0c\u8fd9\u6837python\u5c31\u80fd\u591f\u627e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e86 sys.path.append(g_dynamic_document_root) ret = re.match(r\"([^:]*):(.*)\", web_frame_module_app_name) if ret: # \u83b7\u53d6\u6a21\u5757\u540d web_frame_module_name = ret.group(1) # \u83b7\u53d6\u53ef\u4ee5\u8c03\u7528web\u6846\u67b6\u7684\u5e94\u7528\u540d\u79f0 app_name = ret.group(2) # \u5bfc\u5165web\u6846\u67b6\u7684\u4e3b\u6a21\u5757 web_frame_module = __import__(web_frame_module_name) # \u83b7\u53d6\u90a3\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) app = getattr(web_frame_module, app_name) # print(app) # for test # \u542f\u52a8http\u670d\u52a1\u5668 http_server = WSGIServer(port, g_static_document_root, app) # \u8fd0\u884chttp\u670d\u52a1\u5668 http_server.run_forever() if __name__ == \"__main__\": main()","title":"web_server.py"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#_3","text":"","title":"\u8fd0\u884c"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#146_1","text":"python3 web_server.py my_web:application","title":"1. \u6253\u5f00\u7ec8\u7aef\uff0c\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u5f00\u59cb\u670d\u52a1\u5668"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#246","text":"","title":"2. \u6253\u5f00\u6d4f\u89c8\u5668"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#184-mini-web-1-","text":"","title":"18.4. mini-web\u6846\u67b6-1-\u6587\u4ef6\u7ed3\u6784"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#python_1","text":"","title":"python\u9ad8\u7ea7"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#mini-web-1-","text":"","title":"mini web\u6846\u67b6-1-\u6587\u4ef6\u7ed3\u6784"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#_4","text":"\u251c\u2500\u2500 dynamic ---\u5b58\u653epy\u6a21\u5757 \u2502 \u2514\u2500\u2500 my_web.py \u251c\u2500\u2500 templates ---\u5b58\u653e\u6a21\u677f\u6587\u4ef6 \u2502 \u251c\u2500\u2500 center.html \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 location.html \u2502 \u2514\u2500\u2500 update.html \u251c\u2500\u2500 static ---\u5b58\u653e\u9759\u6001\u7684\u8d44\u6e90\u6587\u4ef6 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u2502 \u251c\u2500\u2500 main.css \u2502 \u2502 \u2514\u2500\u2500 swiper.min.css \u2502 \u2514\u2500\u2500 js \u2502 \u251c\u2500\u2500 a.js \u2502 \u251c\u2500\u2500 bootstrap.min.js \u2502 \u251c\u2500\u2500 jquery-1.12.4.js \u2502 \u251c\u2500\u2500 jquery-1.12.4.min.js \u2502 \u251c\u2500\u2500 jquery.animate-colors.js \u2502 \u251c\u2500\u2500 jquery.animate-colors-min.js \u2502 \u251c\u2500\u2500 jquery.cookie.js \u2502 \u251c\u2500\u2500 jquery-ui.min.js \u2502 \u251c\u2500\u2500 server.js \u2502 \u251c\u2500\u2500 swiper.jquery.min.js \u2502 \u251c\u2500\u2500 swiper.min.js \u2502 \u2514\u2500\u2500 zepto.min.js \u2514\u2500\u2500 web_server.py ---mini web\u670d\u52a1\u5668","title":"\u6587\u4ef6\u7ed3\u6784"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#my_webpy","text":"import time def application(environ, start_response): status = '200 OK' response_headers = [('Content-Type', 'text/html')] start_response(status, response_headers) return str(environ) + '==Hello world from a simple WSGI application!--->%s\\n' % time.ctime()","title":"my_web.py"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#web_serverpy_2","text":"import select import time import socket import sys import re import multiprocessing class WSGIServer(object): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__(self, port, documents_root, app): # 1\\. \u521b\u5efa\u5957\u63a5\u5b57 self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 2\\. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.server_socket.bind((\"\", port)) # 3\\. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self.server_socket.listen(128) # \u8bbe\u5b9a\u8d44\u6e90\u6587\u4ef6\u7684\u8def\u5f84 self.documents_root = documents_root # \u8bbe\u5b9aweb\u6846\u67b6\u53ef\u4ee5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) self.app = app def run_forever(self): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True: new_socket, new_addr = self.server_socket.accept() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u6765\u5b8c\u6210\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4efb\u52a1 new_socket.settimeout(3) # 3s new_process = multiprocessing.Process(target=self.deal_with_request, args=(new_socket,)) new_process.start() new_socket.close() def deal_with_request(self, client_socket): \"\"\"\u4ee5\u957f\u94fe\u63a5\u7684\u65b9\u5f0f\uff0c\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" while True: try: request = client_socket.recv(1024).decode(\"utf-8\") except Exception as ret: print(\"========>\", ret) client_socket.close() return # \u5224\u65ad\u6d4f\u89c8\u5668\u662f\u5426\u5173\u95ed if not request: client_socket.close() return request_lines = request.splitlines() for i, line in enumerate(request_lines): print(i, line) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re.match(r\"([^/]*)([^ ]+)\", request_lines[0]) if ret: print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(1)) print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(2)) file_name = ret.group(2) if file_name == \"/\": file_name = \"/index.html\" # \u5982\u679c\u4e0d\u662f\u4ee5py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u8ba4\u4e3a\u662f\u666e\u901a\u7684\u6587\u4ef6 if not file_name.endswith(\".py\"): # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try: f = open(self.documents_root+file_name, \"rb\") except: response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found\\r\\n\" response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" response = response_header + response_body # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response.encode('utf-8')) else: content = f.read() f.close() response_body = content response_header = \"HTTP/1.1 200 OK\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response_header.encode('utf-8') + response_body) # \u4ee5.py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5c31\u8ba4\u4e3a\u662f\u6d4f\u89c8\u9700\u8981\u52a8\u6001\u7684\u9875\u9762 else: # \u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u91cc\u9762\u5b58\u653e\u9700\u8981\u4f20\u9012\u7ed9web\u6846\u67b6\u7684\u6570\u636e env = dict() # \u5b58web\u8fd4\u56de\u7684\u6570\u636e response_body = self.app(env, self.set_response_headers) # \u5408\u5e76header\u548cbody response_header = \"HTTP/1.1 {status}\\r\\n\".format(status=self.headers[0]) response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % len(response_body) for temp_head in self.headers[1]: response_header += \"{0}:{1}\\r\\n\".format(*temp_head) response = response_header + \"\\r\\n\" response += response_body client_socket.send(response.encode('utf-8')) def set_response_headers(self, status, headers): \"\"\"\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4f1a\u5728 web\u6846\u67b6\u4e2d\u88ab\u9ed8\u8ba4\u8c03\u7528\"\"\" response_header_default = [ (\"Data\", time.time()), (\"Server\", \"ItCast-python mini web server\") ] # \u5c06\u72b6\u6001\u7801/\u76f8\u5e94\u5934\u4fe1\u606f\u5b58\u50a8\u8d77\u6765 # [\u5b57\u7b26\u4e32, [xxxxx, xxx2]] self.headers = [status, response_header_default + headers] # \u8bbe\u7f6e\u9759\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_static_document_root = \"./static\" # \u8bbe\u7f6e\u52a8\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_dynamic_document_root = \"./dynamic\" def main(): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len(sys.argv) == 3: # \u83b7\u53d6web\u670d\u52a1\u5668\u7684port port = sys.argv[1] if port.isdigit(): port = int(port) # \u83b7\u53d6web\u670d\u52a1\u5668\u9700\u8981\u52a8\u6001\u8d44\u6e90\u65f6\uff0c\u8bbf\u95ee\u7684web\u6846\u67b6\u540d\u5b57 web_frame_module_app_name = sys.argv[2] else: print(\"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890 my_web_frame_name:application\") return print(\"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port:%s\" % port) # \u5c06\u52a8\u6001\u8def\u5f84\u5373\u5b58\u653epy\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6dfb\u52a0\u5230path\u4e2d\uff0c\u8fd9\u6837python\u5c31\u80fd\u591f\u627e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e86 sys.path.append(g_dynamic_document_root) ret = re.match(r\"([^:]*):(.*)\", web_frame_module_app_name) if ret: # \u83b7\u53d6\u6a21\u5757\u540d web_frame_module_name = ret.group(1) # \u83b7\u53d6\u53ef\u4ee5\u8c03\u7528web\u6846\u67b6\u7684\u5e94\u7528\u540d\u79f0 app_name = ret.group(2) # \u5bfc\u5165web\u6846\u67b6\u7684\u4e3b\u6a21\u5757 web_frame_module = __import__(web_frame_module_name) # \u83b7\u53d6\u90a3\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) app = getattr(web_frame_module, app_name) # print(app) # for test # \u542f\u52a8http\u670d\u52a1\u5668 http_server = WSGIServer(port, g_static_document_root, app) # \u8fd0\u884chttp\u670d\u52a1\u5668 http_server.run_forever() if __name__ == \"__main__\": main()","title":"web_server.py"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#185-mini-web-2-","text":"","title":"18.5. mini-web\u6846\u67b6-2-\u663e\u793a\u9875\u9762"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#mini-web-2-","text":"","title":"mini web\u6846\u67b6-2-\u663e\u793a\u9875\u9762"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#dynamicmy_webpy","text":"import time import os template_root = \"./templates\" def index(file_name): \"\"\"\u8fd4\u56deindex.py\u9700\u8981\u7684\u9875\u9762\u5185\u5bb9\"\"\" # return \"hahha\" + os.getcwd() # for test \u8def\u5f84\u95ee\u9898 try: file_name = file_name.replace(\".py\", \".html\") f = open(template_root + file_name) except Exception as ret: return \"%s\" % ret else: content = f.read() f.close() return content def center(file_name): \"\"\"\u8fd4\u56decenter.py\u9700\u8981\u7684\u9875\u9762\u5185\u5bb9\"\"\" # return \"hahha\" + os.getcwd() # for test \u8def\u5f84\u95ee\u9898 try: file_name = file_name.replace(\".py\", \".html\") f = open(template_root + file_name) except Exception as ret: return \"%s\" % ret else: content = f.read() f.close() return content def application(environ, start_response): status = '200 OK' response_headers = [('Content-Type', 'text/html')] start_response(status, response_headers) file_name = environ['PATH_INFO'] if file_name == \"/index.py\": return index(file_name) elif file_name == \"/center.py\": return center(file_name) else: return str(environ) + '==Hello world from a simple WSGI application!--->%s\\n' % time.ctime()","title":"dynamic/my_web.py (\u66f4\u65b0)"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#web_serverpy_3","text":"import select import time import socket import sys import re import multiprocessing class WSGIServer(object): \"\"\"\u5b9a\u4e49\u4e00\u4e2aWSGI\u670d\u52a1\u5668\u7684\u7c7b\"\"\" def __init__(self, port, documents_root, app): # 1\\. \u521b\u5efa\u5957\u63a5\u5b57 self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 2\\. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.server_socket.bind((\"\", port)) # 3\\. \u53d8\u4e3a\u76d1\u542c\u5957\u63a5\u5b57 self.server_socket.listen(128) # \u8bbe\u5b9a\u8d44\u6e90\u6587\u4ef6\u7684\u8def\u5f84 self.documents_root = documents_root # \u8bbe\u5b9aweb\u6846\u67b6\u53ef\u4ee5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) self.app = app def run_forever(self): \"\"\"\u8fd0\u884c\u670d\u52a1\u5668\"\"\" # \u7b49\u5f85\u5bf9\u65b9\u94fe\u63a5 while True: new_socket, new_addr = self.server_socket.accept() # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u6765\u5b8c\u6210\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4efb\u52a1 new_socket.settimeout(3) # 3s new_process = multiprocessing.Process(target=self.deal_with_request, args=(new_socket,)) new_process.start() new_socket.close() def deal_with_request(self, client_socket): \"\"\"\u4ee5\u957f\u94fe\u63a5\u7684\u65b9\u5f0f\uff0c\u4e3a\u8fd9\u4e2a\u6d4f\u89c8\u5668\u670d\u52a1\u5668\"\"\" while True: try: request = client_socket.recv(1024).decode(\"utf-8\") except Exception as ret: print(\"========>\", ret) client_socket.close() return # \u5224\u65ad\u6d4f\u89c8\u5668\u662f\u5426\u5173\u95ed if not request: client_socket.close() return request_lines = request.splitlines() for i, line in enumerate(request_lines): print(i, line) # \u63d0\u53d6\u8bf7\u6c42\u7684\u6587\u4ef6(index.html) # GET /a/b/c/d/e/index.html HTTP/1.1 ret = re.match(r\"([^/]*)([^ ]+)\", request_lines[0]) if ret: print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(1)) print(\"\u6b63\u5219\u63d0\u53d6\u6570\u636e:\", ret.group(2)) file_name = ret.group(2) if file_name == \"/\": file_name = \"/index.html\" # \u5982\u679c\u4e0d\u662f\u4ee5py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u8ba4\u4e3a\u662f\u666e\u901a\u7684\u6587\u4ef6 if not file_name.endswith(\".py\"): # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e try: print(self.documents_root+file_name) f = open(self.documents_root+file_name, \"rb\") except: response_body = \"file not found, \u8bf7\u8f93\u5165\u6b63\u786e\u7684url\" response_header = \"HTTP/1.1 404 not found\\r\\n\" response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" response = response_header + response_body # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response.encode('utf-8')) else: content = f.read() f.close() response_body = content response_header = \"HTTP/1.1 200 OK\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % (len(response_body)) response_header += \"\\r\\n\" # \u5c06header\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 client_socket.send(response_header.encode('utf-8') + response_body) # \u4ee5.py\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5c31\u8ba4\u4e3a\u662f\u6d4f\u89c8\u9700\u8981\u52a8\u6001\u7684\u9875\u9762 else: # \u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u91cc\u9762\u5b58\u653e\u9700\u8981\u4f20\u9012\u7ed9web\u6846\u67b6\u7684\u6570\u636e env = dict() # ----------\u66f4\u65b0--------- env['PATH_INFO'] = file_name # \u4f8b\u5982 index.py # \u5b58web\u8fd4\u56de\u7684\u6570\u636e response_body = self.app(env, self.set_response_headers) # \u5408\u5e76header\u548cbody response_header = \"HTTP/1.1 {status}\\r\\n\".format(status=self.headers[0]) response_header += \"Content-Type: text/html; charset=utf-8\\r\\n\" response_header += \"Content-Length: %d\\r\\n\" % len(response_body.encode(\"utf-8\")) for temp_head in self.headers[1]: response_header += \"{0}:{1}\\r\\n\".format(*temp_head) response = response_header + \"\\r\\n\" response += response_body client_socket.send(response.encode('utf-8')) def set_response_headers(self, status, headers): \"\"\"\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4f1a\u5728 web\u6846\u67b6\u4e2d\u88ab\u9ed8\u8ba4\u8c03\u7528\"\"\" response_header_default = [ (\"Data\", time.time()), (\"Server\", \"ItCast-python mini web server\") ] # \u5c06\u72b6\u6001\u7801/\u76f8\u5e94\u5934\u4fe1\u606f\u5b58\u50a8\u8d77\u6765 # [\u5b57\u7b26\u4e32, [xxxxx, xxx2]] self.headers = [status, response_header_default + headers] # \u8bbe\u7f6e\u9759\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_static_document_root = \"./static\" # \u8bbe\u7f6e\u52a8\u6001\u8d44\u6e90\u8bbf\u95ee\u7684\u8def\u5f84 g_dynamic_document_root = \"./dynamic\" def main(): \"\"\"\u63a7\u5236web\u670d\u52a1\u5668\u6574\u4f53\"\"\" # python3 xxxx.py 7890 if len(sys.argv) == 3: # \u83b7\u53d6web\u670d\u52a1\u5668\u7684port port = sys.argv[1] if port.isdigit(): port = int(port) # \u83b7\u53d6web\u670d\u52a1\u5668\u9700\u8981\u52a8\u6001\u8d44\u6e90\u65f6\uff0c\u8bbf\u95ee\u7684web\u6846\u67b6\u540d\u5b57 web_frame_module_app_name = sys.argv[2] else: print(\"\u8fd0\u884c\u65b9\u5f0f\u5982: python3 xxx.py 7890 my_web_frame_name:app\") return print(\"http\u670d\u52a1\u5668\u4f7f\u7528\u7684port:%s\" % port) # \u5c06\u52a8\u6001\u8def\u5f84\u5373\u5b58\u653epy\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6dfb\u52a0\u5230path\u4e2d\uff0c\u8fd9\u6837python\u5c31\u80fd\u591f\u627e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e86 sys.path.append(g_dynamic_document_root) ret = re.match(r\"([^:]*):(.*)\", web_frame_module_app_name) if ret: # \u83b7\u53d6\u6a21\u5757\u540d web_frame_module_name = ret.group(1) # \u83b7\u53d6\u53ef\u4ee5\u8c03\u7528web\u6846\u67b6\u7684\u5e94\u7528\u540d\u79f0 app_name = ret.group(2) # \u5bfc\u5165web\u6846\u67b6\u7684\u4e3b\u6a21\u5757 web_frame_module = __import__(web_frame_module_name) # \u83b7\u53d6\u90a3\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u7684\u51fd\u6570(\u5bf9\u8c61) app = getattr(web_frame_module, app_name) # print(app) # for test # \u542f\u52a8http\u670d\u52a1\u5668 http_server = WSGIServer(port, g_static_document_root, app) # \u8fd0\u884chttp\u670d\u52a1\u5668 http_server.run_forever() if __name__ == \"__main__\": main()","title":"web_server.py (\u66f4\u65b0)"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#_5","text":"","title":"\u6d4f\u89c8\u5668\u6253\u5f00\u770b\u6548\u679c"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#186-mini-web-3-","text":"","title":"18.6. mini-web\u6846\u67b6-3-\u66ff\u6362\u6a21\u677f"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#mini-web-3-","text":"","title":"mini web\u6846\u67b6-3-\u66ff\u6362\u6a21\u677f"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#dynamicmy_webpy_1","text":"import time import os import re template_root = \"./templates\" def index(file_name): \"\"\"\u8fd4\u56deindex.py\u9700\u8981\u7684\u9875\u9762\u5185\u5bb9\"\"\" # return \"hahha\" + os.getcwd() # for test \u8def\u5f84\u95ee\u9898 try: file_name = file_name.replace(\".py\", \".html\") f = open(template_root + file_name) except Exception as ret: return \"%s\" % ret else: content = f.read() f.close() # --------\u66f4\u65b0------- data_from_mysql = \"\u6570\u636e\u8fd8\u6ca1\u6709\u656c\u8bf7\u671f\u5f85....\" content = re.sub(r\"\\{%content%\\}\", data_from_mysql, content) return content def center(file_name): \"\"\"\u8fd4\u56decenter.py\u9700\u8981\u7684\u9875\u9762\u5185\u5bb9\"\"\" # return \"hahha\" + os.getcwd() # for test \u8def\u5f84\u95ee\u9898 try: file_name = file_name.replace(\".py\", \".html\") f = open(template_root + file_name) except Exception as ret: return \"%s\" % ret else: content = f.read() f.close() # --------\u66f4\u65b0------- data_from_mysql = \"\u6682\u65f6\u6ca1\u6709\u6570\u636e,,,,~~~~(>_<)~~~~ \" content = re.sub(r\"\\{%content%\\}\", data_from_mysql, content) return content def application(environ, start_response): status = '200 OK' response_headers = [('Content-Type', 'text/html')] start_response(status, response_headers) file_name = environ['PATH_INFO'] if file_name == \"/index.py\": return index(file_name) elif file_name == \"/center.py\": return center(file_name) else: return str(environ) + '==Hello world from a simple WSGI application!--->%s\\n' % time.ctime()","title":"dynamic/my_web.py"},{"location":"006 18. WSGI\u3001mini-web\u6846\u67b6/#_6","text":"","title":"\u6d4f\u89c8\u5668\u6253\u5f00\u770b\u6548\u679c"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/","text":"\u95ed\u5305 \u00b6 1. \u51fd\u6570\u5f15\u7528 \u00b6 def test1 (): print ( \"--- in test1 func----\" ) # \u8c03\u7528\u51fd\u6570 test1 () # \u5f15\u7528\u51fd\u6570 ret = test1 print ( id ( ret )) print ( id ( test1 )) #\u901a\u8fc7\u5f15\u7528\u8c03\u7528\u51fd\u6570 ret () \u8fd0\u884c\u7ed3\u679c: --- in test1 func ---- 140212571149040 140212571149040 --- in test1 func ---- 2. \u4ec0\u4e48\u662f\u95ed\u5305 \u00b6 # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 def test ( number ): # \u5728\u51fd\u6570\u5185\u90e8\u518d\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u4e14\u8fd9\u4e2a\u51fd\u6570\u7528\u5230\u4e86\u5916\u8fb9\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e2a\u51fd\u6570\u4ee5\u53ca\u7528\u5230\u7684\u4e00\u4e9b\u53d8\u91cf\u79f0\u4e4b\u4e3a\u95ed\u5305 def test_in ( number_in ): print ( \"in test_in \u51fd\u6570, number_in is %d \" % number_in ) return number + number_in # \u5176\u5b9e\u8fd9\u91cc\u8fd4\u56de\u7684\u5c31\u662f\u95ed\u5305\u7684\u7ed3\u679c return test_in # \u7ed9test\u51fd\u6570\u8d4b\u503c\uff0c\u8fd9\u4e2a20\u5c31\u662f\u7ed9\u53c2\u6570number ret = test ( 20 ) # \u6ce8\u610f\u8fd9\u91cc\u7684100\u5176\u5b9e\u7ed9\u53c2\u6570number_in print ( ret ( 100 )) #\u6ce8 \u610f\u8fd9\u91cc\u7684200\u5176\u5b9e\u7ed9\u53c2\u6570number_in print ( ret ( 200 )) \u8fd0\u884c\u7ed3\u679c\uff1a in test_in \u51fd\u6570 , number_in is 100 120 in test_in \u51fd\u6570 , number_in is 200 220 3. \u770b\u4e00\u4e2a\u95ed\u5305\u7684\u5b9e\u9645\u4f8b\u5b50\uff1a \u00b6 def line_conf ( a , b ): def line ( x ): return a * x + b return line line1 = line_conf ( 1 , 1 ) line2 = line_conf ( 4 , 5 ) print ( line1 ( 5 )) print ( line2 ( 5 )) \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570line\u4e0e\u53d8\u91cfa,b\u6784\u6210\u95ed\u5305\u3002\u5728\u521b\u5efa\u95ed\u5305\u7684\u65f6\u5019\uff0c\u6211\u4eec\u901a\u8fc7line_conf\u7684\u53c2\u6570a,b\u8bf4\u660e\u4e86\u8fd9\u4e24\u4e2a\u53d8\u91cf\u7684\u53d6\u503c\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u786e\u5b9a\u4e86\u51fd\u6570\u7684\u6700\u7ec8\u5f62\u5f0f(y = x + 1\u548cy = 4x + 5)\u3002\u6211\u4eec\u53ea\u9700\u8981\u53d8\u6362\u53c2\u6570a,b\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u4e0d\u540c\u7684\u76f4\u7ebf\u8868\u8fbe\u51fd\u6570\u3002\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u95ed\u5305\u4e5f\u5177\u6709\u63d0\u9ad8\u4ee3\u7801\u53ef\u590d\u7528\u6027\u7684\u4f5c\u7528\u3002 \u5982\u679c\u6ca1\u6709\u95ed\u5305\uff0c\u6211\u4eec\u9700\u8981\u6bcf\u6b21\u521b\u5efa\u76f4\u7ebf\u51fd\u6570\u7684\u65f6\u5019\u540c\u65f6\u8bf4\u660ea,b,x\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u9700\u8981\u66f4\u591a\u7684\u53c2\u6570\u4f20\u9012\uff0c\u4e5f\u51cf\u5c11\u4e86\u4ee3\u7801\u7684\u53ef\u79fb\u690d\u6027\u3002 \u6ce8\u610f\u70b9: \u7531\u4e8e\u95ed\u5305\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5219\u5916\u90e8\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u6ca1\u6709\u53ca\u65f6\u91ca\u653e\uff0c\u6d88\u8017\u5185\u5b58 4. \u4fee\u6539\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u53d8\u91cf \u00b6 python3\u7684\u65b9\u6cd5 \u00b6 def counter ( start = 0 ): def incr (): nonlocal start start += 1 return start return incr c1 = counter ( 5 ) print ( c1 ()) print ( c1 ()) c2 = counter ( 50 ) print ( c2 ()) print ( c2 ()) print ( c1 ()) print ( c1 ()) print ( c2 ()) print ( c2 ()) python2\u7684\u65b9\u6cd5 \u00b6 def counter ( start = 0 ): count = [ start ] def incr (): count [ 0 ] += 1 return count [ 0 ] return incr c1 = closeure . counter ( 5 ) print ( c1 ()) # 6 print ( c1 ()) # 7 c2 = closeure . counter ( 100 ) print ( c2 ()) # 101 print ( c2 ()) # 102 \u8bb2\u8bfe\u7684\u4ee3\u7801 # \u95ee\u9898\uff1a\u521d\u4e2d\u91cc\u5b66\u8fc7\u51fd\u6570\uff0c\u4f8b\u5982 y=kx+b, y=ax^2 + bx + c # \u4ee5y=kx+b\u4e3a\u4f8b\uff0c\u8bf7\u8ba1\u7b97\u4e00\u6761\u7ebf\u4e0a\u7684\u8fc7\u4e2a\u70b9 \u5373 \u7ed9x\u503c \u8ba1\u7b97\u51fay\u503c # \u7b2c1\u79cd # k = 1 # b = 2 # y = k*x+b # \u7f3a\u70b9\uff1a\u5982\u679c\u9700\u8981\u591a\u6b21\u8ba1\u7b97\uff0c\u90a3\u4e48\u5c31\u7684\u5199\u591a\u6b21y = k*x+b\u8fd9\u6837\u7684\u5f0f\u5b50 # \u7b2c2\u79cd def line_2 ( k , b , x ): print ( k * x + b ) line_2 ( 1 , 2 , 0 ) line_2 ( 1 , 2 , 1 ) line_2 ( 1 , 2 , 2 ) # \u7f3a\u70b9\uff1a\u5982\u679c\u60f3\u8981\u8ba1\u7b97\u591a\u6b21\u8fd9\u6761\u7ebf\u4e0a\u7684y\u503c\uff0c\u90a3\u4e48\u6bcf\u6b21\u90fd\u9700\u8981\u4f20\u9012k\uff0cb\u7684\u503c\uff0c\u9ebb\u70e6 print ( \"-\" * 50 ) # \u7b2c3\u79cd: \u5168\u5c40\u53d8\u91cf(\u4e0d\u4fee\u6539\u53d8\u91cf\u7684\u8bdd\u662f\u53ef\u4ee5\u76f4\u63a5\u7528\u7684\u4e0d\u7528\u58f0\u660e\u53d8\u91cf) k = 1 b = 2 def line_3 ( x ): print ( k * x + b ) line_3 ( 0 ) line_3 ( 1 ) line_3 ( 2 ) k = 11 b = 22 line_3 ( 0 ) line_3 ( 1 ) line_3 ( 2 ) # \u7f3a\u70b9\uff1a\u5982\u679c\u8981\u8ba1\u7b97\u591a\u6761\u7ebf\u4e0a\u7684y\u503c\uff0c\u90a3\u4e48\u9700\u8981\u6bcf\u6b21\u5bf9\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u4fee\u6539\uff0c\u4ee3\u7801\u4f1a\u589e\u591a\uff0c\u9ebb\u70e6 print ( \"-\" * 50 ) # \u7b2c4\u79cd\uff1a\u7f3a\u7701\u53c2\u6570 def line_4 ( x , k = 1 , b = 2 ): print ( k * x + b ) line_4 ( 0 ) line_4 ( 1 ) line_4 ( 2 ) line_4 ( 0 , k = 11 , b = 22 ) line_4 ( 1 , k = 11 , b = 22 ) line_4 ( 2 , k = 11 , b = 22 ) # \u4f18\u70b9\uff1a\u6bd4\u5168\u5c40\u53d8\u91cf\u7684\u65b9\u5f0f\u597d\u5728\uff1ak, b\u662f\u51fd\u6570line_4\u7684\u4e00\u90e8\u5206 \u800c\u4e0d\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u4e3a\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u4efb\u610f\u7684\u88ab\u5176\u4ed6\u51fd\u6570\u6240\u4fee\u6539 # \u7f3a\u70b9\uff1a\u5982\u679c\u8981\u8ba1\u7b97\u591a\u6761\u7ebf\u4e0a\u7684y\u503c\uff0c\u90a3\u4e48\u9700\u8981\u5728\u8c03\u7528\u7684\u65f6\u5019\u8fdb\u884c\u4f20\u9012\u53c2\u6570\uff0c\u9ebb\u70e6 print ( \"-\" * 50 ) # \u7b2c5\u79cd\uff1a\u5b9e\u4f8b\u5bf9\u8c61 class Line5 ( object ): def __init__ ( self , k , b ): self . k = k self . b = b def __call__ ( self , x ): #call\u9b54\u6cd5\u5c5e\u6027\u53ef\u4ee5\u4f20\u9012\u5f88\u591a\u7684\u4e0d\u5b9a\u957f\u7684\u53c2\u6570 print ( self . k * x + self . b ) line_5_1 = Line5 ( 1 , 2 ) # \u5bf9\u8c61.\u65b9\u6cd5() # \u5bf9\u8c61() line_5_1 ( 0 ) line_5_1 ( 1 ) line_5_1 ( 2 ) line_5_2 = Line5 ( 11 , 22 ) line_5_2 ( 0 ) line_5_2 ( 1 ) line_5_2 ( 2 ) # \u7f3a\u70b9\uff1a\u4e3a\u4e86\u8ba1\u7b97\u591a\u6761\u7ebf\u4e0a\u7684y\u503c\uff0c\u6240\u4ee5\u9700\u8981\u4fdd\u5b58\u591a\u4e2ak, b\u7684\u503c\uff0c\u56e0\u6b64\u7528\u4e86\u5f88\u591a\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\uff0c \u6d6a\u8d39\u8d44\u6e90 print ( \"-\" * 50 ) # \u7b2c6\u79cd\uff1a\u95ed\u5305 def line_6 ( k , b ): def create_y ( x ): print ( k * x + b ) return create_y line_6_1 = line_6 ( 1 , 2 ) line_6_1 ( 0 ) line_6_1 ( 1 ) line_6_1 ( 2 ) line_6_2 = line_6 ( 11 , 22 ) line_6_2 ( 0 ) line_6_2 ( 1 ) line_6_2 ( 2 ) # \u601d\u8003\uff1a\u51fd\u6570\u3001\u533f\u540d\u51fd\u6570\u3001\u95ed\u5305\u3001\u5bf9\u8c61 \u5f53\u505a\u5b9e\u53c2\u65f6 \u6709\u4ec0\u4e48\u533a\u522b\uff1f # 1. \u533f\u540d\u51fd\u6570\u80fd\u591f\u5b8c\u6210\u57fa\u672c\u7684\u7b80\u5355\u529f\u80fd\uff0c\uff0c\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u5f15\u7528 \u53ea\u6709\u529f\u80fd # 2. \u666e\u901a\u51fd\u6570\u80fd\u591f\u5b8c\u6210\u8f83\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\uff0c\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u5f15\u7528 \u53ea\u6709\u529f\u80fd # 3. \u95ed\u5305\u80fd\u591f\u5c06\u8f83\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\uff0c\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u95ed\u5305\u4e2d\u7684\u51fd\u6570\u4ee5\u53ca\u6570\u636e\uff0c\u56e0\u6b64\u4f20\u9012\u662f\u529f\u80fd+\u6570\u636e # 4. \u5bf9\u8c61\u80fd\u591f\u5b8c\u6210\u6700\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\uff0c\uff0c\u4f20\u9012\u662f\u5f88\u591a\u6570\u636e+\u5f88\u591a\u529f\u80fd\uff0c\u56e0\u6b64\u4f20\u9012\u662f\u529f\u80fd+\u6570\u636e \u4fee\u6539\u95ed\u5305\u4e2d\u7684\u6570\u636e \u00b6 x = 300 def test1 (): x = 200 def test2 (): nonlocal x print ( \"----1----x= %d \" % x ) x = 100 #\u4f7f\u7528nolocal\u5bf9\u95ed\u5305\u4e2d\u7684\u53d8\u91cf\u8fdb\u884c\u7c7b\u4f3cglobal\u7684\u58f0\u660e print ( \"----2----x= %d \" % x ) return test2 t1 = test1 () t1 () \u6267\u884c\u7ed3\u679c ---- 1 ---- x = 200 ---- 2 ---- x = 100 \u88c5\u9970\u5668 \u00b6 \u88c5\u9970\u5668\u662f\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u7ecf\u5e38\u4f1a\u7528\u5230\u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u7528\u597d\u4e86\u88c5\u9970\u5668\uff0c\u5f00\u53d1\u6548\u7387\u5982\u864e\u6dfb\u7ffc\uff0c\u6240\u4ee5\u8fd9\u4e5f\u662fPython\u9762\u8bd5\u4e2d\u5fc5\u95ee\u7684\u95ee\u9898\uff0c\u4f46\u5bf9\u4e8e\u597d\u591a\u521d\u6b21\u63a5\u89e6\u8fd9\u4e2a\u77e5\u8bc6\u7684\u4eba\u6765\u8bb2\uff0c\u8fd9\u4e2a\u529f\u80fd\u6709\u70b9\u7ed5\uff0c\u81ea\u5b66\u65f6\u76f4\u63a5\u7ed5\u8fc7\u53bb\u4e86\uff0c\u7136\u540e\u9762\u8bd5\u95ee\u5230\u4e86\u5c31\u6302\u4e86\uff0c\u56e0\u4e3a\u88c5\u9970\u5668\u662f\u7a0b\u5e8f\u5f00\u53d1\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u8fd9\u4e2a\u90fd\u4e0d\u4f1a\uff0c\u522b\u8ddf\u4eba\u5bb6\u8bf4\u4f60\u4f1aPython, \u770b\u4e86\u4e0b\u9762\u7684\u6587\u7ae0\uff0c\u4fdd\u8bc1\u4f60\u5b66\u4f1a\u88c5\u9970\u5668\u3002 1\u3001\u5148\u660e\u767d\u8fd9\u6bb5\u4ee3\u7801 \u00b6 #### \u7b2c\u4e00\u6ce2 #### def foo (): print ( 'foo' ) foo # \u8868\u793a\u662f\u51fd\u6570 foo () # \u8868\u793a\u6267\u884cfoo\u51fd\u6570 #### \u7b2c\u4e8c\u6ce2 #### def foo (): print ( 'foo' ) foo = lambda x : x + 1 foo () # \u6267\u884clambda\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u518d\u662f\u539f\u6765\u7684foo\u51fd\u6570\uff0c\u56e0\u4e3afoo\u8fd9\u4e2a\u540d\u5b57\u88ab\u91cd\u65b0\u6307\u5411\u4e86\u53e6\u5916\u4e00\u4e2a\u533f\u540d\u51fd\u6570 \u51fd\u6570\u540d\u4ec5\u4ec5\u662f\u4e2a\u53d8\u91cf\uff0c\u53ea\u4e0d\u8fc7\u6307\u5411\u4e86\u5b9a\u4e49\u7684\u51fd\u6570\u800c\u5df2\uff0c\u6240\u4ee5\u624d\u80fd\u901a\u8fc7 \u51fd\u6570\u540d()\u8c03\u7528\uff0c\u5982\u679c \u51fd\u6570\u540d=xxx\u88ab\u4fee\u6539\u4e86\uff0c\u90a3\u4e48\u5f53\u5728\u6267\u884c \u51fd\u6570\u540d()\u65f6\uff0c\u8c03\u7528\u7684\u5c31\u4e0d\u77e5\u4e4b\u524d\u7684\u90a3\u4e2a\u51fd\u6570\u4e86 2\u3001\u9700\u6c42\u6765\u4e86 \u00b6 \u521d\u521b\u516c\u53f8\u6709N\u4e2a\u4e1a\u52a1\u90e8\u95e8\uff0c\u57fa\u7840\u5e73\u53f0\u90e8\u95e8\u8d1f\u8d23\u63d0\u4f9b\u5e95\u5c42\u7684\u529f\u80fd\uff0c\u5982\uff1a\u6570\u636e\u5e93\u64cd\u4f5c\u3001redis\u8c03\u7528\u3001\u76d1\u63a7API\u7b49\u529f\u80fd\u3002\u4e1a\u52a1\u90e8\u95e8\u4f7f\u7528\u57fa\u7840\u529f\u80fd\u65f6\uff0c\u53ea\u9700\u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd\u5373\u53ef\u3002\u5982\u4e0b\uff1a ############### \u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd\u5982\u4e0b ############### def f1 (): print ( 'f1' ) def f2 (): print ( 'f2' ) def f3 (): print ( 'f3' ) def f4 (): print ( 'f4' ) ############### \u4e1a\u52a1\u90e8\u95e8A \u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd ############### f1 () f2 () f3 () f4 () ############### \u4e1a\u52a1\u90e8\u95e8B \u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd ############### f1 () f2 () f3 () f4 () \u76ee\u524d\u516c\u53f8\u6709\u6761\u4e0d\u7d0a\u7684\u8fdb\u884c\u7740\uff0c\u4f46\u662f\uff0c\u4ee5\u524d\u57fa\u7840\u5e73\u53f0\u7684\u5f00\u53d1\u4eba\u5458\u5728\u5199\u4ee3\u7801\u65f6\u5019\u6ca1\u6709\u5173\u6ce8\u9a8c\u8bc1\u76f8\u5173\u7684\u95ee\u9898\uff0c\u5373\uff1a\u57fa\u7840\u5e73\u53f0\u7684\u63d0\u4f9b\u7684\u529f\u80fd\u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u4f7f\u7528\u3002\u73b0\u5728\u9700\u8981\u5bf9\u57fa\u7840\u5e73\u53f0\u7684\u6240\u6709\u529f\u80fd\u8fdb\u884c\u91cd\u6784\uff0c\u4e3a\u5e73\u53f0\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u6dfb\u52a0\u9a8c\u8bc1\u673a\u5236\uff0c\u5373\uff1a\u6267\u884c\u529f\u80fd\u524d\uff0c\u5148\u8fdb\u884c\u9a8c\u8bc1\u3002 \u8001\u5927\u628a\u5de5\u4f5c\u4ea4\u7ed9 Low B\uff0c\u4ed6\u662f\u8fd9\u4e48\u505a\u7684\uff1a \u00b6 \u8ddf\u6bcf\u4e2a\u4e1a\u52a1\u90e8\u95e8\u4ea4\u6d89\uff0c\u6bcf\u4e2a\u4e1a\u52a1\u90e8\u95e8\u81ea\u5df1\u5199\u4ee3\u7801\uff0c\u8c03\u7528\u57fa\u7840\u5e73\u53f0\u7684\u529f\u80fd\u4e4b\u524d\u5148\u9a8c\u8bc1\u3002\u8bf6\uff0c\u8fd9\u6837\u4e00\u6765\u57fa\u7840\u5e73\u53f0\u5c31\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4fee\u6539\u4e86\u3002\u592a\u68d2\u4e86\uff0c\u6709\u5145\u8db3\u7684\u65f6\u95f4\u6ce1\u59b9\u5b50... \u5f53\u5929Low B \u88ab\u5f00\u9664\u4e86\u2026 \u8001\u5927\u628a\u5de5\u4f5c\u4ea4\u7ed9 Low BB\uff0c\u4ed6\u662f\u8fd9\u4e48\u505a\u7684\uff1a \u00b6 ############### \u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd\u5982\u4e0b ############### def f1 (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 print ( 'f1' ) def f2 (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 print ( 'f2' ) def f3 (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 print ( 'f3' ) def f4 (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 print ( 'f4' ) ############### \u4e1a\u52a1\u90e8\u95e8\u4e0d\u53d8 ############### ### \u4e1a\u52a1\u90e8\u95e8A \u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd### f1 () f2 () f3 () f4 () ### \u4e1a\u52a1\u90e8\u95e8B \u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd ### f1 () f2 () f3 () f4 () \u8fc7\u4e86\u4e00\u5468 Low BB \u88ab\u5f00\u9664\u4e86\u2026 \u8001\u5927\u628a\u5de5\u4f5c\u4ea4\u7ed9 Low BBB\uff0c\u4ed6\u662f\u8fd9\u4e48\u505a\u7684\uff1a \u00b6 \u53ea\u5bf9\u57fa\u7840\u5e73\u53f0\u7684\u4ee3\u7801\u8fdb\u884c\u91cd\u6784\uff0c\u5176\u4ed6\u4e1a\u52a1\u90e8\u95e8\u65e0\u9700\u505a\u4efb\u4f55\u4fee\u6539 ############### \u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd\u5982\u4e0b ############### def check_login (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 pass def f1 (): check_login () print ( 'f1' ) def f2 (): check_login () print ( 'f2' ) def f3 (): check_login () print ( 'f3' ) def f4 (): check_login () print ( 'f4' ) \u8001\u5927\u770b\u4e86\u4e0bLow BBB \u7684\u5b9e\u73b0\uff0c\u5634\u89d2\u6f0f\u51fa\u4e86\u4e00\u4e1d\u7684\u6b23\u6170\u7684\u7b11\uff0c\u8bed\u91cd\u5fc3\u957f\u7684\u8ddfLow BBB\u804a\u4e86\u4e2a\u5929\uff1a \u8001\u5927\u8bf4\uff1a \u00b6 \u5199\u4ee3\u7801\u8981\u9075\u5faa \u5f00\u653e\u5c01\u95ed \u539f\u5219\uff0c\u867d\u7136\u5728\u8fd9\u4e2a\u539f\u5219\u662f\u7528\u7684\u9762\u5411\u5bf9\u8c61\u5f00\u53d1\uff0c\u4f46\u662f\u4e5f\u9002\u7528\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5b83\u89c4\u5b9a\u5df2\u7ecf\u5b9e\u73b0\u7684\u529f\u80fd\u4ee3\u7801\u4e0d\u5141\u8bb8\u88ab\u4fee\u6539\uff0c\u4f46\u53ef\u4ee5\u88ab\u6269\u5c55\uff0c\u5373\uff1a \u5c01\u95ed\uff1a\u5df2\u5b9e\u73b0\u7684\u529f\u80fd\u4ee3\u7801\u5757 \u5f00\u653e\uff1a\u5bf9\u6269\u5c55\u5f00\u53d1 \u5982\u679c\u5c06\u5f00\u653e\u5c01\u95ed\u539f\u5219\u5e94\u7528\u5728\u4e0a\u8ff0\u9700\u6c42\u4e2d\uff0c\u90a3\u4e48\u5c31\u4e0d\u5141\u8bb8\u5728\u51fd\u6570 f1 \u3001f2\u3001f3\u3001f4\u7684\u5185\u90e8\u8fdb\u884c\u4fee\u6539\u4ee3\u7801\uff0c\u8001\u677f\u5c31\u7ed9\u4e86Low BBB\u4e00\u4e2a\u5b9e\u73b0\u65b9\u6848\uff1a def w1 ( func ): def inner (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 func () return inner @w1 def f1 (): print ( 'f1' ) @w1 def f2 (): print ( 'f2' ) @w1 def f3 (): print ( 'f3' ) @w1 def f4 (): print ( 'f4' ) \u5bf9\u4e8e\u4e0a\u8ff0\u4ee3\u7801\uff0c\u4e5f\u662f\u4ec5\u4ec5\u5bf9\u57fa\u7840\u5e73\u53f0\u7684\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u5176\u4ed6\u4eba\u8c03\u7528\u51fd\u6570 f1 f2 f3 f4 \u4e4b\u524d\u90fd\u8fdb\u884c\u3010\u9a8c\u8bc1\u3011\u64cd\u4f5c\uff0c\u5e76\u4e14\u5176\u4ed6\u4e1a\u52a1\u90e8\u95e8\u65e0\u9700\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 Low BBB\u5fc3\u60ca\u80c6\u6218\u7684\u95ee\u4e86\u4e0b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u5185\u90e8\u6267\u884c\u539f\u7406\u662f\u4ec0\u4e48\u5462\uff1f \u8001\u5927\u6b63\u8981\u751f\u6c14\uff0c\u7a81\u7136Low BBB\u7684\u624b\u673a\u6389\u5230\u5730\u4e0a\uff0c\u6070\u5de7\u5c4f\u4fdd\u5c31\u662fLow BBB\u7684\u5973\u53cb\u7167\u7247\uff0c\u8001\u5927\u4e00\u770b\u4e00\u7d27\u4e00\u6296\uff0c\u559c\u7b11\u989c\u5f00\uff0c\u51b3\u5b9a\u548cLow BBB\u4ea4\u4e2a\u597d\u670b\u53cb\u3002 \u8be6\u7ec6\u7684\u5f00\u59cb\u8bb2\u89e3\u4e86\uff1a \u5355\u72ec\u4ee5f1\u4e3a\u4f8b\uff1a def w1 ( func ): def inner (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 func () return inner @w1 def f1 (): print ( 'f1' ) python\u89e3\u91ca\u5668\u5c31\u4f1a\u4ece\u4e0a\u5230\u4e0b\u89e3\u91ca\u4ee3\u7801\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a def w1(func): ==>\u5c06w1\u51fd\u6570\u52a0\u8f7d\u5230\u5185\u5b58 @w1 \u6ca1\u9519\uff0c \u4ece\u8868\u9762\u4e0a\u770b\u89e3\u91ca\u5668\u4ec5\u4ec5\u4f1a\u89e3\u91ca\u8fd9\u4e24\u53e5\u4ee3\u7801\uff0c\u56e0\u4e3a\u51fd\u6570\u5728 \u6ca1\u6709\u88ab\u8c03\u7528\u4e4b\u524d\u5176\u5185\u90e8\u4ee3\u7801\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u4ece\u8868\u9762\u4e0a\u770b\u89e3\u91ca\u5668\u7740\u5b9e\u4f1a\u6267\u884c\u8fd9\u4e24\u53e5\uff0c\u4f46\u662f @w1 \u8fd9\u4e00\u53e5\u4ee3\u7801\u91cc\u5374\u6709\u5927\u6587\u7ae0\uff0c @\u51fd\u6570\u540d \u662fpython\u7684\u4e00\u79cd\u8bed\u6cd5\u7cd6\u3002 \u4e0a\u4f8b@w1\u5185\u90e8\u4f1a\u6267\u884c\u4e00\u4e0b\u64cd\u4f5c\uff1a \u00b6 \u6267\u884cw1\u51fd\u6570 \u00b6 \u6267\u884cw1\u51fd\u6570 \uff0c\u5e76\u5c06 @w1 \u4e0b\u9762\u7684\u51fd\u6570\u4f5c\u4e3aw1\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5373\uff1a @w1 \u7b49\u4ef7\u4e8e w1(f1) \u6240\u4ee5\uff0c\u5185\u90e8\u5c31\u4f1a\u53bb\u6267\u884c\uff1a def inner (): #\u9a8c\u8bc1 1 #\u9a8c\u8bc1 2 #\u9a8c\u8bc1 3 f1 () # func\u662f\u53c2\u6570\uff0c\u6b64\u65f6 func \u7b49\u4e8e f1 return inner # \u8fd4\u56de\u7684 inner\uff0cinner\u4ee3\u8868\u7684\u662f\u51fd\u6570\uff0c\u975e\u6267\u884c\u51fd\u6570 ,\u5176\u5b9e\u5c31\u662f\u5c06\u539f\u6765\u7684 f1 \u51fd\u6570\u585e\u8fdb\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d w1\u7684\u8fd4\u56de\u503c \u00b6 \u5c06\u6267\u884c\u5b8c\u7684w1\u51fd\u6570\u8fd4\u56de\u503c \u8d4b\u503c \u7ed9@w1\u4e0b\u9762\u7684\u51fd\u6570\u7684\u51fd\u6570\u540df1 \u5373\u5c06w1\u7684\u8fd4\u56de\u503c\u518d\u91cd\u65b0\u8d4b\u503c\u7ed9 f1\uff0c\u5373\uff1a \u65b0 f1 = def inner (): #\u9a8c\u8bc1 1 #\u9a8c\u8bc1 2 #\u9a8c\u8bc1 3 \u539f\u6765 f1 () return inner \u6240\u4ee5\uff0c\u4ee5\u540e\u4e1a\u52a1\u90e8\u95e8\u60f3\u8981\u6267\u884c f1 \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u6267\u884c \u65b0f1 \u51fd\u6570\uff0c\u5728\u65b0f1 \u51fd\u6570\u5185\u90e8\u5148\u6267\u884c\u9a8c\u8bc1\uff0c\u518d\u6267\u884c\u539f\u6765\u7684f1\u51fd\u6570\uff0c\u7136\u540e\u5c06\u539f\u6765f1 \u51fd\u6570\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u7ed9\u4e86\u4e1a\u52a1\u8c03\u7528\u8005\u3002 \u5982\u6b64\u4e00\u6765\uff0c \u5373\u6267\u884c\u4e86\u9a8c\u8bc1\u7684\u529f\u80fd\uff0c\u53c8\u6267\u884c\u4e86\u539f\u6765f1\u51fd\u6570\u7684\u5185\u5bb9\uff0c\u5e76\u5c06\u539ff1\u51fd\u6570\u8fd4\u56de\u503c \u8fd4\u56de\u7ed9\u4e1a\u52a1\u8c03\u7528\u7740 Low BBB \u4f60\u660e\u767d\u4e86\u5417\uff1f\u8981\u662f\u6ca1\u660e\u767d\u7684\u8bdd\uff0c\u6211\u665a\u4e0a\u53bb\u4f60\u5bb6\u5e2e\u4f60\u89e3\u51b3\u5427\uff01\uff01\uff01 \u88c5\u9970\u5668\u7684\u4e00\u4e2a\u6f14\u793a \u00b6 def set_func ( func ): def call_func (): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func () return call_func @set_func def test1 (): print ( \"-----test1----\" ) test1 () \u6267\u884c\u7ed3\u679c: --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 04-\u88c5\u9970\u5668\u7684\u5b9e\u73b0\u8fc7\u7a0b.py \u00b6 def set_func ( func ): def call_func (): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func () return call_func @set_func # \u7b49\u4ef7\u4e8etest1 = set_func(test1) def test1 (): print ( \"-----test1----\" ) #\u8fd9\u4e24\u884c\u5c31\u662f\u5b9e\u73b0\u7684\u8fc7\u7a0b # ret = set_func(test1) # ret() # test1 = set_func(test1) test1 () test1 () 05-\u88c5\u9970\u5668\u7684\u4f5c\u7528-\u6765\u7edf\u8ba1\u4e00\u4e2a\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u95f4.py \u00b6 import time def set_func ( func ): #\u95ed\u5305 def call_func (): start_time = time . time () #\u5f00\u59cb\u7684\u6267\u884c\u65f6\u95f4 func () stop_time = time . time () #\u7ec8\u6b62\u7684\u6267\u884c\u65f6\u95f4 print ( \"alltimeis %f \" % ( stop_time - start_time )) return call_func @set_func # \u7b49\u4ef7\u4e8etest1 = set_func(test1) def test1 (): print ( \"-----test1----\" ) for i in range ( 10000 ): pass # ret = set_func(test1) # ret() # test1 = set_func(test1) test1 () test1 () \u6267\u884c\u7ed3\u679c ----- test1 ---- alltimeis 0.000999 ----- test1 ---- alltimeis 0.000000 06-\u5bf9\u6ca1\u6709\u53c2\u6570\u3001\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py \u00b6 def set_func ( func ): def call_func (): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func () return call_func @set_func # \u7b49\u4ef7\u4e8etest1 = set_func(test1) def test1 (): print ( \"-----test1----\" ) # ret = set_func(test1) # ret() # test1 = set_func(test1) test1 () \u6267\u884c --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 07-\u5bf9\u6709\u53c2\u6570\u3001\u65e0\u8fd4\u56de\u503c\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py \u00b6 def set_func ( func ): def call_func ( a ): #\u8fd9\u91cc\u4e5f\u9700\u8981\u52a0\u53c2\u6570,\u56e0\u4e3a\u8981\u628a\u53c2\u6570\u5728\u4f20\u9012\u7ed9func(a) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func ( a ) #\u8fd9\u91cc\u9700\u8981\u52a0\u53c2\u6570 return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num ): print ( \"-----test1---- %d \" % num ) test1 ( 100 ) test1 ( 200 ) #\u8ddf\u4f7f\u7528\u88c5\u9970\u5668\u662f\u4e00\u6837\u7684 #xx = set_func(test1) #xx(100) \u6267\u884c --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 200 3. \u518d\u8bae\u88c5\u9970\u5668 \u00b6 # \u5b9a\u4e49\u51fd\u6570\uff1a\u5b8c\u6210\u5305\u88f9\u6570\u636e def makeBold ( fn ): def wrapped (): return \"<b>\" + fn () + \"</b>\" return wrapped # \u5b9a\u4e49\u51fd\u6570\uff1a\u5b8c\u6210\u5305\u88f9\u6570\u636e def makeItalic ( fn ): def wrapped (): return \"<i>\" + fn () + \"</i>\" return wrapped @makeBold def test1 (): return \"hello world-1\" @makeItalic def test2 (): return \"hello world-2\" @makeBold @makeItalic def test3 (): return \"hello world-3\" print ( test1 ()) print ( test2 ()) print ( test3 ()) \u8fd0\u884c\u7ed3\u679c: < b > hello world-1 </ b > < i > hello world-2 </ i > < b >< i > hello world-3 </ i ></ b > 4. \u88c5\u9970\u5668(decorator)\u529f\u80fd \u00b6 \u5f15\u5165\u65e5\u5fd7 \u51fd\u6570\u6267\u884c\u65f6\u95f4\u7edf\u8ba1 \u6267\u884c\u51fd\u6570\u524d\u9884\u5907\u5904\u7406 \u6267\u884c\u51fd\u6570\u540e\u6e05\u7406\u529f\u80fd \u6743\u9650\u6821\u9a8c\u7b49\u573a\u666f \u7f13\u5b58 5. \u88c5\u9970\u5668\u793a\u4f8b \u00b6 \u4f8b1:\u65e0\u53c2\u6570\u7684\u51fd\u6570 \u00b6 from time import ctime , sleep def timefun ( func ): def wrapped_func (): print ( \" %s called at %s \" % ( func . __name__ , ctime ())) func () return wrapped_func @timefun def foo (): print ( \"I am foo\" ) foo () sleep ( 2 ) foo () \u4e0a\u9762\u4ee3\u7801\u7406\u89e3\u88c5\u9970\u5668\u6267\u884c\u884c\u4e3a\u53ef\u7406\u89e3\u6210 foo = timefun ( foo ) # foo\u5148\u4f5c\u4e3a\u53c2\u6570\u8d4b\u503c\u7ed9func\u540e,foo\u63a5\u6536\u6307\u5411timefun\u8fd4\u56de\u7684wrapped_func foo () # \u8c03\u7528foo(),\u5373\u7b49\u4ef7\u8c03\u7528wrapped_func() # \u5185\u90e8\u51fd\u6570wrapped_func\u88ab\u5f15\u7528\uff0c\u6240\u4ee5\u5916\u90e8\u51fd\u6570\u7684func\u53d8\u91cf(\u81ea\u7531\u53d8\u91cf)\u5e76\u6ca1\u6709\u91ca\u653e # func\u91cc\u4fdd\u5b58\u7684\u662f\u539ffoo\u51fd\u6570\u5bf9\u8c61 \u4f8b2:\u88ab\u88c5\u9970\u7684\u51fd\u6570\u6709\u53c2\u6570 \u00b6 from time import ctime , sleep def timefun ( func ): def wrapped_func ( a , b ): print ( \" %s called at %s \" % ( func . __name__ , ctime ())) print ( a , b ) func ( a , b ) return wrapped_func @timefun def foo ( a , b ): print ( a + b ) foo ( 3 , 5 ) sleep ( 2 ) foo ( 2 , 4 ) 08-\u901a\u4e00\u4e2a\u88c5\u9970\u5668\u5bf9\u591a\u4e2a\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py \u00b6 def set_func ( func ): def call_func ( a ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func ( a ) return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num ): print ( \"-----test1---- %d \" % num ) @set_func # \u76f8\u5f53\u4e8e test2 = set_func(test2) def test2 ( num ): print ( \"-----test2---- %d \" % num ) test1 ( 100 ) test2 ( 200 ) \u6267\u884c --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test2 ---- 200 09-\u88c5\u9970\u5668\u5728\u6ca1\u6709\u8c03\u7528\u51fd\u6570\u4e4b\u524d\u5df2\u7ecf\u88c5\u9970\u4e86.py \u00b6 def set_func ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970\" ) def call_func ( a ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func ( a ) return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num ): print ( \"-----test1---- %d \" % num ) @set_func # \u76f8\u5f53\u4e8e test2 = set_func(test2) def test2 ( num ): print ( \"-----test2---- %d \" % num ) # \u88c5\u9970\u5668\u5728\u8c03\u7528\u51fd\u6570\u4e4b\u524d\uff0c\u5df2\u7ecf\u88abpython\u89e3\u91ca\u5668\u6267\u884c\u4e86\uff0c\u6240\u4ee5\u8981\u7262\u8bb0 \u5f53\u8c03\u7528\u51fd\u6570\u4e4b\u524d \u5176\u5b9e\u5df2\u7ecf\u88c5\u9970\u597d\u4e86\uff0c\u5c3d\u7ba1\u8c03\u7528\u5c31\u53ef\u4ee5\u4e86 # test1(100) # test2(200) \u6267\u884c --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 \u4f8b3:\u88ab\u88c5\u9970\u7684\u51fd\u6570\u6709\u4e0d\u5b9a\u957f\u53c2\u6570 \u00b6 from time import ctime , sleep def timefun ( func ): def wrapped_func ( * args , ** kwargs ): print ( \" %s called at %s \" % ( func . __name__ , ctime ())) func ( * args , ** kwargs ) return wrapped_func @timefun def foo ( a , b , c ): print ( a + b + c ) foo ( 3 , 5 , 7 ) sleep ( 2 ) foo ( 2 , 4 , 9 ) 10-\u5bf9\u4e0d\u5b9a\u957f\u53c2\u6570\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py \u00b6 def set_func ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970\" ) def call_func ( * args , ** kwargs ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) # func(args, kwargs) # \u4e0d\u884c\uff0c\u76f8\u5f53\u4e8e\u4f20\u9012\u4e862\u4e2a\u53c2\u6570 \uff1a1\u4e2a\u5143\u7ec4\uff0c1\u4e2a\u5b57\u5178 func ( * args , ** kwargs ) # \u62c6\u5305(\u591a\u4f59\u7684\u53c2\u6570\u7ed9\u5143\u7956,\u591a\u4f59\u7684\u5173\u952e\u5b57\u7ed9\u5b57\u5178) return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num , num1 , * args , ** kwargs ): # *args\u5143\u7956,**kwargs \u5b57\u5178 print ( \"-----test1---- %d \" % num , num1 ) print ( \"-----test1----\" , args ) print ( \"-----test1----\" , kwargs ) #test1(100) test1 ( 100 , 200 ) test1 ( 100 , 200 , 300 , mm = 100 ) \u6267\u884c --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 200 ----- test1 ---- () ----- test1 ---- {} --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 200 ----- test1 ---- ( 300 ,) ----- test1 ---- { 'mm' : 100 } \u4f8b4:\u88c5\u9970\u5668\u4e2d\u7684return(\u8981\u5c06func\u7684\u8fd4\u56de\u503c\u7ee7\u7eed\u8fd4\u56de\u52a0\u4e00\u4e2areturn\u5c31\u53ef\u4ee5\u4e86) \u00b6 11-\u5bf9\u5e26\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py \u00b6 \u901a\u7528\u7684\u88c5\u9970\u5668 def set_func ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970\" ) def call_func ( * args , ** kwargs ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) # func(args, kwargs) # \u4e0d\u884c\uff0c\u76f8\u5f53\u4e8e\u4f20\u9012\u4e862\u4e2a\u53c2\u6570 \uff1a1\u4e2a\u5143\u7ec4\uff0c1\u4e2a\u5b57\u5178 return func ( * args , ** kwargs ) # \u62c6\u5305 return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num , * args , ** kwargs ): print ( \"-----test1---- %d \" % num ) print ( \"-----test1----\" , args ) print ( \"-----test1----\" , kwargs ) return \"ok\" @set_func def test2 (): pass ret = test1 ( 100 ) print ( ret ) ret = test2 () #\u6ca1\u6709\u8fd4\u56de\u503c\u90a3\u4e48\u5c31\u8fd4\u56denone,return\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd print ( ret ) \u6267\u884c --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 ----- test1 ---- () ----- test1 ---- {} ok --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- None \u8bfe\u4ef6\u7684\u4ee3\u7801 from time import ctime , sleep def timefun ( func ): def wrapped_func (): print ( \" %s called at %s \" % ( func . __name__ , ctime ())) func () return wrapped_func @timefun def foo (): print ( \"I am foo\" ) @timefun def getInfo (): return '----hahah---' foo () sleep ( 2 ) foo () print ( getInfo ()) \u6267\u884c\u7ed3\u679c: foo called at Fri Nov 4 21 : 55 : 35 2016 I am foo foo called at Fri Nov 4 21 : 55 : 37 2016 I am foo getInfo called at Fri Nov 4 21 : 55 : 37 2016 None \u5982\u679c\u4fee\u6539\u88c5\u9970\u5668\u4e3a return func() \uff0c\u5219\u8fd0\u884c\u7ed3\u679c\uff1a foo called at Fri Nov 4 21 : 55 : 57 2016 I am foo foo called at Fri Nov 4 21 : 55 : 59 2016 I am foo getInfo called at Fri Nov 4 21 : 55 : 59 2016 ---- hahah --- \u603b\u7ed3\uff1a \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\u4e3a\u4e86\u8ba9\u88c5\u9970\u5668\u66f4\u901a\u7528\uff0c\u53ef\u4ee5\u6709return 12-\u591a\u4e2a\u88c5\u9970\u5668\u5bf9\u540c\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py \u00b6 def add_qx ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970\u6743\u96501\u7684\u529f\u80fd---\" ) def call_func ( * args , ** kwargs ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) return func ( * args , ** kwargs ) return call_func def add_xx ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970xxx\u7684\u529f\u80fd---\" ) def call_func ( * args , ** kwargs ): print ( \"---\u8fd9\u662fxxx\u7684\u529f\u80fd----\" ) return func ( * args , ** kwargs ) return call_func @add_qx #\u60f3\u88c5\u4f46\u662f\u4e0b\u9762\u4e0d\u662f\u51fd\u6570\u7b49\u4e0b\u9762\u7684\u88c5\u9970\u5668\u5b8c\u4e8b\u4e86\u5728\u88c5 @add_xx def test1 (): print ( \"------test1------\" ) test1 () #\u7ed3\u679c \u7c7b\u4f3c\u4e8e\u4f7f\u7528\u6808,\u9760\u8fd1\u51fd\u6570\u7684\u5148\u8fdb\u6808,(\u88c5\u9970)\u6267\u884c\u7684\u65f6\u5019\u5148\u8fdb\u7684\u540e\u51fa,\u6216\u8005\u662f\u6267\u884c\u7684\u65f6\u5019\u662f\u6309\u7167\u987a\u5e8f\u6267\u884c\u4ee3\u7801\u7684 --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 xxx\u7684\u529f\u80fd --- --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970\u6743\u9650 1 \u7684\u529f\u80fd --- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f xxx\u7684\u529f\u80fd ---- ------ test1 ------ 13-\u5e94\u7528\uff1a\u591a\u4e2a\u88c5\u9970\u5668\u591a\u540c\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py \u00b6 def set_func_1 ( func ): def call_func (): # \"<h1>haha</h1>\" return \"<h1>\" + func () + \"</h1>\" return call_func def set_func_2 ( func ): def call_func (): return \"<td>\" + func () + \"</td>\" return call_func @set_func_1 @set_func_2 def get_str (): return \"haha\" print ( get_str ()) \u6267\u884c < h1 >< td > haha </ td ></ h1 > \u4f8b5:\u88c5\u9970\u5668\u5e26\u53c2\u6570,\u5728\u539f\u6709\u88c5\u9970\u5668\u7684\u57fa\u7840\u4e0a\uff0c\u8bbe\u7f6e\u5916\u90e8\u53d8\u91cf \u00b6 #decorator2.py from time import ctime , sleep def timefun_arg ( pre = \"hello\" ): def timefun ( func ): def wrapped_func (): print ( \" %s called at %s %s \" % ( func . __name__ , ctime (), pre )) return func () return wrapped_func return timefun # \u4e0b\u9762\u7684\u88c5\u9970\u8fc7\u7a0b # 1. \u8c03\u7528timefun_arg(\"itcast\") # 2. \u5c06\u6b65\u9aa41\u5f97\u5230\u7684\u8fd4\u56de\u503c\uff0c\u5373time_fun\u8fd4\u56de\uff0c \u7136\u540etime_fun(foo) # 3. \u5c06time_fun(foo)\u7684\u7ed3\u679c\u8fd4\u56de\uff0c\u5373wrapped_func # 4. \u8ba9foo = wrapped_fun\uff0c\u5373foo\u73b0\u5728\u6307\u5411wrapped_func @timefun_arg ( \"itcast\" ) def foo (): print ( \"I am foo\" ) @timefun_arg ( \"python\" ) def too (): print ( \"I am too\" ) foo () sleep ( 2 ) foo () too () sleep ( 2 ) too () \u53ef\u4ee5\u7406\u89e3\u4e3a foo () == timefun_arg ( \"itcast\" )( foo )() \u4f8b6\uff1a\u7c7b\u88c5\u9970\u5668\uff08\u6269\u5c55\uff0c\u975e\u91cd\u70b9\uff09 \u00b6 \u88c5\u9970\u5668\u51fd\u6570\u5176\u5b9e\u662f\u8fd9\u6837\u4e00\u4e2a\u63a5\u53e3\u7ea6\u675f\uff0c\u5b83\u5fc5\u987b\u63a5\u53d7\u4e00\u4e2acallable\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2acallable\u5bf9\u8c61\u3002\u5728Python\u4e2d\u4e00\u822ccallable\u5bf9\u8c61\u90fd\u662f\u51fd\u6570\uff0c\u4f46\u4e5f\u6709\u4f8b\u5916\u3002\u53ea\u8981\u67d0\u4e2a\u5bf9\u8c61\u91cd\u5199\u4e86 __call__() \u65b9\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u662fcallable\u7684\u3002 class Test (): def __call__ ( self ): print ( 'call me!' ) t = Test () t () # call me \u7c7b\u88c5\u9970\u5668demo class Test ( object ): def __init__ ( self , func ): print ( \"---\u521d\u59cb\u5316---\" ) print ( \"func name is %s \" % func . __name__ ) self . __func = func def __call__ ( self ): print ( \"---\u88c5\u9970\u5668\u4e2d\u7684\u529f\u80fd---\" ) self . __func () #\u8bf4\u660e\uff1a #1. \u5f53\u7528Test\u6765\u88c5\u4f5c\u88c5\u9970\u5668\u5bf9test\u51fd\u6570\u8fdb\u884c\u88c5\u9970\u7684\u65f6\u5019\uff0c\u9996\u5148\u4f1a\u521b\u5efaTest\u7684\u5b9e\u4f8b\u5bf9\u8c61 # \u5e76\u4e14\u4f1a\u628atest\u8fd9\u4e2a\u51fd\u6570\u540d\u5f53\u505a\u53c2\u6570\u4f20\u9012\u5230__init__\u65b9\u6cd5\u4e2d # \u5373\u5728__init__\u65b9\u6cd5\u4e2d\u7684\u5c5e\u6027__func\u6307\u5411\u4e86test\u6307\u5411\u7684\u51fd\u6570 # #2. test\u6307\u5411\u4e86\u7528Test\u521b\u5efa\u51fa\u6765\u7684\u5b9e\u4f8b\u5bf9\u8c61 # #3. \u5f53\u5728\u4f7f\u7528test()\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u5c31\u76f8\u5f53\u4e8e\u8ba9\u8fd9\u4e2a\u5bf9\u8c61()\uff0c\u56e0\u6b64\u4f1a\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684__call__\u65b9\u6cd5 # #4. \u4e3a\u4e86\u80fd\u591f\u5728__call__\u65b9\u6cd5\u4e2d\u8c03\u7528\u539f\u6765test\u6307\u5411\u7684\u51fd\u6570\u4f53\uff0c\u6240\u4ee5\u5728__init__\u65b9\u6cd5\u4e2d\u5c31\u9700\u8981\u4e00\u4e2a\u5b9e\u4f8b\u5c5e\u6027\u6765\u4fdd\u5b58\u8fd9\u4e2a\u51fd\u6570\u4f53\u7684\u5f15\u7528 # \u6240\u4ee5\u624d\u6709\u4e86self.__func = func\u8fd9\u53e5\u4ee3\u7801\uff0c\u4ece\u800c\u5728\u8c03\u7528__call__\u65b9\u6cd5\u4e2d\u80fd\u591f\u8c03\u7528\u5230test\u4e4b\u524d\u7684\u51fd\u6570\u4f53 @Test def test (): print ( \"----test---\" ) test () showpy () #\u5982\u679c\u628a\u8fd9\u53e5\u8bdd\u6ce8\u91ca\uff0c\u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\uff0c\u4f9d\u7136\u4f1a\u770b\u5230\"--\u521d\u59cb\u5316--\" \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a --- \u521d\u59cb\u5316 --- func name is test --- \u88c5\u9970\u5668\u4e2d\u7684\u529f\u80fd --- ---- test --- 14-\u4f7f\u7528\u7c7b\u5f53\u505a\u88c5\u9970\u5668.py \u00b6 # def set_func_1(func): # def call_func(): # # \"<h1>haha</h1>\" # return \"<h1>\" + func() + \"</h1>\" # return call_func class Test ( object ): def __init__ ( self , func ): self . func = func def __call__ ( self ): print ( \"\u8fd9\u91cc\u662f\u88c5\u9970\u5668\u6dfb\u52a0\u7684\u529f\u80fd.....\" ) return self . func () @Test # \u76f8\u5f53\u4e8eget_str = Test(get_str) def get_str (): return \"haha\" print ( get_str ()) \u6267\u884c \u8fd9\u91cc\u662f\u88c5\u9970\u5668\u6dfb\u52a0\u7684\u529f\u80fd ..... haha","title":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#_1","text":"","title":"\u95ed\u5305"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#1","text":"def test1 (): print ( \"--- in test1 func----\" ) # \u8c03\u7528\u51fd\u6570 test1 () # \u5f15\u7528\u51fd\u6570 ret = test1 print ( id ( ret )) print ( id ( test1 )) #\u901a\u8fc7\u5f15\u7528\u8c03\u7528\u51fd\u6570 ret () \u8fd0\u884c\u7ed3\u679c: --- in test1 func ---- 140212571149040 140212571149040 --- in test1 func ----","title":"1. \u51fd\u6570\u5f15\u7528"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#2","text":"# \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 def test ( number ): # \u5728\u51fd\u6570\u5185\u90e8\u518d\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u4e14\u8fd9\u4e2a\u51fd\u6570\u7528\u5230\u4e86\u5916\u8fb9\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e2a\u51fd\u6570\u4ee5\u53ca\u7528\u5230\u7684\u4e00\u4e9b\u53d8\u91cf\u79f0\u4e4b\u4e3a\u95ed\u5305 def test_in ( number_in ): print ( \"in test_in \u51fd\u6570, number_in is %d \" % number_in ) return number + number_in # \u5176\u5b9e\u8fd9\u91cc\u8fd4\u56de\u7684\u5c31\u662f\u95ed\u5305\u7684\u7ed3\u679c return test_in # \u7ed9test\u51fd\u6570\u8d4b\u503c\uff0c\u8fd9\u4e2a20\u5c31\u662f\u7ed9\u53c2\u6570number ret = test ( 20 ) # \u6ce8\u610f\u8fd9\u91cc\u7684100\u5176\u5b9e\u7ed9\u53c2\u6570number_in print ( ret ( 100 )) #\u6ce8 \u610f\u8fd9\u91cc\u7684200\u5176\u5b9e\u7ed9\u53c2\u6570number_in print ( ret ( 200 )) \u8fd0\u884c\u7ed3\u679c\uff1a in test_in \u51fd\u6570 , number_in is 100 120 in test_in \u51fd\u6570 , number_in is 200 220","title":"2. \u4ec0\u4e48\u662f\u95ed\u5305"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#3","text":"def line_conf ( a , b ): def line ( x ): return a * x + b return line line1 = line_conf ( 1 , 1 ) line2 = line_conf ( 4 , 5 ) print ( line1 ( 5 )) print ( line2 ( 5 )) \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570line\u4e0e\u53d8\u91cfa,b\u6784\u6210\u95ed\u5305\u3002\u5728\u521b\u5efa\u95ed\u5305\u7684\u65f6\u5019\uff0c\u6211\u4eec\u901a\u8fc7line_conf\u7684\u53c2\u6570a,b\u8bf4\u660e\u4e86\u8fd9\u4e24\u4e2a\u53d8\u91cf\u7684\u53d6\u503c\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u786e\u5b9a\u4e86\u51fd\u6570\u7684\u6700\u7ec8\u5f62\u5f0f(y = x + 1\u548cy = 4x + 5)\u3002\u6211\u4eec\u53ea\u9700\u8981\u53d8\u6362\u53c2\u6570a,b\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u4e0d\u540c\u7684\u76f4\u7ebf\u8868\u8fbe\u51fd\u6570\u3002\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u95ed\u5305\u4e5f\u5177\u6709\u63d0\u9ad8\u4ee3\u7801\u53ef\u590d\u7528\u6027\u7684\u4f5c\u7528\u3002 \u5982\u679c\u6ca1\u6709\u95ed\u5305\uff0c\u6211\u4eec\u9700\u8981\u6bcf\u6b21\u521b\u5efa\u76f4\u7ebf\u51fd\u6570\u7684\u65f6\u5019\u540c\u65f6\u8bf4\u660ea,b,x\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u9700\u8981\u66f4\u591a\u7684\u53c2\u6570\u4f20\u9012\uff0c\u4e5f\u51cf\u5c11\u4e86\u4ee3\u7801\u7684\u53ef\u79fb\u690d\u6027\u3002 \u6ce8\u610f\u70b9: \u7531\u4e8e\u95ed\u5305\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5219\u5916\u90e8\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u6ca1\u6709\u53ca\u65f6\u91ca\u653e\uff0c\u6d88\u8017\u5185\u5b58","title":"3. \u770b\u4e00\u4e2a\u95ed\u5305\u7684\u5b9e\u9645\u4f8b\u5b50\uff1a"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#4","text":"","title":"4. \u4fee\u6539\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u53d8\u91cf"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#python3","text":"def counter ( start = 0 ): def incr (): nonlocal start start += 1 return start return incr c1 = counter ( 5 ) print ( c1 ()) print ( c1 ()) c2 = counter ( 50 ) print ( c2 ()) print ( c2 ()) print ( c1 ()) print ( c1 ()) print ( c2 ()) print ( c2 ())","title":"python3\u7684\u65b9\u6cd5"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#python2","text":"def counter ( start = 0 ): count = [ start ] def incr (): count [ 0 ] += 1 return count [ 0 ] return incr c1 = closeure . counter ( 5 ) print ( c1 ()) # 6 print ( c1 ()) # 7 c2 = closeure . counter ( 100 ) print ( c2 ()) # 101 print ( c2 ()) # 102 \u8bb2\u8bfe\u7684\u4ee3\u7801 # \u95ee\u9898\uff1a\u521d\u4e2d\u91cc\u5b66\u8fc7\u51fd\u6570\uff0c\u4f8b\u5982 y=kx+b, y=ax^2 + bx + c # \u4ee5y=kx+b\u4e3a\u4f8b\uff0c\u8bf7\u8ba1\u7b97\u4e00\u6761\u7ebf\u4e0a\u7684\u8fc7\u4e2a\u70b9 \u5373 \u7ed9x\u503c \u8ba1\u7b97\u51fay\u503c # \u7b2c1\u79cd # k = 1 # b = 2 # y = k*x+b # \u7f3a\u70b9\uff1a\u5982\u679c\u9700\u8981\u591a\u6b21\u8ba1\u7b97\uff0c\u90a3\u4e48\u5c31\u7684\u5199\u591a\u6b21y = k*x+b\u8fd9\u6837\u7684\u5f0f\u5b50 # \u7b2c2\u79cd def line_2 ( k , b , x ): print ( k * x + b ) line_2 ( 1 , 2 , 0 ) line_2 ( 1 , 2 , 1 ) line_2 ( 1 , 2 , 2 ) # \u7f3a\u70b9\uff1a\u5982\u679c\u60f3\u8981\u8ba1\u7b97\u591a\u6b21\u8fd9\u6761\u7ebf\u4e0a\u7684y\u503c\uff0c\u90a3\u4e48\u6bcf\u6b21\u90fd\u9700\u8981\u4f20\u9012k\uff0cb\u7684\u503c\uff0c\u9ebb\u70e6 print ( \"-\" * 50 ) # \u7b2c3\u79cd: \u5168\u5c40\u53d8\u91cf(\u4e0d\u4fee\u6539\u53d8\u91cf\u7684\u8bdd\u662f\u53ef\u4ee5\u76f4\u63a5\u7528\u7684\u4e0d\u7528\u58f0\u660e\u53d8\u91cf) k = 1 b = 2 def line_3 ( x ): print ( k * x + b ) line_3 ( 0 ) line_3 ( 1 ) line_3 ( 2 ) k = 11 b = 22 line_3 ( 0 ) line_3 ( 1 ) line_3 ( 2 ) # \u7f3a\u70b9\uff1a\u5982\u679c\u8981\u8ba1\u7b97\u591a\u6761\u7ebf\u4e0a\u7684y\u503c\uff0c\u90a3\u4e48\u9700\u8981\u6bcf\u6b21\u5bf9\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u4fee\u6539\uff0c\u4ee3\u7801\u4f1a\u589e\u591a\uff0c\u9ebb\u70e6 print ( \"-\" * 50 ) # \u7b2c4\u79cd\uff1a\u7f3a\u7701\u53c2\u6570 def line_4 ( x , k = 1 , b = 2 ): print ( k * x + b ) line_4 ( 0 ) line_4 ( 1 ) line_4 ( 2 ) line_4 ( 0 , k = 11 , b = 22 ) line_4 ( 1 , k = 11 , b = 22 ) line_4 ( 2 , k = 11 , b = 22 ) # \u4f18\u70b9\uff1a\u6bd4\u5168\u5c40\u53d8\u91cf\u7684\u65b9\u5f0f\u597d\u5728\uff1ak, b\u662f\u51fd\u6570line_4\u7684\u4e00\u90e8\u5206 \u800c\u4e0d\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u4e3a\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u4efb\u610f\u7684\u88ab\u5176\u4ed6\u51fd\u6570\u6240\u4fee\u6539 # \u7f3a\u70b9\uff1a\u5982\u679c\u8981\u8ba1\u7b97\u591a\u6761\u7ebf\u4e0a\u7684y\u503c\uff0c\u90a3\u4e48\u9700\u8981\u5728\u8c03\u7528\u7684\u65f6\u5019\u8fdb\u884c\u4f20\u9012\u53c2\u6570\uff0c\u9ebb\u70e6 print ( \"-\" * 50 ) # \u7b2c5\u79cd\uff1a\u5b9e\u4f8b\u5bf9\u8c61 class Line5 ( object ): def __init__ ( self , k , b ): self . k = k self . b = b def __call__ ( self , x ): #call\u9b54\u6cd5\u5c5e\u6027\u53ef\u4ee5\u4f20\u9012\u5f88\u591a\u7684\u4e0d\u5b9a\u957f\u7684\u53c2\u6570 print ( self . k * x + self . b ) line_5_1 = Line5 ( 1 , 2 ) # \u5bf9\u8c61.\u65b9\u6cd5() # \u5bf9\u8c61() line_5_1 ( 0 ) line_5_1 ( 1 ) line_5_1 ( 2 ) line_5_2 = Line5 ( 11 , 22 ) line_5_2 ( 0 ) line_5_2 ( 1 ) line_5_2 ( 2 ) # \u7f3a\u70b9\uff1a\u4e3a\u4e86\u8ba1\u7b97\u591a\u6761\u7ebf\u4e0a\u7684y\u503c\uff0c\u6240\u4ee5\u9700\u8981\u4fdd\u5b58\u591a\u4e2ak, b\u7684\u503c\uff0c\u56e0\u6b64\u7528\u4e86\u5f88\u591a\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\uff0c \u6d6a\u8d39\u8d44\u6e90 print ( \"-\" * 50 ) # \u7b2c6\u79cd\uff1a\u95ed\u5305 def line_6 ( k , b ): def create_y ( x ): print ( k * x + b ) return create_y line_6_1 = line_6 ( 1 , 2 ) line_6_1 ( 0 ) line_6_1 ( 1 ) line_6_1 ( 2 ) line_6_2 = line_6 ( 11 , 22 ) line_6_2 ( 0 ) line_6_2 ( 1 ) line_6_2 ( 2 ) # \u601d\u8003\uff1a\u51fd\u6570\u3001\u533f\u540d\u51fd\u6570\u3001\u95ed\u5305\u3001\u5bf9\u8c61 \u5f53\u505a\u5b9e\u53c2\u65f6 \u6709\u4ec0\u4e48\u533a\u522b\uff1f # 1. \u533f\u540d\u51fd\u6570\u80fd\u591f\u5b8c\u6210\u57fa\u672c\u7684\u7b80\u5355\u529f\u80fd\uff0c\uff0c\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u5f15\u7528 \u53ea\u6709\u529f\u80fd # 2. \u666e\u901a\u51fd\u6570\u80fd\u591f\u5b8c\u6210\u8f83\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\uff0c\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u5f15\u7528 \u53ea\u6709\u529f\u80fd # 3. \u95ed\u5305\u80fd\u591f\u5c06\u8f83\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\uff0c\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u95ed\u5305\u4e2d\u7684\u51fd\u6570\u4ee5\u53ca\u6570\u636e\uff0c\u56e0\u6b64\u4f20\u9012\u662f\u529f\u80fd+\u6570\u636e # 4. \u5bf9\u8c61\u80fd\u591f\u5b8c\u6210\u6700\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\uff0c\uff0c\u4f20\u9012\u662f\u5f88\u591a\u6570\u636e+\u5f88\u591a\u529f\u80fd\uff0c\u56e0\u6b64\u4f20\u9012\u662f\u529f\u80fd+\u6570\u636e","title":"python2\u7684\u65b9\u6cd5"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#_2","text":"x = 300 def test1 (): x = 200 def test2 (): nonlocal x print ( \"----1----x= %d \" % x ) x = 100 #\u4f7f\u7528nolocal\u5bf9\u95ed\u5305\u4e2d\u7684\u53d8\u91cf\u8fdb\u884c\u7c7b\u4f3cglobal\u7684\u58f0\u660e print ( \"----2----x= %d \" % x ) return test2 t1 = test1 () t1 () \u6267\u884c\u7ed3\u679c ---- 1 ---- x = 200 ---- 2 ---- x = 100","title":"\u4fee\u6539\u95ed\u5305\u4e2d\u7684\u6570\u636e"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#_3","text":"\u88c5\u9970\u5668\u662f\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u7ecf\u5e38\u4f1a\u7528\u5230\u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u7528\u597d\u4e86\u88c5\u9970\u5668\uff0c\u5f00\u53d1\u6548\u7387\u5982\u864e\u6dfb\u7ffc\uff0c\u6240\u4ee5\u8fd9\u4e5f\u662fPython\u9762\u8bd5\u4e2d\u5fc5\u95ee\u7684\u95ee\u9898\uff0c\u4f46\u5bf9\u4e8e\u597d\u591a\u521d\u6b21\u63a5\u89e6\u8fd9\u4e2a\u77e5\u8bc6\u7684\u4eba\u6765\u8bb2\uff0c\u8fd9\u4e2a\u529f\u80fd\u6709\u70b9\u7ed5\uff0c\u81ea\u5b66\u65f6\u76f4\u63a5\u7ed5\u8fc7\u53bb\u4e86\uff0c\u7136\u540e\u9762\u8bd5\u95ee\u5230\u4e86\u5c31\u6302\u4e86\uff0c\u56e0\u4e3a\u88c5\u9970\u5668\u662f\u7a0b\u5e8f\u5f00\u53d1\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u8fd9\u4e2a\u90fd\u4e0d\u4f1a\uff0c\u522b\u8ddf\u4eba\u5bb6\u8bf4\u4f60\u4f1aPython, \u770b\u4e86\u4e0b\u9762\u7684\u6587\u7ae0\uff0c\u4fdd\u8bc1\u4f60\u5b66\u4f1a\u88c5\u9970\u5668\u3002","title":"\u88c5\u9970\u5668"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#1_1","text":"#### \u7b2c\u4e00\u6ce2 #### def foo (): print ( 'foo' ) foo # \u8868\u793a\u662f\u51fd\u6570 foo () # \u8868\u793a\u6267\u884cfoo\u51fd\u6570 #### \u7b2c\u4e8c\u6ce2 #### def foo (): print ( 'foo' ) foo = lambda x : x + 1 foo () # \u6267\u884clambda\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u518d\u662f\u539f\u6765\u7684foo\u51fd\u6570\uff0c\u56e0\u4e3afoo\u8fd9\u4e2a\u540d\u5b57\u88ab\u91cd\u65b0\u6307\u5411\u4e86\u53e6\u5916\u4e00\u4e2a\u533f\u540d\u51fd\u6570 \u51fd\u6570\u540d\u4ec5\u4ec5\u662f\u4e2a\u53d8\u91cf\uff0c\u53ea\u4e0d\u8fc7\u6307\u5411\u4e86\u5b9a\u4e49\u7684\u51fd\u6570\u800c\u5df2\uff0c\u6240\u4ee5\u624d\u80fd\u901a\u8fc7 \u51fd\u6570\u540d()\u8c03\u7528\uff0c\u5982\u679c \u51fd\u6570\u540d=xxx\u88ab\u4fee\u6539\u4e86\uff0c\u90a3\u4e48\u5f53\u5728\u6267\u884c \u51fd\u6570\u540d()\u65f6\uff0c\u8c03\u7528\u7684\u5c31\u4e0d\u77e5\u4e4b\u524d\u7684\u90a3\u4e2a\u51fd\u6570\u4e86","title":"1\u3001\u5148\u660e\u767d\u8fd9\u6bb5\u4ee3\u7801"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#2_1","text":"\u521d\u521b\u516c\u53f8\u6709N\u4e2a\u4e1a\u52a1\u90e8\u95e8\uff0c\u57fa\u7840\u5e73\u53f0\u90e8\u95e8\u8d1f\u8d23\u63d0\u4f9b\u5e95\u5c42\u7684\u529f\u80fd\uff0c\u5982\uff1a\u6570\u636e\u5e93\u64cd\u4f5c\u3001redis\u8c03\u7528\u3001\u76d1\u63a7API\u7b49\u529f\u80fd\u3002\u4e1a\u52a1\u90e8\u95e8\u4f7f\u7528\u57fa\u7840\u529f\u80fd\u65f6\uff0c\u53ea\u9700\u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd\u5373\u53ef\u3002\u5982\u4e0b\uff1a ############### \u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd\u5982\u4e0b ############### def f1 (): print ( 'f1' ) def f2 (): print ( 'f2' ) def f3 (): print ( 'f3' ) def f4 (): print ( 'f4' ) ############### \u4e1a\u52a1\u90e8\u95e8A \u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd ############### f1 () f2 () f3 () f4 () ############### \u4e1a\u52a1\u90e8\u95e8B \u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd ############### f1 () f2 () f3 () f4 () \u76ee\u524d\u516c\u53f8\u6709\u6761\u4e0d\u7d0a\u7684\u8fdb\u884c\u7740\uff0c\u4f46\u662f\uff0c\u4ee5\u524d\u57fa\u7840\u5e73\u53f0\u7684\u5f00\u53d1\u4eba\u5458\u5728\u5199\u4ee3\u7801\u65f6\u5019\u6ca1\u6709\u5173\u6ce8\u9a8c\u8bc1\u76f8\u5173\u7684\u95ee\u9898\uff0c\u5373\uff1a\u57fa\u7840\u5e73\u53f0\u7684\u63d0\u4f9b\u7684\u529f\u80fd\u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u4f7f\u7528\u3002\u73b0\u5728\u9700\u8981\u5bf9\u57fa\u7840\u5e73\u53f0\u7684\u6240\u6709\u529f\u80fd\u8fdb\u884c\u91cd\u6784\uff0c\u4e3a\u5e73\u53f0\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u6dfb\u52a0\u9a8c\u8bc1\u673a\u5236\uff0c\u5373\uff1a\u6267\u884c\u529f\u80fd\u524d\uff0c\u5148\u8fdb\u884c\u9a8c\u8bc1\u3002","title":"2\u3001\u9700\u6c42\u6765\u4e86"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#low-b","text":"\u8ddf\u6bcf\u4e2a\u4e1a\u52a1\u90e8\u95e8\u4ea4\u6d89\uff0c\u6bcf\u4e2a\u4e1a\u52a1\u90e8\u95e8\u81ea\u5df1\u5199\u4ee3\u7801\uff0c\u8c03\u7528\u57fa\u7840\u5e73\u53f0\u7684\u529f\u80fd\u4e4b\u524d\u5148\u9a8c\u8bc1\u3002\u8bf6\uff0c\u8fd9\u6837\u4e00\u6765\u57fa\u7840\u5e73\u53f0\u5c31\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4fee\u6539\u4e86\u3002\u592a\u68d2\u4e86\uff0c\u6709\u5145\u8db3\u7684\u65f6\u95f4\u6ce1\u59b9\u5b50... \u5f53\u5929Low B \u88ab\u5f00\u9664\u4e86\u2026","title":"\u8001\u5927\u628a\u5de5\u4f5c\u4ea4\u7ed9 Low B\uff0c\u4ed6\u662f\u8fd9\u4e48\u505a\u7684\uff1a"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#low-bb","text":"############### \u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd\u5982\u4e0b ############### def f1 (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 print ( 'f1' ) def f2 (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 print ( 'f2' ) def f3 (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 print ( 'f3' ) def f4 (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 print ( 'f4' ) ############### \u4e1a\u52a1\u90e8\u95e8\u4e0d\u53d8 ############### ### \u4e1a\u52a1\u90e8\u95e8A \u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd### f1 () f2 () f3 () f4 () ### \u4e1a\u52a1\u90e8\u95e8B \u8c03\u7528\u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd ### f1 () f2 () f3 () f4 () \u8fc7\u4e86\u4e00\u5468 Low BB \u88ab\u5f00\u9664\u4e86\u2026","title":"\u8001\u5927\u628a\u5de5\u4f5c\u4ea4\u7ed9 Low BB\uff0c\u4ed6\u662f\u8fd9\u4e48\u505a\u7684\uff1a"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#low-bbb","text":"\u53ea\u5bf9\u57fa\u7840\u5e73\u53f0\u7684\u4ee3\u7801\u8fdb\u884c\u91cd\u6784\uff0c\u5176\u4ed6\u4e1a\u52a1\u90e8\u95e8\u65e0\u9700\u505a\u4efb\u4f55\u4fee\u6539 ############### \u57fa\u7840\u5e73\u53f0\u63d0\u4f9b\u7684\u529f\u80fd\u5982\u4e0b ############### def check_login (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 pass def f1 (): check_login () print ( 'f1' ) def f2 (): check_login () print ( 'f2' ) def f3 (): check_login () print ( 'f3' ) def f4 (): check_login () print ( 'f4' ) \u8001\u5927\u770b\u4e86\u4e0bLow BBB \u7684\u5b9e\u73b0\uff0c\u5634\u89d2\u6f0f\u51fa\u4e86\u4e00\u4e1d\u7684\u6b23\u6170\u7684\u7b11\uff0c\u8bed\u91cd\u5fc3\u957f\u7684\u8ddfLow BBB\u804a\u4e86\u4e2a\u5929\uff1a","title":"\u8001\u5927\u628a\u5de5\u4f5c\u4ea4\u7ed9 Low BBB\uff0c\u4ed6\u662f\u8fd9\u4e48\u505a\u7684\uff1a"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#_4","text":"\u5199\u4ee3\u7801\u8981\u9075\u5faa \u5f00\u653e\u5c01\u95ed \u539f\u5219\uff0c\u867d\u7136\u5728\u8fd9\u4e2a\u539f\u5219\u662f\u7528\u7684\u9762\u5411\u5bf9\u8c61\u5f00\u53d1\uff0c\u4f46\u662f\u4e5f\u9002\u7528\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5b83\u89c4\u5b9a\u5df2\u7ecf\u5b9e\u73b0\u7684\u529f\u80fd\u4ee3\u7801\u4e0d\u5141\u8bb8\u88ab\u4fee\u6539\uff0c\u4f46\u53ef\u4ee5\u88ab\u6269\u5c55\uff0c\u5373\uff1a \u5c01\u95ed\uff1a\u5df2\u5b9e\u73b0\u7684\u529f\u80fd\u4ee3\u7801\u5757 \u5f00\u653e\uff1a\u5bf9\u6269\u5c55\u5f00\u53d1 \u5982\u679c\u5c06\u5f00\u653e\u5c01\u95ed\u539f\u5219\u5e94\u7528\u5728\u4e0a\u8ff0\u9700\u6c42\u4e2d\uff0c\u90a3\u4e48\u5c31\u4e0d\u5141\u8bb8\u5728\u51fd\u6570 f1 \u3001f2\u3001f3\u3001f4\u7684\u5185\u90e8\u8fdb\u884c\u4fee\u6539\u4ee3\u7801\uff0c\u8001\u677f\u5c31\u7ed9\u4e86Low BBB\u4e00\u4e2a\u5b9e\u73b0\u65b9\u6848\uff1a def w1 ( func ): def inner (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 func () return inner @w1 def f1 (): print ( 'f1' ) @w1 def f2 (): print ( 'f2' ) @w1 def f3 (): print ( 'f3' ) @w1 def f4 (): print ( 'f4' ) \u5bf9\u4e8e\u4e0a\u8ff0\u4ee3\u7801\uff0c\u4e5f\u662f\u4ec5\u4ec5\u5bf9\u57fa\u7840\u5e73\u53f0\u7684\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u5176\u4ed6\u4eba\u8c03\u7528\u51fd\u6570 f1 f2 f3 f4 \u4e4b\u524d\u90fd\u8fdb\u884c\u3010\u9a8c\u8bc1\u3011\u64cd\u4f5c\uff0c\u5e76\u4e14\u5176\u4ed6\u4e1a\u52a1\u90e8\u95e8\u65e0\u9700\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 Low BBB\u5fc3\u60ca\u80c6\u6218\u7684\u95ee\u4e86\u4e0b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u5185\u90e8\u6267\u884c\u539f\u7406\u662f\u4ec0\u4e48\u5462\uff1f \u8001\u5927\u6b63\u8981\u751f\u6c14\uff0c\u7a81\u7136Low BBB\u7684\u624b\u673a\u6389\u5230\u5730\u4e0a\uff0c\u6070\u5de7\u5c4f\u4fdd\u5c31\u662fLow BBB\u7684\u5973\u53cb\u7167\u7247\uff0c\u8001\u5927\u4e00\u770b\u4e00\u7d27\u4e00\u6296\uff0c\u559c\u7b11\u989c\u5f00\uff0c\u51b3\u5b9a\u548cLow BBB\u4ea4\u4e2a\u597d\u670b\u53cb\u3002 \u8be6\u7ec6\u7684\u5f00\u59cb\u8bb2\u89e3\u4e86\uff1a \u5355\u72ec\u4ee5f1\u4e3a\u4f8b\uff1a def w1 ( func ): def inner (): # \u9a8c\u8bc11 # \u9a8c\u8bc12 # \u9a8c\u8bc13 func () return inner @w1 def f1 (): print ( 'f1' ) python\u89e3\u91ca\u5668\u5c31\u4f1a\u4ece\u4e0a\u5230\u4e0b\u89e3\u91ca\u4ee3\u7801\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a def w1(func): ==>\u5c06w1\u51fd\u6570\u52a0\u8f7d\u5230\u5185\u5b58 @w1 \u6ca1\u9519\uff0c \u4ece\u8868\u9762\u4e0a\u770b\u89e3\u91ca\u5668\u4ec5\u4ec5\u4f1a\u89e3\u91ca\u8fd9\u4e24\u53e5\u4ee3\u7801\uff0c\u56e0\u4e3a\u51fd\u6570\u5728 \u6ca1\u6709\u88ab\u8c03\u7528\u4e4b\u524d\u5176\u5185\u90e8\u4ee3\u7801\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u4ece\u8868\u9762\u4e0a\u770b\u89e3\u91ca\u5668\u7740\u5b9e\u4f1a\u6267\u884c\u8fd9\u4e24\u53e5\uff0c\u4f46\u662f @w1 \u8fd9\u4e00\u53e5\u4ee3\u7801\u91cc\u5374\u6709\u5927\u6587\u7ae0\uff0c @\u51fd\u6570\u540d \u662fpython\u7684\u4e00\u79cd\u8bed\u6cd5\u7cd6\u3002","title":"\u8001\u5927\u8bf4\uff1a"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#w1","text":"","title":"\u4e0a\u4f8b@w1\u5185\u90e8\u4f1a\u6267\u884c\u4e00\u4e0b\u64cd\u4f5c\uff1a"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#w1_1","text":"\u6267\u884cw1\u51fd\u6570 \uff0c\u5e76\u5c06 @w1 \u4e0b\u9762\u7684\u51fd\u6570\u4f5c\u4e3aw1\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5373\uff1a @w1 \u7b49\u4ef7\u4e8e w1(f1) \u6240\u4ee5\uff0c\u5185\u90e8\u5c31\u4f1a\u53bb\u6267\u884c\uff1a def inner (): #\u9a8c\u8bc1 1 #\u9a8c\u8bc1 2 #\u9a8c\u8bc1 3 f1 () # func\u662f\u53c2\u6570\uff0c\u6b64\u65f6 func \u7b49\u4e8e f1 return inner # \u8fd4\u56de\u7684 inner\uff0cinner\u4ee3\u8868\u7684\u662f\u51fd\u6570\uff0c\u975e\u6267\u884c\u51fd\u6570 ,\u5176\u5b9e\u5c31\u662f\u5c06\u539f\u6765\u7684 f1 \u51fd\u6570\u585e\u8fdb\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d","title":"\u6267\u884cw1\u51fd\u6570"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#w1_2","text":"\u5c06\u6267\u884c\u5b8c\u7684w1\u51fd\u6570\u8fd4\u56de\u503c \u8d4b\u503c \u7ed9@w1\u4e0b\u9762\u7684\u51fd\u6570\u7684\u51fd\u6570\u540df1 \u5373\u5c06w1\u7684\u8fd4\u56de\u503c\u518d\u91cd\u65b0\u8d4b\u503c\u7ed9 f1\uff0c\u5373\uff1a \u65b0 f1 = def inner (): #\u9a8c\u8bc1 1 #\u9a8c\u8bc1 2 #\u9a8c\u8bc1 3 \u539f\u6765 f1 () return inner \u6240\u4ee5\uff0c\u4ee5\u540e\u4e1a\u52a1\u90e8\u95e8\u60f3\u8981\u6267\u884c f1 \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u6267\u884c \u65b0f1 \u51fd\u6570\uff0c\u5728\u65b0f1 \u51fd\u6570\u5185\u90e8\u5148\u6267\u884c\u9a8c\u8bc1\uff0c\u518d\u6267\u884c\u539f\u6765\u7684f1\u51fd\u6570\uff0c\u7136\u540e\u5c06\u539f\u6765f1 \u51fd\u6570\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u7ed9\u4e86\u4e1a\u52a1\u8c03\u7528\u8005\u3002 \u5982\u6b64\u4e00\u6765\uff0c \u5373\u6267\u884c\u4e86\u9a8c\u8bc1\u7684\u529f\u80fd\uff0c\u53c8\u6267\u884c\u4e86\u539f\u6765f1\u51fd\u6570\u7684\u5185\u5bb9\uff0c\u5e76\u5c06\u539ff1\u51fd\u6570\u8fd4\u56de\u503c \u8fd4\u56de\u7ed9\u4e1a\u52a1\u8c03\u7528\u7740 Low BBB \u4f60\u660e\u767d\u4e86\u5417\uff1f\u8981\u662f\u6ca1\u660e\u767d\u7684\u8bdd\uff0c\u6211\u665a\u4e0a\u53bb\u4f60\u5bb6\u5e2e\u4f60\u89e3\u51b3\u5427\uff01\uff01\uff01","title":"w1\u7684\u8fd4\u56de\u503c"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#_5","text":"def set_func ( func ): def call_func (): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func () return call_func @set_func def test1 (): print ( \"-----test1----\" ) test1 () \u6267\u884c\u7ed3\u679c: --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ----","title":"\u88c5\u9970\u5668\u7684\u4e00\u4e2a\u6f14\u793a"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#04-py","text":"def set_func ( func ): def call_func (): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func () return call_func @set_func # \u7b49\u4ef7\u4e8etest1 = set_func(test1) def test1 (): print ( \"-----test1----\" ) #\u8fd9\u4e24\u884c\u5c31\u662f\u5b9e\u73b0\u7684\u8fc7\u7a0b # ret = set_func(test1) # ret() # test1 = set_func(test1) test1 () test1 ()","title":"04-\u88c5\u9970\u5668\u7684\u5b9e\u73b0\u8fc7\u7a0b.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#05-py","text":"import time def set_func ( func ): #\u95ed\u5305 def call_func (): start_time = time . time () #\u5f00\u59cb\u7684\u6267\u884c\u65f6\u95f4 func () stop_time = time . time () #\u7ec8\u6b62\u7684\u6267\u884c\u65f6\u95f4 print ( \"alltimeis %f \" % ( stop_time - start_time )) return call_func @set_func # \u7b49\u4ef7\u4e8etest1 = set_func(test1) def test1 (): print ( \"-----test1----\" ) for i in range ( 10000 ): pass # ret = set_func(test1) # ret() # test1 = set_func(test1) test1 () test1 () \u6267\u884c\u7ed3\u679c ----- test1 ---- alltimeis 0.000999 ----- test1 ---- alltimeis 0.000000","title":"05-\u88c5\u9970\u5668\u7684\u4f5c\u7528-\u6765\u7edf\u8ba1\u4e00\u4e2a\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u95f4.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#06-py","text":"def set_func ( func ): def call_func (): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func () return call_func @set_func # \u7b49\u4ef7\u4e8etest1 = set_func(test1) def test1 (): print ( \"-----test1----\" ) # ret = set_func(test1) # ret() # test1 = set_func(test1) test1 () \u6267\u884c --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ----","title":"06-\u5bf9\u6ca1\u6709\u53c2\u6570\u3001\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#07-py","text":"def set_func ( func ): def call_func ( a ): #\u8fd9\u91cc\u4e5f\u9700\u8981\u52a0\u53c2\u6570,\u56e0\u4e3a\u8981\u628a\u53c2\u6570\u5728\u4f20\u9012\u7ed9func(a) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func ( a ) #\u8fd9\u91cc\u9700\u8981\u52a0\u53c2\u6570 return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num ): print ( \"-----test1---- %d \" % num ) test1 ( 100 ) test1 ( 200 ) #\u8ddf\u4f7f\u7528\u88c5\u9970\u5668\u662f\u4e00\u6837\u7684 #xx = set_func(test1) #xx(100) \u6267\u884c --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 200","title":"07-\u5bf9\u6709\u53c2\u6570\u3001\u65e0\u8fd4\u56de\u503c\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#3_1","text":"# \u5b9a\u4e49\u51fd\u6570\uff1a\u5b8c\u6210\u5305\u88f9\u6570\u636e def makeBold ( fn ): def wrapped (): return \"<b>\" + fn () + \"</b>\" return wrapped # \u5b9a\u4e49\u51fd\u6570\uff1a\u5b8c\u6210\u5305\u88f9\u6570\u636e def makeItalic ( fn ): def wrapped (): return \"<i>\" + fn () + \"</i>\" return wrapped @makeBold def test1 (): return \"hello world-1\" @makeItalic def test2 (): return \"hello world-2\" @makeBold @makeItalic def test3 (): return \"hello world-3\" print ( test1 ()) print ( test2 ()) print ( test3 ()) \u8fd0\u884c\u7ed3\u679c: < b > hello world-1 </ b > < i > hello world-2 </ i > < b >< i > hello world-3 </ i ></ b >","title":"3. \u518d\u8bae\u88c5\u9970\u5668"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#4-decorator","text":"\u5f15\u5165\u65e5\u5fd7 \u51fd\u6570\u6267\u884c\u65f6\u95f4\u7edf\u8ba1 \u6267\u884c\u51fd\u6570\u524d\u9884\u5907\u5904\u7406 \u6267\u884c\u51fd\u6570\u540e\u6e05\u7406\u529f\u80fd \u6743\u9650\u6821\u9a8c\u7b49\u573a\u666f \u7f13\u5b58","title":"4. \u88c5\u9970\u5668(decorator)\u529f\u80fd"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#5","text":"","title":"5. \u88c5\u9970\u5668\u793a\u4f8b"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#1_2","text":"from time import ctime , sleep def timefun ( func ): def wrapped_func (): print ( \" %s called at %s \" % ( func . __name__ , ctime ())) func () return wrapped_func @timefun def foo (): print ( \"I am foo\" ) foo () sleep ( 2 ) foo () \u4e0a\u9762\u4ee3\u7801\u7406\u89e3\u88c5\u9970\u5668\u6267\u884c\u884c\u4e3a\u53ef\u7406\u89e3\u6210 foo = timefun ( foo ) # foo\u5148\u4f5c\u4e3a\u53c2\u6570\u8d4b\u503c\u7ed9func\u540e,foo\u63a5\u6536\u6307\u5411timefun\u8fd4\u56de\u7684wrapped_func foo () # \u8c03\u7528foo(),\u5373\u7b49\u4ef7\u8c03\u7528wrapped_func() # \u5185\u90e8\u51fd\u6570wrapped_func\u88ab\u5f15\u7528\uff0c\u6240\u4ee5\u5916\u90e8\u51fd\u6570\u7684func\u53d8\u91cf(\u81ea\u7531\u53d8\u91cf)\u5e76\u6ca1\u6709\u91ca\u653e # func\u91cc\u4fdd\u5b58\u7684\u662f\u539ffoo\u51fd\u6570\u5bf9\u8c61","title":"\u4f8b1:\u65e0\u53c2\u6570\u7684\u51fd\u6570"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#2_2","text":"from time import ctime , sleep def timefun ( func ): def wrapped_func ( a , b ): print ( \" %s called at %s \" % ( func . __name__ , ctime ())) print ( a , b ) func ( a , b ) return wrapped_func @timefun def foo ( a , b ): print ( a + b ) foo ( 3 , 5 ) sleep ( 2 ) foo ( 2 , 4 )","title":"\u4f8b2:\u88ab\u88c5\u9970\u7684\u51fd\u6570\u6709\u53c2\u6570"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#08-py","text":"def set_func ( func ): def call_func ( a ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func ( a ) return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num ): print ( \"-----test1---- %d \" % num ) @set_func # \u76f8\u5f53\u4e8e test2 = set_func(test2) def test2 ( num ): print ( \"-----test2---- %d \" % num ) test1 ( 100 ) test2 ( 200 ) \u6267\u884c --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test2 ---- 200","title":"08-\u901a\u4e00\u4e2a\u88c5\u9970\u5668\u5bf9\u591a\u4e2a\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#09-py","text":"def set_func ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970\" ) def call_func ( a ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) func ( a ) return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num ): print ( \"-----test1---- %d \" % num ) @set_func # \u76f8\u5f53\u4e8e test2 = set_func(test2) def test2 ( num ): print ( \"-----test2---- %d \" % num ) # \u88c5\u9970\u5668\u5728\u8c03\u7528\u51fd\u6570\u4e4b\u524d\uff0c\u5df2\u7ecf\u88abpython\u89e3\u91ca\u5668\u6267\u884c\u4e86\uff0c\u6240\u4ee5\u8981\u7262\u8bb0 \u5f53\u8c03\u7528\u51fd\u6570\u4e4b\u524d \u5176\u5b9e\u5df2\u7ecf\u88c5\u9970\u597d\u4e86\uff0c\u5c3d\u7ba1\u8c03\u7528\u5c31\u53ef\u4ee5\u4e86 # test1(100) # test2(200) \u6267\u884c --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970","title":"09-\u88c5\u9970\u5668\u5728\u6ca1\u6709\u8c03\u7528\u51fd\u6570\u4e4b\u524d\u5df2\u7ecf\u88c5\u9970\u4e86.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#3_2","text":"from time import ctime , sleep def timefun ( func ): def wrapped_func ( * args , ** kwargs ): print ( \" %s called at %s \" % ( func . __name__ , ctime ())) func ( * args , ** kwargs ) return wrapped_func @timefun def foo ( a , b , c ): print ( a + b + c ) foo ( 3 , 5 , 7 ) sleep ( 2 ) foo ( 2 , 4 , 9 )","title":"\u4f8b3:\u88ab\u88c5\u9970\u7684\u51fd\u6570\u6709\u4e0d\u5b9a\u957f\u53c2\u6570"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#10-py","text":"def set_func ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970\" ) def call_func ( * args , ** kwargs ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) # func(args, kwargs) # \u4e0d\u884c\uff0c\u76f8\u5f53\u4e8e\u4f20\u9012\u4e862\u4e2a\u53c2\u6570 \uff1a1\u4e2a\u5143\u7ec4\uff0c1\u4e2a\u5b57\u5178 func ( * args , ** kwargs ) # \u62c6\u5305(\u591a\u4f59\u7684\u53c2\u6570\u7ed9\u5143\u7956,\u591a\u4f59\u7684\u5173\u952e\u5b57\u7ed9\u5b57\u5178) return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num , num1 , * args , ** kwargs ): # *args\u5143\u7956,**kwargs \u5b57\u5178 print ( \"-----test1---- %d \" % num , num1 ) print ( \"-----test1----\" , args ) print ( \"-----test1----\" , kwargs ) #test1(100) test1 ( 100 , 200 ) test1 ( 100 , 200 , 300 , mm = 100 ) \u6267\u884c --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 200 ----- test1 ---- () ----- test1 ---- {} --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 200 ----- test1 ---- ( 300 ,) ----- test1 ---- { 'mm' : 100 }","title":"10-\u5bf9\u4e0d\u5b9a\u957f\u53c2\u6570\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#4returnfuncreturn","text":"","title":"\u4f8b4:\u88c5\u9970\u5668\u4e2d\u7684return(\u8981\u5c06func\u7684\u8fd4\u56de\u503c\u7ee7\u7eed\u8fd4\u56de\u52a0\u4e00\u4e2areturn\u5c31\u53ef\u4ee5\u4e86)"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#11-py","text":"\u901a\u7528\u7684\u88c5\u9970\u5668 def set_func ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970\" ) def call_func ( * args , ** kwargs ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc12----\" ) # func(args, kwargs) # \u4e0d\u884c\uff0c\u76f8\u5f53\u4e8e\u4f20\u9012\u4e862\u4e2a\u53c2\u6570 \uff1a1\u4e2a\u5143\u7ec4\uff0c1\u4e2a\u5b57\u5178 return func ( * args , ** kwargs ) # \u62c6\u5305 return call_func @set_func # \u76f8\u5f53\u4e8e test1 = set_func(test1) def test1 ( num , * args , ** kwargs ): print ( \"-----test1---- %d \" % num ) print ( \"-----test1----\" , args ) print ( \"-----test1----\" , kwargs ) return \"ok\" @set_func def test2 (): pass ret = test1 ( 100 ) print ( ret ) ret = test2 () #\u6ca1\u6709\u8fd4\u56de\u503c\u90a3\u4e48\u5c31\u8fd4\u56denone,return\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd print ( ret ) \u6267\u884c --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- ----- test1 ---- 100 ----- test1 ---- () ----- test1 ---- {} ok --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 2 ---- None \u8bfe\u4ef6\u7684\u4ee3\u7801 from time import ctime , sleep def timefun ( func ): def wrapped_func (): print ( \" %s called at %s \" % ( func . __name__ , ctime ())) func () return wrapped_func @timefun def foo (): print ( \"I am foo\" ) @timefun def getInfo (): return '----hahah---' foo () sleep ( 2 ) foo () print ( getInfo ()) \u6267\u884c\u7ed3\u679c: foo called at Fri Nov 4 21 : 55 : 35 2016 I am foo foo called at Fri Nov 4 21 : 55 : 37 2016 I am foo getInfo called at Fri Nov 4 21 : 55 : 37 2016 None \u5982\u679c\u4fee\u6539\u88c5\u9970\u5668\u4e3a return func() \uff0c\u5219\u8fd0\u884c\u7ed3\u679c\uff1a foo called at Fri Nov 4 21 : 55 : 57 2016 I am foo foo called at Fri Nov 4 21 : 55 : 59 2016 I am foo getInfo called at Fri Nov 4 21 : 55 : 59 2016 ---- hahah ---","title":"11-\u5bf9\u5e26\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#_6","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\u4e3a\u4e86\u8ba9\u88c5\u9970\u5668\u66f4\u901a\u7528\uff0c\u53ef\u4ee5\u6709return","title":"\u603b\u7ed3\uff1a"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#12-py","text":"def add_qx ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970\u6743\u96501\u7684\u529f\u80fd---\" ) def call_func ( * args , ** kwargs ): print ( \"---\u8fd9\u662f\u6743\u9650\u9a8c\u8bc11----\" ) return func ( * args , ** kwargs ) return call_func def add_xx ( func ): print ( \"---\u5f00\u59cb\u8fdb\u884c\u88c5\u9970xxx\u7684\u529f\u80fd---\" ) def call_func ( * args , ** kwargs ): print ( \"---\u8fd9\u662fxxx\u7684\u529f\u80fd----\" ) return func ( * args , ** kwargs ) return call_func @add_qx #\u60f3\u88c5\u4f46\u662f\u4e0b\u9762\u4e0d\u662f\u51fd\u6570\u7b49\u4e0b\u9762\u7684\u88c5\u9970\u5668\u5b8c\u4e8b\u4e86\u5728\u88c5 @add_xx def test1 (): print ( \"------test1------\" ) test1 () #\u7ed3\u679c \u7c7b\u4f3c\u4e8e\u4f7f\u7528\u6808,\u9760\u8fd1\u51fd\u6570\u7684\u5148\u8fdb\u6808,(\u88c5\u9970)\u6267\u884c\u7684\u65f6\u5019\u5148\u8fdb\u7684\u540e\u51fa,\u6216\u8005\u662f\u6267\u884c\u7684\u65f6\u5019\u662f\u6309\u7167\u987a\u5e8f\u6267\u884c\u4ee3\u7801\u7684 --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970 xxx\u7684\u529f\u80fd --- --- \u5f00\u59cb\u8fdb\u884c\u88c5\u9970\u6743\u9650 1 \u7684\u529f\u80fd --- --- \u8fd9\u662f\u6743\u9650\u9a8c\u8bc1 1 ---- --- \u8fd9\u662f xxx\u7684\u529f\u80fd ---- ------ test1 ------","title":"12-\u591a\u4e2a\u88c5\u9970\u5668\u5bf9\u540c\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#13-py","text":"def set_func_1 ( func ): def call_func (): # \"<h1>haha</h1>\" return \"<h1>\" + func () + \"</h1>\" return call_func def set_func_2 ( func ): def call_func (): return \"<td>\" + func () + \"</td>\" return call_func @set_func_1 @set_func_2 def get_str (): return \"haha\" print ( get_str ()) \u6267\u884c < h1 >< td > haha </ td ></ h1 >","title":"13-\u5e94\u7528\uff1a\u591a\u4e2a\u88c5\u9970\u5668\u591a\u540c\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u88c5\u9970.py"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#5_1","text":"#decorator2.py from time import ctime , sleep def timefun_arg ( pre = \"hello\" ): def timefun ( func ): def wrapped_func (): print ( \" %s called at %s %s \" % ( func . __name__ , ctime (), pre )) return func () return wrapped_func return timefun # \u4e0b\u9762\u7684\u88c5\u9970\u8fc7\u7a0b # 1. \u8c03\u7528timefun_arg(\"itcast\") # 2. \u5c06\u6b65\u9aa41\u5f97\u5230\u7684\u8fd4\u56de\u503c\uff0c\u5373time_fun\u8fd4\u56de\uff0c \u7136\u540etime_fun(foo) # 3. \u5c06time_fun(foo)\u7684\u7ed3\u679c\u8fd4\u56de\uff0c\u5373wrapped_func # 4. \u8ba9foo = wrapped_fun\uff0c\u5373foo\u73b0\u5728\u6307\u5411wrapped_func @timefun_arg ( \"itcast\" ) def foo (): print ( \"I am foo\" ) @timefun_arg ( \"python\" ) def too (): print ( \"I am too\" ) foo () sleep ( 2 ) foo () too () sleep ( 2 ) too () \u53ef\u4ee5\u7406\u89e3\u4e3a foo () == timefun_arg ( \"itcast\" )( foo )()","title":"\u4f8b5:\u88c5\u9970\u5668\u5e26\u53c2\u6570,\u5728\u539f\u6709\u88c5\u9970\u5668\u7684\u57fa\u7840\u4e0a\uff0c\u8bbe\u7f6e\u5916\u90e8\u53d8\u91cf"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#6","text":"\u88c5\u9970\u5668\u51fd\u6570\u5176\u5b9e\u662f\u8fd9\u6837\u4e00\u4e2a\u63a5\u53e3\u7ea6\u675f\uff0c\u5b83\u5fc5\u987b\u63a5\u53d7\u4e00\u4e2acallable\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2acallable\u5bf9\u8c61\u3002\u5728Python\u4e2d\u4e00\u822ccallable\u5bf9\u8c61\u90fd\u662f\u51fd\u6570\uff0c\u4f46\u4e5f\u6709\u4f8b\u5916\u3002\u53ea\u8981\u67d0\u4e2a\u5bf9\u8c61\u91cd\u5199\u4e86 __call__() \u65b9\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u662fcallable\u7684\u3002 class Test (): def __call__ ( self ): print ( 'call me!' ) t = Test () t () # call me \u7c7b\u88c5\u9970\u5668demo class Test ( object ): def __init__ ( self , func ): print ( \"---\u521d\u59cb\u5316---\" ) print ( \"func name is %s \" % func . __name__ ) self . __func = func def __call__ ( self ): print ( \"---\u88c5\u9970\u5668\u4e2d\u7684\u529f\u80fd---\" ) self . __func () #\u8bf4\u660e\uff1a #1. \u5f53\u7528Test\u6765\u88c5\u4f5c\u88c5\u9970\u5668\u5bf9test\u51fd\u6570\u8fdb\u884c\u88c5\u9970\u7684\u65f6\u5019\uff0c\u9996\u5148\u4f1a\u521b\u5efaTest\u7684\u5b9e\u4f8b\u5bf9\u8c61 # \u5e76\u4e14\u4f1a\u628atest\u8fd9\u4e2a\u51fd\u6570\u540d\u5f53\u505a\u53c2\u6570\u4f20\u9012\u5230__init__\u65b9\u6cd5\u4e2d # \u5373\u5728__init__\u65b9\u6cd5\u4e2d\u7684\u5c5e\u6027__func\u6307\u5411\u4e86test\u6307\u5411\u7684\u51fd\u6570 # #2. test\u6307\u5411\u4e86\u7528Test\u521b\u5efa\u51fa\u6765\u7684\u5b9e\u4f8b\u5bf9\u8c61 # #3. \u5f53\u5728\u4f7f\u7528test()\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u5c31\u76f8\u5f53\u4e8e\u8ba9\u8fd9\u4e2a\u5bf9\u8c61()\uff0c\u56e0\u6b64\u4f1a\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684__call__\u65b9\u6cd5 # #4. \u4e3a\u4e86\u80fd\u591f\u5728__call__\u65b9\u6cd5\u4e2d\u8c03\u7528\u539f\u6765test\u6307\u5411\u7684\u51fd\u6570\u4f53\uff0c\u6240\u4ee5\u5728__init__\u65b9\u6cd5\u4e2d\u5c31\u9700\u8981\u4e00\u4e2a\u5b9e\u4f8b\u5c5e\u6027\u6765\u4fdd\u5b58\u8fd9\u4e2a\u51fd\u6570\u4f53\u7684\u5f15\u7528 # \u6240\u4ee5\u624d\u6709\u4e86self.__func = func\u8fd9\u53e5\u4ee3\u7801\uff0c\u4ece\u800c\u5728\u8c03\u7528__call__\u65b9\u6cd5\u4e2d\u80fd\u591f\u8c03\u7528\u5230test\u4e4b\u524d\u7684\u51fd\u6570\u4f53 @Test def test (): print ( \"----test---\" ) test () showpy () #\u5982\u679c\u628a\u8fd9\u53e5\u8bdd\u6ce8\u91ca\uff0c\u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\uff0c\u4f9d\u7136\u4f1a\u770b\u5230\"--\u521d\u59cb\u5316--\" \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a --- \u521d\u59cb\u5316 --- func name is test --- \u88c5\u9970\u5668\u4e2d\u7684\u529f\u80fd --- ---- test ---","title":"\u4f8b6\uff1a\u7c7b\u88c5\u9970\u5668\uff08\u6269\u5c55\uff0c\u975e\u91cd\u70b9\uff09"},{"location":"007 19. \u95ed\u5305\u3001\u88c5\u9970\u5668/#14-py","text":"# def set_func_1(func): # def call_func(): # # \"<h1>haha</h1>\" # return \"<h1>\" + func() + \"</h1>\" # return call_func class Test ( object ): def __init__ ( self , func ): self . func = func def __call__ ( self ): print ( \"\u8fd9\u91cc\u662f\u88c5\u9970\u5668\u6dfb\u52a0\u7684\u529f\u80fd.....\" ) return self . func () @Test # \u76f8\u5f53\u4e8eget_str = Test(get_str) def get_str (): return \"haha\" print ( get_str ()) \u6267\u884c \u8fd9\u91cc\u662f\u88c5\u9970\u5668\u6dfb\u52a0\u7684\u529f\u80fd ..... haha","title":"14-\u4f7f\u7528\u7c7b\u5f53\u505a\u88c5\u9970\u5668.py"},{"location":"008-12--python\u63d0\u9ad8-1/","text":"12.1. GIL \u00b6 GIL\uff08\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff09 \u00b6 GIL\u9762\u8bd5\u9898\u5982\u4e0b \u00b6 \u63cf\u8ff0Python GIL\u7684\u6982\u5ff5\uff0c \u4ee5\u53ca\u5b83\u5bf9python\u591a\u7ebf\u7a0b\u7684\u5f71\u54cd\uff1f\u7f16\u5199\u4e00\u4e2a\u591a\u7ebf\u7a0b\u6293\u53d6\u7f51\u9875\u7684\u7a0b\u5e8f\uff0c\u5e76\u9610\u660e\u591a\u7ebf\u7a0b\u6293\u53d6\u7a0b\u5e8f\u662f\u5426\u53ef\u6bd4\u5355\u7ebf\u7a0b\u6027\u80fd\u6709\u63d0\u5347\uff0c\u5e76\u89e3\u91ca\u539f\u56e0\u3002 Guido\u7684\u58f0\u660e\uff1a http://www.artima.com/forums/flat.jsp?forum=106&thread=214235 he language doesn't require the GIL -- it's only the CPython virtual machine that has historically been unable to shed it. \u53c2\u8003\u7b54\u6848: \u00b6 Python\u8bed\u8a00\u548cGIL\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb\u3002\u4ec5\u4ec5\u662f\u7531\u4e8e\u5386\u53f2\u539f\u56e0\u5728Cpython\u865a\u62df\u673a(\u89e3\u91ca\u5668)\uff0c\u96be\u4ee5\u79fb\u9664GIL\u3002 GIL\uff1a\u5168\u5c40\u89e3\u91ca\u5668\u9501\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u90fd\u9700\u8981\u5148\u83b7\u53d6GIL\uff0c\u4fdd\u8bc1\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\u4ee3\u7801\u3002 \u7ebf\u7a0b\u91ca\u653eGIL\u9501\u7684\u60c5\u51b5\uff1a \u5728IO\u64cd\u4f5c\u7b49\u53ef\u80fd\u4f1a\u5f15\u8d77\u963b\u585e\u7684system call\u4e4b\u524d,\u53ef\u4ee5\u6682\u65f6\u91ca\u653eGIL,\u4f46\u5728\u6267\u884c\u5b8c\u6bd5\u540e,\u5fc5\u987b\u91cd\u65b0\u83b7\u53d6GIL Python 3.x\u4f7f\u7528\u8ba1\u65f6\u5668\uff08\u6267\u884c\u65f6\u95f4\u8fbe\u5230\u9608\u503c\u540e\uff0c\u5f53\u524d\u7ebf\u7a0b\u91ca\u653eGIL\uff09\u6216Python 2.x\uff0ctickets\u8ba1\u6570\u8fbe\u5230100 Python\u4f7f\u7528\u591a\u8fdb\u7a0b\u662f\u53ef\u4ee5\u5229\u7528\u591a\u6838\u7684CPU\u8d44\u6e90\u7684\u3002 \u591a\u7ebf\u7a0b\u722c\u53d6\u6bd4\u5355\u7ebf\u7a0b\u6027\u80fd\u6709\u63d0\u5347\uff0c\u56e0\u4e3a\u9047\u5230IO\u963b\u585e\u4f1a\u81ea\u52a8\u91ca\u653eGIL\u9501 12.2. \u6df1\u62f7\u8d1d\u3001\u6d45\u62f7\u8d1d \u00b6 \u6df1\u62f7\u8d1d\u3001\u6d45\u62f7\u8d1d \u00b6 1. \u6d45\u62f7\u8d1d \u00b6 \u6d45\u62f7\u8d1d\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u7684\u9876\u5c42\u62f7\u8d1d \u901a\u4fd7\u7684\u7406\u89e3\u662f\uff1a\u62f7\u8d1d\u4e86\u5f15\u7528\uff0c\u5e76\u6ca1\u6709\u62f7\u8d1d\u5185\u5bb9 2. \u6df1\u62f7\u8d1d \u00b6 \u6df1\u62f7\u8d1d\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u6240\u6709\u5c42\u6b21\u7684\u62f7\u8d1d(\u9012\u5f52) \u8fdb\u4e00\u6b65\u7406\u89e3\u6df1\u62f7\u8d1d \u00b6 3. \u62f7\u8d1d\u7684\u5176\u4ed6\u65b9\u5f0f \u00b6 \u5206\u7247\u8868\u8fbe\u5f0f\u53ef\u4ee5\u8d4b\u503c\u4e00\u4e2a\u5e8f\u5217 \u5b57\u5178\u7684copy\u65b9\u6cd5\u53ef\u4ee5\u62f7\u8d1d\u4e00\u4e2a\u5b57\u5178 4. \u6ce8\u610f\u70b9 \u00b6 \u6d45\u62f7\u8d1d\u5bf9\u4e0d\u53ef\u53d8\u7c7b\u578b\u548c\u53ef\u53d8\u7c7b\u578b\u7684copy\u4e0d\u540c \u00b6 copy.copy\u5bf9\u4e8e\u53ef\u53d8\u7c7b\u578b\uff0c\u4f1a\u8fdb\u884c\u6d45\u62f7\u8d1d copy.copy\u5bf9\u4e8e\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4e0d\u4f1a\u62f7\u8d1d\uff0c\u4ec5\u4ec5\u662f\u6307\u5411 In [88]: a = [11,22,33] In [89]: b = copy.copy(a) In [90]: id(a) Out[90]: 59275144 In [91]: id(b) Out[91]: 59525600 In [92]: a.append(44) In [93]: a Out[93]: [11, 22, 33, 44] In [94]: b Out[94]: [11, 22, 33] In [95]: a = (11,22,33) In [96]: b = copy.copy(a) In [97]: id(a) Out[97]: 58890680 In [98]: id(b) Out[98]: 58890680 copy.copy\u548ccopy.deepcopy\u7684\u533a\u522b \u00b6 copy.copy copy.deepcopy \u79c1\u6709\u5316 \u00b6 xx: \u516c\u6709\u53d8\u91cf _x: \u5355\u524d\u7f6e\u4e0b\u5212\u7ebf,\u79c1\u6709\u5316\u5c5e\u6027\u6216\u65b9\u6cd5\uff0cfrom somemodule import *\u7981\u6b62\u5bfc\u5165,\u7c7b\u5bf9\u8c61\u548c\u5b50\u7c7b\u53ef\u4ee5\u8bbf\u95ee __xx\uff1a\u53cc\u524d\u7f6e\u4e0b\u5212\u7ebf,\u907f\u514d\u4e0e\u5b50\u7c7b\u4e2d\u7684\u5c5e\u6027\u547d\u540d\u51b2\u7a81\uff0c\u65e0\u6cd5\u5728\u5916\u90e8\u76f4\u63a5\u8bbf\u95ee(\u540d\u5b57\u91cd\u6574\u6240\u4ee5\u8bbf\u95ee\u4e0d\u5230)(\u5b50\u7c7b\u4e0d\u80fd\u7ee7\u627f) xx :\u53cc\u524d\u540e\u4e0b\u5212\u7ebf,\u7528\u6237\u540d\u5b57\u7a7a\u95f4\u7684\u9b54\u6cd5\u5bf9\u8c61\u6216\u5c5e\u6027\u3002\u4f8b\u5982: __init__ , __ \u4e0d\u8981\u81ea\u5df1\u53d1\u660e\u8fd9\u6837\u7684\u540d\u5b57(\u5b50\u7c7b\u7ee7\u627f) xx_:\u5355\u540e\u7f6e\u4e0b\u5212\u7ebf,\u7528\u4e8e\u907f\u514d\u4e0ePython\u5173\u952e\u8bcd\u7684\u51b2\u7a81 \u901a\u8fc7name mangling\uff08\u540d\u5b57\u91cd\u6574(\u76ee\u7684\u5c31\u662f\u4ee5\u9632\u5b50\u7c7b\u610f\u5916\u91cd\u5199\u57fa\u7c7b\u7684\u65b9\u6cd5\u6216\u8005\u5c5e\u6027)\u5982\uff1a_Class__object\uff09\u673a\u5236\u5c31\u53ef\u4ee5\u8bbf\u95eeprivate\u4e86\u3002 #coding=utf-8 class Person ( object ): def __init__ ( self , name , age , taste ): self . name = name self . _age = age self . __taste = taste def showperson ( self ): print ( self . name ) print ( self . _age ) print ( self . __taste ) def dowork ( self ): self . _work () self . __away () def _work ( self ): print ( 'my _work' ) def __away ( self ): print ( 'my __away' ) class Student ( Person ): def construction ( self , name , age , taste ): self . name = name self . _age = age self . __taste = taste def showstudent ( self ): print ( self . name ) print ( self . _age ) print ( self . __taste ) @staticmethod def testbug (): _Bug . showbug () # \u6a21\u5757\u5185\u53ef\u4ee5\u8bbf\u95ee\uff0c\u5f53from cur_module import *\u65f6\uff0c\u4e0d\u5bfc\u5165 class _Bug ( object ): @staticmethod def showbug (): print ( \"showbug\" ) s1 = Student ( 'jack' , 25 , 'football' ) s1 . showperson () print ( '*' * 20 ) # \u65e0\u6cd5\u8bbf\u95ee__taste,\u5bfc\u81f4\u62a5\u9519 # s1.showstudent() s1 . construction ( 'rose' , 30 , 'basketball' ) s1 . showperson () print ( '*' * 20 ) s1 . showstudent () print ( '*' * 20 ) Student . testbug () \u603b\u7ed3 \u00b6 \u7236\u7c7b\u4e2d\u5c5e\u6027\u540d\u4e3a __\u540d\u5b57 \u7684\uff0c\u5b50\u7c7b\u4e0d\u7ee7\u627f\uff0c\u5b50\u7c7b\u4e0d\u80fd\u8bbf\u95ee \u5982\u679c\u5728\u5b50\u7c7b\u4e2d\u5411 __\u540d\u5b57 \u8d4b\u503c\uff0c\u90a3\u4e48\u4f1a\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2a\u4e0e\u7236\u7c7b\u76f8\u540c\u540d\u5b57\u7684\u5c5e\u6027 _\u540d \u7684\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7c7b\u5728\u4f7f\u7528 from xxx import * \u65f6\u90fd\u4e0d\u4f1a\u88ab\u5bfc\u5165 import\u5bfc\u5165\u6a21\u5757 \u00b6 1. import \u641c\u7d22\u8def\u5f84 \u00b6 \u8def\u5f84\u641c\u7d22 \u00b6 \u4ece\u4e0a\u9762\u5217\u51fa\u7684\u76ee\u5f55\u91cc\u4f9d\u6b21\u67e5\u627e\u8981\u5bfc\u5165\u7684\u6a21\u5757\u6587\u4ef6 '' \u8868\u793a\u5f53\u524d\u8def\u5f84 \u5217\u8868\u4e2d\u7684\u8def\u5f84\u7684\u5148\u540e\u987a\u5e8f\u4ee3\u8868\u4e86python\u89e3\u91ca\u5668\u5728\u641c\u7d22\u6a21\u5757\u65f6\u7684\u5148\u540e\u987a\u5e8f \u7a0b\u5e8f\u6267\u884c\u65f6\u6dfb\u52a0\u65b0\u7684\u6a21\u5757\u8def\u5f84 \u00b6 sys . path . append ( '/home/itcast/xxx' ) sys . path . insert ( 0 , '/home/itcast/xxx' ) # \u53ef\u4ee5\u786e\u4fdd\u5148\u641c\u7d22\u8fd9\u4e2a\u8def\u5f84 In [ 37 ]: sys . path . insert ( 0 , \"/home/python/xxxx\" ) In [ 38 ]: sys . path Out [ 38 ]: [ '/home/python/xxxx' , '' , '/usr/bin' , '/usr/lib/python35.zip' , '/usr/lib/python3.5' , '/usr/lib/python3.5/plat-x86_64-linux-gnu' , '/usr/lib/python3.5/lib-dynload' , '/usr/local/lib/python3.5/dist-packages' , '/usr/lib/python3/dist-packages' , '/usr/lib/python3/dist-packages/IPython/extensions' , '/home/python/.ipython' ] 2. \u91cd\u65b0\u5bfc\u5165\u6a21\u5757 \u00b6 \u6a21\u5757\u88ab\u5bfc\u5165\u540e\uff0c import module \u4e0d\u80fd\u91cd\u65b0\u5bfc\u5165\u6a21\u5757\uff0c\u91cd\u65b0\u5bfc\u5165\u9700\u7528 reload 3. \u591a\u6a21\u5757\u5f00\u53d1\u65f6\u7684\u6ce8\u610f\u70b9 \u00b6 common.py\u6a21\u5757 RECV_DATA_LIST = list () # \u7528\u6765\u5b58\u50a8\u6570\u636e HANDLE_FLAG = False # \u7528\u6765\u6807\u8bb0\u662f\u5426\u5904\u7406\u5b8c\u6210 recv_msg.py\u6a21\u5757 from common import RECV_DATA_LIST # from common import HANDLE_FLAG import common def recv_msg(): \"\"\"\u6a21\u62df\u63a5\u6536\u5230\u6570\u636e\uff0c\u7136\u540e\u6dfb\u52a0\u5230common\u6a21\u5757\u4e2d\u7684\u5217\u8868\u4e2d\"\"\" print(\"--->recv_msg\") for i in range(5): RECV_DATA_LIST.append(i) def test_recv_data(): \"\"\"\u6d4b\u8bd5\u63a5\u6536\u5230\u7684\u6570\u636e\"\"\" print(\"--->test_recv_data\") print(RECV_DATA_LIST) def recv_msg_next(): \"\"\"\u5df2\u7ecf\u5904\u7406\u5b8c\u6210\u540e\uff0c\u518d\u63a5\u6536\u53e6\u5916\u7684\u5176\u4ed6\u6570\u636e\"\"\" print(\"--->recv_msg_next\") # if HANDLE_FLAG: if common.HANDLE_FLAG: print(\"------\u53d1\u73b0\u4e4b\u524d\u7684\u6570\u636e\u5df2\u7ecf\u5904\u7406\u5b8c\u6210\uff0c\u8fd9\u91cc\u8fdb\u884c\u63a5\u6536\u5176\u4ed6\u7684\u6570\u636e(\u6a21\u62df\u8fc7\u7a0b...)----\") else: print(\"------\u53d1\u73b0\u4e4b\u524d\u7684\u6570\u636e\u672a\u5904\u7406\u5b8c\uff0c\u7b49\u5f85\u4e2d....------\") handle_msg.py\u6a21\u5757 from common import RECV_DATA_LIST # from common import HANDLE_FLAG import common def handle_data (): \"\"\"\u6a21\u62df\u5904\u7406recv_msg\u6a21\u5757\u63a5\u6536\u7684\u6570\u636e\"\"\" print ( \"--->handle_data\" ) for i in RECV_DATA_LIST : print ( i ) # \u65e2\u7136\u5904\u7406\u5b8c\u6210\u4e86\uff0c\u90a3\u4e48\u5c06\u53d8\u91cfHANDLE_FLAG\u8bbe\u7f6e\u4e3aTrue\uff0c\u610f\u5473\u7740\u5904\u7406\u5b8c\u6210 # global HANDLE_FLAG # HANDLE_FLAG = True common . HANDLE_FLAG = True def test_handle_data (): \"\"\"\u6d4b\u8bd5\u5904\u7406\u662f\u5426\u5b8c\u6210\uff0c\u53d8\u91cf\u662f\u5426\u8bbe\u7f6e\u4e3aTrue\"\"\" print ( \"--->test_handle_data\" ) # if HANDLE_FLAG: if common . HANDLE_FLAG : print ( \"=====\u5df2\u7ecf\u5904\u7406\u5b8c\u6210====\" ) else : print ( \"=====\u672a\u5904\u7406\u5b8c\u6210====\" ) main.py\u6a21\u5757 from recv_msg import * from handle_msg import * def main (): # 1. \u63a5\u6536\u6570\u636e recv_msg () # 2. \u6d4b\u8bd5\u662f\u5426\u63a5\u6536\u5b8c\u6bd5 test_recv_data () # 3. \u5224\u65ad\u5982\u679c\u5904\u7406\u5b8c\u6210\uff0c\u5219\u63a5\u6536\u5176\u5b83\u6570\u636e recv_msg_next () # 4. \u5904\u7406\u6570\u636e handle_data () # 5. \u6d4b\u8bd5\u662f\u5426\u5904\u7406\u5b8c\u6bd5 test_handle_data () # 6. \u5224\u65ad\u5982\u679c\u5904\u7406\u5b8c\u6210\uff0c\u5219\u63a5\u6536\u5176\u5b83\u6570\u636e recv_msg_next () if __name__ == \"__main__\" : main () \u5bfc\u5165\u6a21\u5757\u4e2d\u7684\u6570\u636e\u7684\u65f6\u5019\u8981\u4f7f\u7528 \u5305\u540d.\u53d8\u91cf (\u7c7b\u4f3c\u4e8e\u53d8\u91cf\u4e0e\u5f15\u7528\u53d8\u91cf\u7684\u533a\u522b,\u76f4\u63a5\u4ece\u53e6\u4e00\u4e2a\u95ee\u4ef7\u4e2d\u5bfc\u5165\u53d8\u91cf,\u5728\u65b0\u7684\u6587\u4ef6\u4e2d\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u6539\u53d8\u7c7b\u4f3c\u4e8e\u5c40\u90e8\u53d8\u91cf\u4e0d\u4f1a\u5f71\u54cd\u539f\u6765\u6587\u4ef6\u53d8\u91cf\u7684\u503c\u5373\u4f7f\u52a0\u4e0aglobal\u4e5f\u4e0d\u884c,\u5217\u8868\u53ef\u4ee5\u8fdb\u884c\u6570\u636e\u7684\u6dfb\u52a0\u4f46\u662f\u4e0d\u80fd\u8d4b\u503c,\u6240\u4ee5\u4ee5\u540e\u7528\u7684\u65f6\u5019\u591a\u4e2a\u6587\u4ef6\u5bfc\u5165\u5171\u4eab\u5c31\u76f4\u63a5\u4f7f\u7528\u5305\u540d.\u53d8\u91cf\u540d) \u518d\u8bae \u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001 \u00b6 \u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001 \u662f\u9762\u5411\u5bf9\u8c61\u76843\u5927\u7279\u6027 \u4e3a\u5565\u8981\u5c01\u88c5 \u00b6 \u597d\u5904 \u00b6 \u5728\u4f7f\u7528\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u65f6\uff0c\u5f53\u9700\u8981\u5bf9\u6570\u636e\u5904\u7406\u65f6\uff0c\u9700\u8981\u8003\u8651\u7528\u54ea\u4e2a\u6a21\u677f\u4e2d\u54ea\u4e2a\u51fd\u6570\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f46\u662f\u5f53\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u65f6\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5c06\u6570\u636e\u5b58\u50a8\u5230\u4e86\u8fd9\u4e2a\u72ec\u7acb\u7684\u7a7a\u95f4\u4e2d\uff0c\u8fd9\u4e2a\u72ec\u7acb\u7684\u7a7a\u95f4\uff08\u5373\u5bf9\u8c61\uff09\u4e2d\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u7684\u53d8\u91cf\uff08 class \uff09\u80fd\u591f\u83b7\u53d6\u5230\u7c7b\uff08\u6a21\u677f\uff09\uff0c\u800c\u4e14\u8fd9\u4e2a\u7c7b\u4e2d\u7684\u65b9\u6cd5\u662f\u6709\u4e00\u5b9a\u6570\u91cf\u7684\uff0c\u4e0e\u6b64\u7c7b\u65e0\u5173\u7684\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728\u672c\u7c7b\u4e2d\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u6570\u636e\u5904\u7406\u65f6\uff0c\u53ef\u4ee5\u5f88\u5feb\u901f\u7684\u5b9a\u4f4d\u5230\u9700\u8981\u7684\u65b9\u6cd5\u662f\u8c01 \u8fd9\u6837\u66f4\u65b9\u4fbf \u5168\u5c40\u53d8\u91cf\u662f\u53ea\u80fd\u67091\u4efd\u7684\uff0c\u591a\u5f88\u591a\u4e2a\u51fd\u6570\u9700\u8981\u591a\u4e2a\u5907\u4efd\u65f6\uff0c\u5f80\u5f80\u9700\u8981\u5229\u7528\u5176\u5b83\u7684\u53d8\u91cf\u6765\u8fdb\u884c\u50a8\u5b58\uff1b\u800c\u901a\u8fc7\u5c01\u88c5 \u4f1a\u5c06\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\u8fd9\u4e2a\u53d8\u91cf \u53d8\u4e3a\u4e86\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u201c\u5168\u5c40\u201d\u53d8\u91cf\uff0c\u53ea\u8981\u5bf9\u8c61\u4e0d\u4e00\u6837\u90a3\u4e48\u8fd9\u4e2a\u53d8\u91cf\u5c31\u53ef\u4ee5\u518d\u67091\u4efd\uff0c\u6240\u4ee5\u8fd9\u6837\u66f4\u65b9\u4fbf \u4ee3\u7801\u5212\u5206\u66f4\u6e05\u6670 \u9762\u5411\u8fc7\u7a0b \u5168\u5c40\u53d8\u91cf 1 \u5168\u5c40\u53d8\u91cf 2 \u5168\u5c40\u53d8\u91cf 3 ... def \u51fd\u6570 1 (): pass def \u51fd\u6570 2 (): pass def \u51fd\u6570 3 (): pass def \u51fd\u6570 4 (): pass def \u51fd\u6570 5 (): pass \u9762\u5411\u5bf9\u8c61 class \u7c7b( object ): \u5c5e\u6027 1 \u5c5e\u6027 2 def \u65b9\u6cd5 1 ( self ): pass def \u65b9\u6cd5 2 ( self ): pass class \u7c7b2( object ): \u5c5e\u6027 3 def \u65b9\u6cd5 3 ( self ): pass def \u65b9\u6cd5 4 ( self ): pass def \u65b9\u6cd5 5 ( self ): pass \u4e3a\u5565\u8981\u7ee7\u627f \u00b6 \u8bf4\u660e \u00b6 \u80fd\u591f\u63d0\u5347\u4ee3\u7801\u7684\u91cd\u7528\u7387\uff0c\u5373\u5f00\u53d1\u4e00\u4e2a\u7c7b\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u5b50\u529f\u80fd\u4e2d\u76f4\u63a5\u4f7f\u7528 \u7ee7\u627f\u80fd\u591f\u6709\u6548\u7684\u8fdb\u884c\u4ee3\u7801\u7684\u7ba1\u7406\uff0c\u5f53\u67d0\u4e2a\u7c7b\u6709\u95ee\u9898\u53ea\u8981\u4fee\u6539\u8fd9\u4e2a\u7c7b\u5c31\u884c\uff0c\u800c\u5176\u7ee7\u627f\u8fd9\u4e2a\u7c7b\u7684\u5b50\u7c7b\u5f80\u5f80\u4e0d\u9700\u8981\u5c31\u4fee\u6539 \u600e\u6837\u7406\u89e3\u591a\u6001 \u00b6 class MiniOS ( object ): \"\"\"MiniOS \u64cd\u4f5c\u7cfb\u7edf\u7c7b \"\"\" def __init__ ( self , name ): self . name = name self . apps = [] # \u5b89\u88c5\u7684\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\u5217\u8868 def __str__ ( self ): return \" %s \u5b89\u88c5\u7684\u8f6f\u4ef6\u5217\u8868\u4e3a %s \" % ( self . name , str ( self . apps )) def install_app ( self , app ): # \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u4e86\u8f6f\u4ef6 if app . name in self . apps : print ( \"\u5df2\u7ecf\u5b89\u88c5\u4e86 %s \uff0c\u65e0\u9700\u518d\u6b21\u5b89\u88c5\" % app . name ) else : app . install () self . apps . append ( app . name ) class App ( object ): def __init__ ( self , name , version , desc ): self . name = name self . version = version self . desc = desc def __str__ ( self ): return \" %s \u7684\u5f53\u524d\u7248\u672c\u662f %s - %s \" % ( self . name , self . version , self . desc ) def install ( self ): print ( \"\u5c06 %s [ %s ] \u7684\u6267\u884c\u7a0b\u5e8f\u590d\u5236\u5230\u7a0b\u5e8f\u76ee\u5f55...\" % ( self . name , self . version )) class PyCharm ( App ): pass class Chrome ( App ): def install ( self ): print ( \"\u6b63\u5728\u89e3\u538b\u7f29\u5b89\u88c5\u7a0b\u5e8f...\" ) super () . install () linux = MiniOS ( \"Linux\" ) print ( linux ) pycharm = PyCharm ( \"PyCharm\" , \"1.0\" , \"python \u5f00\u53d1\u7684 IDE \u73af\u5883\" ) chrome = Chrome ( \"Chrome\" , \"2.0\" , \"\u8c37\u6b4c\u6d4f\u89c8\u5668\" ) linux . install_app ( pycharm ) linux . install_app ( chrome ) linux . install_app ( chrome ) print ( linux ) \u8fd0\u884c\u7ed3\u679c Linux \u5b89\u88c5\u7684\u8f6f\u4ef6\u5217\u8868\u4e3a [] \u5c06 PyCharm [1.0] \u7684\u6267\u884c\u7a0b\u5e8f\u590d\u5236\u5230\u7a0b\u5e8f\u76ee\u5f55... \u6b63\u5728\u89e3\u538b\u7f29\u5b89\u88c5\u7a0b\u5e8f... \u5c06 Chrome [2.0] \u7684\u6267\u884c\u7a0b\u5e8f\u590d\u5236\u5230\u7a0b\u5e8f\u76ee\u5f55... \u5df2\u7ecf\u5b89\u88c5\u4e86 Chrome\uff0c\u65e0\u9700\u518d\u6b21\u5b89\u88c5 Linux \u5b89\u88c5\u7684\u8f6f\u4ef6\u5217\u8868\u4e3a ['PyCharm', 'Chrome'] \u66f4\u52a0\u8d85\u8be6\u7ec6\u7684\u89e3\u91caPython\u7684\u5c01\u88c5,\u7ee7\u627f,\u591a\u6001 \u00b6 ''' \u7ee7\u627f\uff1a \u4e00\u79cd\u521b\u9020\u65b0\u7c7b\u7684\u65b9\u6cd5\uff0c\u65b0\u5efa\u7684\u7c7b\u53ef\u4ee5\u7ee7\u627f\u4e00\u4e2a\u6216\u591a\u4e2a\u7236\u7c7b\u7684\u5c5e\u6027 \u7236\u7c7b\u53c8\u53ef\u4ee5\u79f0\u4e3a \u57fa\u7c7b\u6216\u8d85\u7c7b\uff1b\u5b50\u7c7b\u53c8\u79f0\u4e3a\u6d3e\u751f\u7c7b \u7ee7\u627f\u7684\u76ee\u7684\uff1a \u4e3a\u4e86\u51cf\u5c11\u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u4ee3\u7801\u5197\u4f59 python\u4e2d\u7ee7\u627f\u7684\u7279\u70b9\uff1a 1.\u53ef\u4ee5\u9057\u4f20\u3001\u91cd\u7528\u7236\u7c7b\u7684\u5c5e\u6027 2.\u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b 3.\u7ee7\u627f\u80cc\u666f\u4e0b\uff0cpython\u4e2d\u7684\u7c7b\u5206\u4e3a\u4e24\u79cd\uff1a\u65b0\u5f0f\u7c7b\u3001\u7ecf\u5178\u7c7b \u65b0\u5f0f\u7c7b\uff1a\u4f46\u51e1\u7ee7\u627f\u4e86object\u7684\u7c7b\uff0c\u4ee5\u53ca\u8be5\u7c7b\u7684\u5b50\u7c7b\u3001\u5b50\u5b50\u7c7b \u5728python3\u4e2d\u4e00\u4e2a\u7c7b\u5373\u4fbf\u662f\u6ca1\u6709\u663e\u5f0f\u7684\u7ee7\u627f\u4efb\u4f55\u7c7b\uff0c\u5219\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b\u3002 \u5373\uff0cpython3\u4e2d\u6240\u6709\u7684\u7c7b\u90fd\u662f\u65b0\u5f0f\u7c7b \u7ecf\u5178\u7c7b\uff1a\u6ca1\u6709\u7ee7\u627fobject \u5728python2\u4e2d\u53d6\u5206\u65b0\u5f0f\u3001\u7ecf\u5178\u7c7b ''' class Parent1 : pass # \u5728python3\u4e2d\u5199\u5165object\u7ee7\u627f\uff0c\u4e3a\u4e86\u80fd\u5728Python2\u4e2d\u517c\u5bb9 class Parent2 ( object ): pass class Sub1 ( Parent1 ): pass class Sub2 ( Parent1 , Parent2 ): pass # \u67e5\u770b\u7c7b\u7684\u7236\u7c7b(\u57fa\u7c7b)\uff0c\u8bbf\u95ee\u5c5e\u6027__bases__ print ( Parent1 . __bases__ ) print ( Parent2 . __bases__ ) # \u9ed8\u8ba4\u7ee7\u627f object\u7c7b print ( Sub1 . __bases__ ) print ( Sub2 . __bases__ ) # \u5224\u65ad\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5b50\u7c7b\uff0c\u4f7f\u7528\u5185\u7f6e\u65b9\u6cd5 issubclass() print ( issubclass ( Sub1 , Parent1 )) # \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u662f\u7279\u5b9a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u4f7f\u7528\u65b9\u6cd5isinstance() s = Sub1 () # \u5bf9\u8c61\u662f\u6240\u5c5e\u7c7b\u7684\u5b9e\u4f8b print ( isinstance ( s , Sub1 )) # \u5bf9\u8c61\u662f\u6240\u5c5e\u7c7b\u7684\u7236\u7c7b\u7684\u5b9e\u4f8b print ( isinstance ( s , Parent1 )) # \u5bf9\u8c61\u662fobject\u7c7b\u7684\u5b9e\u4f8b print ( isinstance ( s , object )) # \u83b7\u6089\u5bf9\u8c61\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\uff0c\u4f7f\u7528\u5c5e\u6027__class__ print ( s . __class__ ) ''' \u5b50\u7c7b\u5982\u4f55\u91cd\u7528\u7236\u7c7b\uff1f \u65b9\u5f0f\u4e00\u3001\u6307\u540d\u9053\u59d3\u7684\u5e94\u7528\u67d0\u4e00\u4e2a\u7c7b\u4e2d\u7684\u51fd\u6570 \uff081\u3001\u4e0e\u7ee7\u627f\u65e0\u5173 2\u3001\u4e14\u8bbf\u95ee\u7684\u51fd\u6570\uff0c\u6ca1\u6709\u81ea\u52a8\u4f20\u503c\u7684\u6548\u679c\uff09 \u65b9\u5f0f\u4e8c\u3001\u4f7f\u7528\u5185\u7f6e\u65b9\u6cd5 super() \u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u7684\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u7528\u6765\u4e13\u95e8\u8bbf\u95ee\u7236\u7c7b\u4e2d\u7684\u5c5e\u6027 **\u5b8c\u5168\u53c2\u7167mro\u5217\u8868** python2\u4e2d\uff1a\u7c7b\u4e2d\u4f7f\u7528super(\u5f53\u524d\u7c7b\u540d\uff0cself) python3\u4e2d\uff1asuper() \uff081\u3001\u4e25\u683c\u4f9d\u8d56mro\u5217\u8868 2\u3001\u8bbf\u95ee\u7684\u662f\u7ed1\u5b9a\u65b9\u6cd5\uff0c\u6709\u81ea\u52a8\u4f20\u503c\u7684\u6548\u679c\uff09 \u5728\u7ee7\u627f\u80cc\u666f\u4e0b,\u5c5e\u6027\u7684\u67e5\u627e\u4f18\u5148\u7ea7\uff1a 1.\u5355\u7ee7\u627f\u80cc\u666f\uff1a \u5bf9\u8c61\u5185\u90e8 --\u300b \u5bf9\u8c61\u7684\u7c7b --\u300b \u7236\u7c7b --\u300b \u7236\u7236\u7c7b \u2026\u2026 --\u300bobject 2.\u591a\u7ee7\u627f\u80cc\u666f\uff1a 1\uff09\u82e5\u4e00\u4e2a\u5b50\u7c7b\u7ee7\u627f\u591a\u4e2a\u5206\u652f\uff0c\u975e\u83f1\u5f62\u7ed3\u6784\uff08\u591a\u4e2a\u5206\u652f\u6ca1\u6709\u5171\u540c\u7ee7\u627f\u7ecf\u5178\u7c7b\u3001\u65b0\u5f0f\u7c7b\uff08\u975eobject\u7684\u7c7b\uff09\uff09 \u5bf9\u8c61\u5185\u90e8 --\u300b \u5bf9\u8c61\u7684\u7c7b --\u300b\u7236\u7c7b\uff08\u4ece\u5de6\u5f80\u53f3\uff0c\u5404\u5206\u652f\u67e5\u627e\uff09 --\u300b object 2\uff09\u83f1\u5f62\u7ee7\u627f\u95ee\u9898 -1 py3\uff0cpy2 \u591a\u7236\u7c7b\u6700\u7ec8\u6307\u5411\u540c\u4e00\u4e2a\u7c7b\uff0c\u6b64\u7c7b\u4e3a\u65b0\u5f0f\u7c7b\uff1a \u5e7f\u5ea6\u4f18\u5148\u67e5\u627e\uff1a\u5404\u7236\u7c7b\u5206\u652f\u67e5\u627e\uff0c\u5728\u6700\u540e\u4e00\u4e2a\u7236\u7c7b\u67e5\u627e\u5b8c\u6bd5\uff0c\u518d\u53bb\u9876\u7ea7\u7c7b\u67e5\u627e -2 py2 \u591a\u7236\u7c7b\u6700\u7ec8\u6307\u5411\u540c\u4e00\u4e2a\u7c7b\uff0c\u6b64\u7c7b\u4e3a\u7ecf\u5178\u7c7b\uff1a \u6df1\u5ea6\u4f18\u5148\u67e5\u627e\uff1a\u5728\u7b2c\u4e00\u4e2a\u7236\u7c7b\u5206\u652f\u67e5\u627e\uff0c\u7b2c\u4e00\u6b21\u5c31\u53bb\u627e\u9876\u7ea7\u7c7b\u67e5\u627e python\u67e5\u627e\u539f\u7406\uff1a \u4f7f\u7528C3\u7ebf\u6027\u7b97\u6cd5\uff0c\u8ba1\u7b97\u51fa\u4e00\u4e2a\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\uff08MRO\uff09\uff0c\u6b64\u5217\u8868\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6240\u6709\u79ef\u7d2f\u7684\u7ebf\u6027\u987a\u5e8f\u5217\u8868\u3002 \u5982\uff1a>>> f.mro() [<class '__main__.F'>, <class '__main__.D'>, <class '__main__.B'>, <class '__main__.E'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>] \u6240\u6709\u7236\u7c7b\u7684MRO\u5217\u8868\u5e76\u9075\u5faa\u5982\u4e0b\u4e09\u6761\u51c6\u5219: 1.\u5b50\u7c7b\u4f1a\u5148\u4e8e\u7236\u7c7b\u88ab\u68c0\u67e5 2.\u591a\u4e2a\u7236\u7c7b\u4f1a\u6839\u636e\u5b83\u4eec\u5728\u5217\u8868\u4e2d\u7684\u987a\u5e8f\u88ab\u68c0\u67e5 3.\u5982\u679c\u5bf9\u4e0b\u4e00\u4e2a\u7c7b\u5b58\u5728\u4e24\u4e2a\u5408\u6cd5\u7684\u9009\u62e9,\u9009\u62e9\u7b2c\u4e00\u4e2a\u7236\u7c7b ''' # \u5229\u7528\u7ee7\u627f\u89e3\u51b3\u4ee3\u7801\u5197\u4f59 class CollegePeople : school = 'college' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class Stu ( CollegePeople ): def __init__ ( self , name , age , sex , score ): # \u6307\u540d\u9053\u59d3\u7684\u5e94\u7528\u7236\u7c7b\u4e2d\u7684\u51fd\u6570 CollegePeople . __init__ ( self , name , age , sex ) self . score = score def choose_course ( self , y ): print ( ' %s choose course' % self . name , y ) class Teacher ( CollegePeople ): def __init__ ( self , name , age , sex , level ): # CollegePeople.__init__(self, name, age, sex) # \u4f7f\u7528\u5185\u7f6e\u65b9\u6cd5 super()\u91cd\u7528\u7236\u7c7b super () . __init__ ( name , age , sex ) self . level = level def score ( self , stu , num ): stu . score = num s1 = Stu ( 'name' , 18 , 'male' , 99 ) print ( s1 . __dict__ ) t1 = Teacher ( 'teacher' , 28 , 'female' , 10 ) print ( t1 . __dict__ ) \u65b9\u5f0f\u4e00\u3001\u6307\u540d\u9053\u59d3\u7684\u5e94\u7528\u67d0\u4e00\u4e2a\u7c7b\u4e2d\u7684\u51fd\u6570 \uff08 1 \u3001\u4e0e\u7ee7\u627f\u65e0\u5173 2 \u3001\u4e14\u8bbf\u95ee\u7684\u51fd\u6570\uff0c\u6ca1\u6709\u81ea\u52a8\u4f20\u503c\u7684\u6548\u679c\uff09 class A : def __init__ ( self , a ): self . a = a class B : def __init__ ( self , b ): self . b = b class C ( A ): def __init__ ( self , a , b , c ): A . __init__ ( self , a ) B . __init__ ( self , b ) self . c = c c1 = C ( 'a' , 'b' , 'c' ) print ( c1 . __dict__ ) # ------------------------------- # \u5355\u7ee7\u627f\u4e0b\u7684\u67e5\u627e\u987a\u5e8f class Pra : def f1 ( self ): print ( 'P --> f1' ) def f2 ( self ): print ( 'P ----> f2' ) self . f1 () class Fo ( Pra ): def f1 ( self ): print ( 'F ---> f1' ) a = Fo () a . f2 () # ----------------------------------------------- ''' \u7ec4\u5408\uff1a\u67d0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u62e5\u6709\u4e00\u4e2a\u5c5e\u6027\uff0c\u5176\u503c\u6765\u81ea\u4e8e\u53e6\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61 class Foo: xxx = 222 class Bar: yyy = 111 obj = Foo() b = Bar\uff08\uff09 obj.attr = Bar() obj.a = b obj.xxxx #\u8c03\u7528Foo\u5185\u5c5e\u6027 obj.attr.yyyy #\u8c03\u7528Bar\u5185\u5c5e\u6027 \u4f7f\u7528\u7ec4\u5408\u7684\u76ee\u7684\uff1a \u901a\u8fc7\u4e3a\u67d0\u4e00\u4e2a\u5bf9\u8c61\u6dfb\u52a0\u5c5e\u6027\u7684\u65b9\u5f0f\uff0c\u95f4\u63a5\u5c06\u4e24\u4e2a\u7c7b\u8fdb\u884c\u5173\u8054\uff0c\u51cf\u5c11\u7c7b\u4e0e\u7c7b\u4ee3\u7801\u5197\u4f59 ''' # \u4f7f\u7528\u7ec4\u5408\u51cf\u5c11\u4ee3\u7801\u5197\u4f59 class CollegePeople (): school = 'college' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class CollegeStudent ( CollegePeople ): def __init__ ( self , name , age , sex , score = 0 ): super () . __init__ ( name , age , sex ) self . score = score self . courses = [] def tell_all_course ( self ): print (( '\u5b66\u751f[ %s ]\u9009\u4fee\u7684\u8bfe\u7a0b\u5982\u4e0b' % self . name ) . center ( 50 , '=' )) for obj in self . courses : obj . tell_course () print ( '=' * 60 ) class CollegeTeacher ( CollegePeople ): def __init__ ( self , name , age , sex , level ): super () . __init__ ( name , age , sex ) self . level = level self . courses = [] def tell_all_course ( self ): print (( '\u8001\u5e08[ %s ]\u6559\u6388\u7684\u8bfe\u7a0b\u5982\u4e0b' % self . name ) . center ( 50 , '*' )) for obj in self . courses : obj . tell_course () print ( '*' * 70 ) # \u521b\u5efa\u8bfe\u7a0b class CollegeCourse : def __init__ ( self , c_name , c_price , c_period ): self . c_name = c_name self . c_price = c_price self . c_period = c_period def tell_course ( self ): print ( 'course:' + self . c_name , self . c_price , self . c_period ) python = CollegeCourse ( 'python\u5168\u6808\u5f00\u53d1' , 1900 , '5mons' ) linux = CollegeCourse ( 'linux\u67b6\u6784\u5e08' , 900 , '3mons' ) # \u5b66\u751f\u6dfb\u52a0\u8bfe\u7a0b stu1 = CollegeStudent ( 'STU1' , 38 , 'male' ) stu1 . courses . append ( python ) stu1 . courses . append ( linux ) stu1 . tell_all_course () # \u6559\u5e08\u6dfb\u52a0\u8bfe\u7a0b tea1 = CollegeTeacher ( 'TEA1' , 18 , 'male' , 10 ) tea1 . courses . append ( linux ) tea1 . tell_all_course () # ------------------------------------------- ''' \u591a\u6001\uff1a\u4e00\u7c7b\u4e8b\u7269\u5b58\u5728\u591a\u79cd\u5f62\u6001 ### Python\u4e2d\u591a\u6001\u7684`\u4f5c\u7528` **\u8ba9\u5177\u6709\u4e0d\u540c\u529f\u80fd\u7684\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u51fd\u6570\u540d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u51fd\u6570\u540d\u8c03\u7528\u4e0d\u540c\u5185\u5bb9(\u529f\u80fd)\u7684\u51fd\u6570\u3002** ### Python\u4e2d\u591a\u6001\u7684`\u7279\u70b9` 1\u3001\u53ea\u5173\u5fc3\u5bf9\u8c61\u7684\u5b9e\u4f8b\u65b9\u6cd5\u662f\u5426\u540c\u540d\uff0c\u4e0d\u5173\u5fc3\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u578b\uff1b 2\u3001\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u4e4b\u95f4\uff0c\u7ee7\u627f\u5173\u7cfb\u53ef\u6709\u53ef\u65e0\uff1b 3\u3001\u591a\u6001\u7684\u597d\u5904\u53ef\u4ee5\u589e\u52a0\u4ee3\u7801\u7684\u5916\u90e8\u8c03\u7528\u7075\u6d3b\u5ea6\uff0c\u8ba9\u4ee3\u7801\u66f4\u52a0\u901a\u7528\uff0c\u517c\u5bb9\u6027\u6bd4\u8f83\u5f3a\uff1b 4\u3001\u591a\u6001\u662f\u8c03\u7528\u65b9\u6cd5\u7684\u6280\u5de7\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u7c7b\u7684\u5185\u90e8\u8bbe\u8ba1\u3002 \u4f8b\uff1a\u52a8\u7269\u5b58\u5728\u591a\u79cd\u5f62\u6001<\u4eba\uff0c\u72d7\uff0c\u732b> \u591a\u6001\u6027\uff1a\u5728\u591a\u6001\u7684\u80cc\u666f\u4e0b\uff08\u7edf\u4e00\uff09\uff0c\u4e0d\u8003\u8651\u5b9e\u4f8b\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b9e\u4f8b \u5373\u4e0d\u540c\u7684\u5b9e\u4f8b\uff0c\u8c03\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e0d\u540c\u7684\u7ed3\u679c \u4f8b\uff1a\u4e0d\u540c\u79cd\u7c7b\u7684\u52a8\u7269\uff0c\u90fd\u53ef\u4ee5\u8c03\u7528\u5403\u559d\u62c9\u6492\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u7ed3\u679c\u4e0d\u540c\u3002 \u591a\u6001\u6027\u5206\u4e3a\u9759\u6001\u591a\u6001\u6027\u548c\u52a8\u6001\u591a\u6001\u6027 \u62bd\u8c61\u7c7b\uff1a\u4e00\u4e2a\u7279\u6b8a\u7684\u7c7b\uff0c\u53ea\u80fd\u88ab\u7ee7\u627f\uff0c\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u82e5\u7c7b\u662f\u4e00\u5806\u5bf9\u8c61\u4e2d\u62bd\u53d6\u76f8\u540c\u7684\u5185\u5bb9\u800c\u6765\uff0c\u62bd\u8c61\u7c7b\u5219\u662f\u4ece\u4e00\u5806\u7c7b\u4e2d\u62bd\u53d6\u76f8\u540c\u7684\u5185\u5bb9\u800c\u6765\uff0c\u5185\u5bb9\u5305\u62ec\u4e86\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u62bd\u8c61\u7c7b\u548c\u63a5\u53e3\uff1a\u62bd\u8c61\u7c7b\u7684\u672c\u8d28\u8fd8\u662f\u7d2f\uff0c\u6307\u7684\u662f\u4e00\u7ec4\u7c7b\u7684\u76f8\u4f3c\u6027\uff0c\u5305\u62ec\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u800c\u63a5\u53e3\u53ea\u5f3a\u8c03\u51fd\u6570\u5c5e\u6027\u7684\u76f8\u4f3c\u6027\u3002 abc\u6a21\u5757\uff1a\u4f7f\u5b50\u7c7b\u5f3a\u5236\u9075\u5faa\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u5373\u5b50\u7c7b\u5fc5\u987b\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5 \u6ce8\uff1a\u7236\u7c7b\u53ea\u80fd\u7528\u6765\u5efa\u7acb\u89c4\u8303\uff0c\u4e0d\u80fd\u7528\u6765\u5b9e\u4f8b\u5316\uff0c\u65e0\u9700\u5b9e\u73b0\u5185\u90e8\u65b9\u6cd5 \u4f8b\uff1a class Animal(metaclass = abc.ABCMeta): @abc.abstractmethod def speak(self): pass \u9e2d\u5b50\u7c7b\u578b\uff1a\u5982\u679c\u770b\u8d77\u6765\u50cf\u3001\u53eb\u58f0\u50cf\u800c\u4e14\u8d70\u8d77\u8def\u6765\u50cf\u9e2d\u5b50\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u9e2d\u5b50 python\u7a0b\u5e8f\u5458\u901a\u5e38\u6839\u636e\u8fd9\u79cd\u884c\u4e3a\u6765\u7f16\u5199\u7a0b\u5e8f\u3002 \u4f8b\u5982\uff0clinux\u5bf9\u786c\u76d8\u7684\u64cd\u4f5c\u770b\u8d77\u6765\u50cf\u6587\u4ef6\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u7528\u64cd\u4f5c\u6587\u4ef6\u7684\u65b9\u6cd5\u64cd\u4f5c\u786c\u76d8 ''' ''' \u5c01\u88c5\uff1a\u660e\u786e\u7684\u53d6\u5206\u5185\u5916\uff0c\u5c01\u88c5\u7684\u5c5e\u6027\u53ef\u4ee5\u76f4\u63a5\u5728\u5185\u90e8\u8c03\u7528\uff0c\u800c\u4e0d\u80fd\u88ab\u5916\u754c\u4f7f\u7528\u3002 \u9690\u85cf\u65b9\u5f0f\uff1a\u5b9a\u4e49\u7684\u5c5e\u6027\u4ee5__\u5f00\u5934\u3002\u4f8b\uff1a__name \u6ce8\u610f\uff1a__xxx__\u4e3a\u5185\u7f6e\u5c5e\u6027\u800c\u4e0d\u662f\u5f71\u85cf \u9690\u85cf\u5b58\u50a8\u7684__dict__\u603b\u7ed3\uff1a 1.__\u5f00\u5934\u7684\u5c5e\u6027\uff0c\u5b9e\u73b0\u7684\u9690\u85cf\u4ec5\u4ec5\u53ea\u662f\u4e00\u79cd\u8bed\u6cd5\u610f\u4e49\u4e0a\u7684\u53d8\u5f62\uff0c\u5e76\u4e0d\u4f1a\u771f\u6b63\u9650\u5236\u7c7b\u5916\u90e8\u7684\u8bbf\u95ee 2.\u6539\u53d8\u5f62\u64cd\u4f5c\u53ea\u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5\u68c0\u6d4b\u8bed\u6cd5\u65f6\u53d1\u751f\u4e00\u6b21\uff0c\u7c7b\u5b9a\u4e49\u9636\u6bb5\u7ed3\u675f\u540e\uff08\u5bf9\u8c61\u3001\u7c7b\u7684\u6dfb\u52a0\u4fee\u6539\u7b49\u64cd\u4f5c\uff09\u5b9a\u4e49\u7684\u5c5e\u6027\u4e0d\u4f1a\u53d8\u5f62 3.\u5c5e\u6027\u6dfb\u52a0__\u5f00\u5934\u53ef\u4ee5\u9632\u6b62\u5b50\u7c7b\u8986\u76d6\u7236\u7c7b\u7684\u65b9\u6cd5\u3002\u4e14\u7236\u7c7b\u5185\u53ea\u4f1a\u67e5\u627e\u5230\u81ea\u8eab\u7684\u9690\u85cf\u5c5e\u6027 \u5c01\u88c5\u6570\u636e\u5c5e\u6027\u76ee\u7684\uff1a\u5c06\u6570\u636e\u5c5e\u6027\u9690\u85cf\uff0c\u7c7b\u5916\u90e8\u65e0\u6cd5\u76f4\u63a5\u64cd\u4f5c\u5c5e\u6027\uff0c\u901a\u8fc7\u7c7b\u5185\u90e8\u63a5\u53e3\u95f4\u63a5\u64cd\u4f5c \u63a5\u53e3\u5b9e\u73b0\u5404\u79cd\u903b\u8f91\uff0c\u63a7\u5236\u5916\u90e8\u4f7f\u7528\u63a5\u53e3\u5bf9\u5c5e\u6027\u7684\u64cd\u4f5c \u5c01\u88c5\u65b9\u6cd5\u7684\u76ee\u7684\uff1a\u9694\u79bb\u590d\u6742\u5ea6 ''' class Foo : __x = 111 # _Foo__x __y = 222 # _Foo__y def __init__ ( self , name , age ): self . __name = name self . __age = age def __func ( self ): # _Foo__func pass def get_info ( self ): print ( self . __name , self . __age , self . __x ) # print(self._Foo__name,self._Foo__age,self._Foo__x) # \u5916\u754c\u65e0\u6cd5\u8c03\u7528\u9690\u85cf\u5c5e\u6027 print ( Foo . __x ) print ( Foo . __func ) # \u67e5\u770b\u7c7b\u540d\u79f0\u7a7a\u95f4\uff0c\u53d1\u73b0\u5c5e\u6027\u540d\u79f0\u5728\u5b9a\u4e49\u68c0\u6d4b\u9636\u6bb5\u4fee\u6539 print ( Foo . __dict__ ) # \u4ecd\u7136\u53ef\u4ee5\u8c03\u7528\u4fee\u6539\u540e\u540d\u5b57\u7684\u5c5e\u6027\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 print ( Foo . _Foo__x ) print ( Foo . _Foo__y ) # \u5728\u7c7b\u5b9a\u4e49\u68c0\u6d4b\u9636\u6bb5\u4e4b\u540e\u5b9a\u4e49\u7684\u5c5e\u6027\uff0c\u4e0d\u88ab\u4fee\u6539\u5c31\u653e\u5165\u7a7a\u95f4 Foo . __z = 333 print ( Foo . __dict__ ) print ( Foo . __z ) # \u5bf9\u8c61\u4e2d\u4e5f\u4f1a\u4fee\u6539\u5bf9\u5e94\u7684\u9690\u85cf\u5c5e\u6027 obj = Foo ( '123' , 18 ) print ( obj . __dict__ ) print ( obj . __name ) print ( obj . __age ) obj . get_info () # \u5bf9\u8c61\u521b\u5efa\u4e4b\u540e\uff0c\u65b0\u5b9a\u4e49\u7684\u5c5e\u6027\uff0c\u4e0d\u4f1a\u88ab\u4fee\u6539 obj . __sex = 'male' print ( obj . __dict__ ) print ( obj . __sex ) # ------------------------------------------- # \u5c01\u88c5\u6570\u636e\u5c5e\u6027\u7684\u76ee\u7684\uff1a # \u901a\u8fc7\u63a5\u53e3\uff0c\u5b9e\u73b0\u63a7\u5236\u518d\u95f4\u63a5\u4fee\u6539\u79c1\u6709\u7c7b\u578b class People : def __init__ ( self , name , age ): self . __name = name self . __age = age def get_info ( self ): print ( self . __name , self . __age ) def set_info ( self , name , age ): if type ( name ) is not str : print ( 'name type error!' ) return if type ( age ) is not int : print ( 'age type error' ) return self . __name = name self . __age = age # \u521b\u5efa\u5bf9\u8c61 obj = People ( 'lin' , 12 ) obj . get_info () # \u4f7f\u7528\u63a5\u53e3\u4f5c\u4e3a\u63a7\u5236\u7528\u6237\u8f93\u5165\u7684\u5224\u65ad\uff0c\u8fbe\u5230\u4e0d\u5f71\u54cd\u9690\u85cf\u5c5e\u6027\u7684\u4f5c\u7528 obj . set_info ( 18 , 'LIN' ) obj . set_info ( 'LIN' , '18' ) # \u6210\u529f\u4fee\u6539\u5bf9\u8c61 obj . set_info ( 'LIN' , 18 ) obj . get_info () # -------------------- ''' \u7279\u6027\uff1a\u901a\u8fc7\u5b58\u53d6\u65b9\u6cd5\u5b58\u53d6\u7684\u5c5e\u6027\u79f0\u4e4b\u4e3a\u7279\u6027 property\u88c5\u9970\u5668\uff1a\u4f7f\u7c7b\u5185\u7684\u51fd\u6570\u5c5e\u6027\u4f2a\u88c5\u6210\u6570\u636e\u5c5e\u6027 \u88abproperty\u88c5\u662f\u7684\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528@xxx.setter\u548c@xxx.deleter\u8fdb\u884cset\u3001del\u64cd\u4f5c \u6ce8\uff1a\u4ec5\u53ef\u4f7f\u7528\u4e0e\u65b0\u5f0f\u7c7b ''' class People1 : def __init__ ( self , name , weight , height ): self . __name = name self . __weight = weight self . __height = height @property def bmi ( self ): return self . __weight / ( self . __height ** 2 ) # \u51e1\u662f\u88abproperty\u88c5\u9970\u8fc7\u7684\u51fd\u6570\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d.setter\u4f5c\u4e3a\u88c5\u9970\u5668\uff0c\u8ba9\u79c1\u6709\u5c5e\u6027\u53ef\u4ee5\u88ab\u4fee\u6539 @bmi.setter def bmi ( self , obj ): self . __name = obj @bmi.deleter def bmi ( self ): del self . __name p1 = People1 ( 'p1' , 75 , 1.85 ) print ( p1 . bmi )","title":"008 12  python\u63d0\u9ad8 1"},{"location":"008-12--python\u63d0\u9ad8-1/#121-gil","text":"","title":"12.1. GIL"},{"location":"008-12--python\u63d0\u9ad8-1/#gil","text":"","title":"GIL\uff08\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff09"},{"location":"008-12--python\u63d0\u9ad8-1/#gil_1","text":"\u63cf\u8ff0Python GIL\u7684\u6982\u5ff5\uff0c \u4ee5\u53ca\u5b83\u5bf9python\u591a\u7ebf\u7a0b\u7684\u5f71\u54cd\uff1f\u7f16\u5199\u4e00\u4e2a\u591a\u7ebf\u7a0b\u6293\u53d6\u7f51\u9875\u7684\u7a0b\u5e8f\uff0c\u5e76\u9610\u660e\u591a\u7ebf\u7a0b\u6293\u53d6\u7a0b\u5e8f\u662f\u5426\u53ef\u6bd4\u5355\u7ebf\u7a0b\u6027\u80fd\u6709\u63d0\u5347\uff0c\u5e76\u89e3\u91ca\u539f\u56e0\u3002 Guido\u7684\u58f0\u660e\uff1a http://www.artima.com/forums/flat.jsp?forum=106&thread=214235 he language doesn't require the GIL -- it's only the CPython virtual machine that has historically been unable to shed it.","title":"GIL\u9762\u8bd5\u9898\u5982\u4e0b"},{"location":"008-12--python\u63d0\u9ad8-1/#_1","text":"Python\u8bed\u8a00\u548cGIL\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb\u3002\u4ec5\u4ec5\u662f\u7531\u4e8e\u5386\u53f2\u539f\u56e0\u5728Cpython\u865a\u62df\u673a(\u89e3\u91ca\u5668)\uff0c\u96be\u4ee5\u79fb\u9664GIL\u3002 GIL\uff1a\u5168\u5c40\u89e3\u91ca\u5668\u9501\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u90fd\u9700\u8981\u5148\u83b7\u53d6GIL\uff0c\u4fdd\u8bc1\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\u4ee3\u7801\u3002 \u7ebf\u7a0b\u91ca\u653eGIL\u9501\u7684\u60c5\u51b5\uff1a \u5728IO\u64cd\u4f5c\u7b49\u53ef\u80fd\u4f1a\u5f15\u8d77\u963b\u585e\u7684system call\u4e4b\u524d,\u53ef\u4ee5\u6682\u65f6\u91ca\u653eGIL,\u4f46\u5728\u6267\u884c\u5b8c\u6bd5\u540e,\u5fc5\u987b\u91cd\u65b0\u83b7\u53d6GIL Python 3.x\u4f7f\u7528\u8ba1\u65f6\u5668\uff08\u6267\u884c\u65f6\u95f4\u8fbe\u5230\u9608\u503c\u540e\uff0c\u5f53\u524d\u7ebf\u7a0b\u91ca\u653eGIL\uff09\u6216Python 2.x\uff0ctickets\u8ba1\u6570\u8fbe\u5230100 Python\u4f7f\u7528\u591a\u8fdb\u7a0b\u662f\u53ef\u4ee5\u5229\u7528\u591a\u6838\u7684CPU\u8d44\u6e90\u7684\u3002 \u591a\u7ebf\u7a0b\u722c\u53d6\u6bd4\u5355\u7ebf\u7a0b\u6027\u80fd\u6709\u63d0\u5347\uff0c\u56e0\u4e3a\u9047\u5230IO\u963b\u585e\u4f1a\u81ea\u52a8\u91ca\u653eGIL\u9501","title":"\u53c2\u8003\u7b54\u6848:"},{"location":"008-12--python\u63d0\u9ad8-1/#122","text":"","title":"12.2. \u6df1\u62f7\u8d1d\u3001\u6d45\u62f7\u8d1d"},{"location":"008-12--python\u63d0\u9ad8-1/#_2","text":"","title":"\u6df1\u62f7\u8d1d\u3001\u6d45\u62f7\u8d1d"},{"location":"008-12--python\u63d0\u9ad8-1/#146","text":"\u6d45\u62f7\u8d1d\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u7684\u9876\u5c42\u62f7\u8d1d \u901a\u4fd7\u7684\u7406\u89e3\u662f\uff1a\u62f7\u8d1d\u4e86\u5f15\u7528\uff0c\u5e76\u6ca1\u6709\u62f7\u8d1d\u5185\u5bb9","title":"1. \u6d45\u62f7\u8d1d"},{"location":"008-12--python\u63d0\u9ad8-1/#246","text":"\u6df1\u62f7\u8d1d\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u6240\u6709\u5c42\u6b21\u7684\u62f7\u8d1d(\u9012\u5f52)","title":"2. \u6df1\u62f7\u8d1d"},{"location":"008-12--python\u63d0\u9ad8-1/#_3","text":"","title":"\u8fdb\u4e00\u6b65\u7406\u89e3\u6df1\u62f7\u8d1d"},{"location":"008-12--python\u63d0\u9ad8-1/#346","text":"\u5206\u7247\u8868\u8fbe\u5f0f\u53ef\u4ee5\u8d4b\u503c\u4e00\u4e2a\u5e8f\u5217 \u5b57\u5178\u7684copy\u65b9\u6cd5\u53ef\u4ee5\u62f7\u8d1d\u4e00\u4e2a\u5b57\u5178","title":"3. \u62f7\u8d1d\u7684\u5176\u4ed6\u65b9\u5f0f"},{"location":"008-12--python\u63d0\u9ad8-1/#446","text":"","title":"4. \u6ce8\u610f\u70b9"},{"location":"008-12--python\u63d0\u9ad8-1/#copy","text":"copy.copy\u5bf9\u4e8e\u53ef\u53d8\u7c7b\u578b\uff0c\u4f1a\u8fdb\u884c\u6d45\u62f7\u8d1d copy.copy\u5bf9\u4e8e\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4e0d\u4f1a\u62f7\u8d1d\uff0c\u4ec5\u4ec5\u662f\u6307\u5411 In [88]: a = [11,22,33] In [89]: b = copy.copy(a) In [90]: id(a) Out[90]: 59275144 In [91]: id(b) Out[91]: 59525600 In [92]: a.append(44) In [93]: a Out[93]: [11, 22, 33, 44] In [94]: b Out[94]: [11, 22, 33] In [95]: a = (11,22,33) In [96]: b = copy.copy(a) In [97]: id(a) Out[97]: 58890680 In [98]: id(b) Out[98]: 58890680","title":"\u6d45\u62f7\u8d1d\u5bf9\u4e0d\u53ef\u53d8\u7c7b\u578b\u548c\u53ef\u53d8\u7c7b\u578b\u7684copy\u4e0d\u540c"},{"location":"008-12--python\u63d0\u9ad8-1/#copycopycopydeepcopy","text":"copy.copy copy.deepcopy","title":"copy.copy\u548ccopy.deepcopy\u7684\u533a\u522b"},{"location":"008-12--python\u63d0\u9ad8-1/#_4","text":"xx: \u516c\u6709\u53d8\u91cf _x: \u5355\u524d\u7f6e\u4e0b\u5212\u7ebf,\u79c1\u6709\u5316\u5c5e\u6027\u6216\u65b9\u6cd5\uff0cfrom somemodule import *\u7981\u6b62\u5bfc\u5165,\u7c7b\u5bf9\u8c61\u548c\u5b50\u7c7b\u53ef\u4ee5\u8bbf\u95ee __xx\uff1a\u53cc\u524d\u7f6e\u4e0b\u5212\u7ebf,\u907f\u514d\u4e0e\u5b50\u7c7b\u4e2d\u7684\u5c5e\u6027\u547d\u540d\u51b2\u7a81\uff0c\u65e0\u6cd5\u5728\u5916\u90e8\u76f4\u63a5\u8bbf\u95ee(\u540d\u5b57\u91cd\u6574\u6240\u4ee5\u8bbf\u95ee\u4e0d\u5230)(\u5b50\u7c7b\u4e0d\u80fd\u7ee7\u627f) xx :\u53cc\u524d\u540e\u4e0b\u5212\u7ebf,\u7528\u6237\u540d\u5b57\u7a7a\u95f4\u7684\u9b54\u6cd5\u5bf9\u8c61\u6216\u5c5e\u6027\u3002\u4f8b\u5982: __init__ , __ \u4e0d\u8981\u81ea\u5df1\u53d1\u660e\u8fd9\u6837\u7684\u540d\u5b57(\u5b50\u7c7b\u7ee7\u627f) xx_:\u5355\u540e\u7f6e\u4e0b\u5212\u7ebf,\u7528\u4e8e\u907f\u514d\u4e0ePython\u5173\u952e\u8bcd\u7684\u51b2\u7a81 \u901a\u8fc7name mangling\uff08\u540d\u5b57\u91cd\u6574(\u76ee\u7684\u5c31\u662f\u4ee5\u9632\u5b50\u7c7b\u610f\u5916\u91cd\u5199\u57fa\u7c7b\u7684\u65b9\u6cd5\u6216\u8005\u5c5e\u6027)\u5982\uff1a_Class__object\uff09\u673a\u5236\u5c31\u53ef\u4ee5\u8bbf\u95eeprivate\u4e86\u3002 #coding=utf-8 class Person ( object ): def __init__ ( self , name , age , taste ): self . name = name self . _age = age self . __taste = taste def showperson ( self ): print ( self . name ) print ( self . _age ) print ( self . __taste ) def dowork ( self ): self . _work () self . __away () def _work ( self ): print ( 'my _work' ) def __away ( self ): print ( 'my __away' ) class Student ( Person ): def construction ( self , name , age , taste ): self . name = name self . _age = age self . __taste = taste def showstudent ( self ): print ( self . name ) print ( self . _age ) print ( self . __taste ) @staticmethod def testbug (): _Bug . showbug () # \u6a21\u5757\u5185\u53ef\u4ee5\u8bbf\u95ee\uff0c\u5f53from cur_module import *\u65f6\uff0c\u4e0d\u5bfc\u5165 class _Bug ( object ): @staticmethod def showbug (): print ( \"showbug\" ) s1 = Student ( 'jack' , 25 , 'football' ) s1 . showperson () print ( '*' * 20 ) # \u65e0\u6cd5\u8bbf\u95ee__taste,\u5bfc\u81f4\u62a5\u9519 # s1.showstudent() s1 . construction ( 'rose' , 30 , 'basketball' ) s1 . showperson () print ( '*' * 20 ) s1 . showstudent () print ( '*' * 20 ) Student . testbug ()","title":"\u79c1\u6709\u5316"},{"location":"008-12--python\u63d0\u9ad8-1/#_5","text":"\u7236\u7c7b\u4e2d\u5c5e\u6027\u540d\u4e3a __\u540d\u5b57 \u7684\uff0c\u5b50\u7c7b\u4e0d\u7ee7\u627f\uff0c\u5b50\u7c7b\u4e0d\u80fd\u8bbf\u95ee \u5982\u679c\u5728\u5b50\u7c7b\u4e2d\u5411 __\u540d\u5b57 \u8d4b\u503c\uff0c\u90a3\u4e48\u4f1a\u5728\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2a\u4e0e\u7236\u7c7b\u76f8\u540c\u540d\u5b57\u7684\u5c5e\u6027 _\u540d \u7684\u53d8\u91cf\u3001\u51fd\u6570\u3001\u7c7b\u5728\u4f7f\u7528 from xxx import * \u65f6\u90fd\u4e0d\u4f1a\u88ab\u5bfc\u5165","title":"\u603b\u7ed3"},{"location":"008-12--python\u63d0\u9ad8-1/#import","text":"","title":"import\u5bfc\u5165\u6a21\u5757"},{"location":"008-12--python\u63d0\u9ad8-1/#1-import","text":"","title":"1. import \u641c\u7d22\u8def\u5f84"},{"location":"008-12--python\u63d0\u9ad8-1/#_6","text":"\u4ece\u4e0a\u9762\u5217\u51fa\u7684\u76ee\u5f55\u91cc\u4f9d\u6b21\u67e5\u627e\u8981\u5bfc\u5165\u7684\u6a21\u5757\u6587\u4ef6 '' \u8868\u793a\u5f53\u524d\u8def\u5f84 \u5217\u8868\u4e2d\u7684\u8def\u5f84\u7684\u5148\u540e\u987a\u5e8f\u4ee3\u8868\u4e86python\u89e3\u91ca\u5668\u5728\u641c\u7d22\u6a21\u5757\u65f6\u7684\u5148\u540e\u987a\u5e8f","title":"\u8def\u5f84\u641c\u7d22"},{"location":"008-12--python\u63d0\u9ad8-1/#_7","text":"sys . path . append ( '/home/itcast/xxx' ) sys . path . insert ( 0 , '/home/itcast/xxx' ) # \u53ef\u4ee5\u786e\u4fdd\u5148\u641c\u7d22\u8fd9\u4e2a\u8def\u5f84 In [ 37 ]: sys . path . insert ( 0 , \"/home/python/xxxx\" ) In [ 38 ]: sys . path Out [ 38 ]: [ '/home/python/xxxx' , '' , '/usr/bin' , '/usr/lib/python35.zip' , '/usr/lib/python3.5' , '/usr/lib/python3.5/plat-x86_64-linux-gnu' , '/usr/lib/python3.5/lib-dynload' , '/usr/local/lib/python3.5/dist-packages' , '/usr/lib/python3/dist-packages' , '/usr/lib/python3/dist-packages/IPython/extensions' , '/home/python/.ipython' ]","title":"\u7a0b\u5e8f\u6267\u884c\u65f6\u6dfb\u52a0\u65b0\u7684\u6a21\u5757\u8def\u5f84"},{"location":"008-12--python\u63d0\u9ad8-1/#2","text":"\u6a21\u5757\u88ab\u5bfc\u5165\u540e\uff0c import module \u4e0d\u80fd\u91cd\u65b0\u5bfc\u5165\u6a21\u5757\uff0c\u91cd\u65b0\u5bfc\u5165\u9700\u7528 reload","title":"2. \u91cd\u65b0\u5bfc\u5165\u6a21\u5757"},{"location":"008-12--python\u63d0\u9ad8-1/#3","text":"common.py\u6a21\u5757 RECV_DATA_LIST = list () # \u7528\u6765\u5b58\u50a8\u6570\u636e HANDLE_FLAG = False # \u7528\u6765\u6807\u8bb0\u662f\u5426\u5904\u7406\u5b8c\u6210 recv_msg.py\u6a21\u5757 from common import RECV_DATA_LIST # from common import HANDLE_FLAG import common def recv_msg(): \"\"\"\u6a21\u62df\u63a5\u6536\u5230\u6570\u636e\uff0c\u7136\u540e\u6dfb\u52a0\u5230common\u6a21\u5757\u4e2d\u7684\u5217\u8868\u4e2d\"\"\" print(\"--->recv_msg\") for i in range(5): RECV_DATA_LIST.append(i) def test_recv_data(): \"\"\"\u6d4b\u8bd5\u63a5\u6536\u5230\u7684\u6570\u636e\"\"\" print(\"--->test_recv_data\") print(RECV_DATA_LIST) def recv_msg_next(): \"\"\"\u5df2\u7ecf\u5904\u7406\u5b8c\u6210\u540e\uff0c\u518d\u63a5\u6536\u53e6\u5916\u7684\u5176\u4ed6\u6570\u636e\"\"\" print(\"--->recv_msg_next\") # if HANDLE_FLAG: if common.HANDLE_FLAG: print(\"------\u53d1\u73b0\u4e4b\u524d\u7684\u6570\u636e\u5df2\u7ecf\u5904\u7406\u5b8c\u6210\uff0c\u8fd9\u91cc\u8fdb\u884c\u63a5\u6536\u5176\u4ed6\u7684\u6570\u636e(\u6a21\u62df\u8fc7\u7a0b...)----\") else: print(\"------\u53d1\u73b0\u4e4b\u524d\u7684\u6570\u636e\u672a\u5904\u7406\u5b8c\uff0c\u7b49\u5f85\u4e2d....------\") handle_msg.py\u6a21\u5757 from common import RECV_DATA_LIST # from common import HANDLE_FLAG import common def handle_data (): \"\"\"\u6a21\u62df\u5904\u7406recv_msg\u6a21\u5757\u63a5\u6536\u7684\u6570\u636e\"\"\" print ( \"--->handle_data\" ) for i in RECV_DATA_LIST : print ( i ) # \u65e2\u7136\u5904\u7406\u5b8c\u6210\u4e86\uff0c\u90a3\u4e48\u5c06\u53d8\u91cfHANDLE_FLAG\u8bbe\u7f6e\u4e3aTrue\uff0c\u610f\u5473\u7740\u5904\u7406\u5b8c\u6210 # global HANDLE_FLAG # HANDLE_FLAG = True common . HANDLE_FLAG = True def test_handle_data (): \"\"\"\u6d4b\u8bd5\u5904\u7406\u662f\u5426\u5b8c\u6210\uff0c\u53d8\u91cf\u662f\u5426\u8bbe\u7f6e\u4e3aTrue\"\"\" print ( \"--->test_handle_data\" ) # if HANDLE_FLAG: if common . HANDLE_FLAG : print ( \"=====\u5df2\u7ecf\u5904\u7406\u5b8c\u6210====\" ) else : print ( \"=====\u672a\u5904\u7406\u5b8c\u6210====\" ) main.py\u6a21\u5757 from recv_msg import * from handle_msg import * def main (): # 1. \u63a5\u6536\u6570\u636e recv_msg () # 2. \u6d4b\u8bd5\u662f\u5426\u63a5\u6536\u5b8c\u6bd5 test_recv_data () # 3. \u5224\u65ad\u5982\u679c\u5904\u7406\u5b8c\u6210\uff0c\u5219\u63a5\u6536\u5176\u5b83\u6570\u636e recv_msg_next () # 4. \u5904\u7406\u6570\u636e handle_data () # 5. \u6d4b\u8bd5\u662f\u5426\u5904\u7406\u5b8c\u6bd5 test_handle_data () # 6. \u5224\u65ad\u5982\u679c\u5904\u7406\u5b8c\u6210\uff0c\u5219\u63a5\u6536\u5176\u5b83\u6570\u636e recv_msg_next () if __name__ == \"__main__\" : main () \u5bfc\u5165\u6a21\u5757\u4e2d\u7684\u6570\u636e\u7684\u65f6\u5019\u8981\u4f7f\u7528 \u5305\u540d.\u53d8\u91cf (\u7c7b\u4f3c\u4e8e\u53d8\u91cf\u4e0e\u5f15\u7528\u53d8\u91cf\u7684\u533a\u522b,\u76f4\u63a5\u4ece\u53e6\u4e00\u4e2a\u95ee\u4ef7\u4e2d\u5bfc\u5165\u53d8\u91cf,\u5728\u65b0\u7684\u6587\u4ef6\u4e2d\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u6539\u53d8\u7c7b\u4f3c\u4e8e\u5c40\u90e8\u53d8\u91cf\u4e0d\u4f1a\u5f71\u54cd\u539f\u6765\u6587\u4ef6\u53d8\u91cf\u7684\u503c\u5373\u4f7f\u52a0\u4e0aglobal\u4e5f\u4e0d\u884c,\u5217\u8868\u53ef\u4ee5\u8fdb\u884c\u6570\u636e\u7684\u6dfb\u52a0\u4f46\u662f\u4e0d\u80fd\u8d4b\u503c,\u6240\u4ee5\u4ee5\u540e\u7528\u7684\u65f6\u5019\u591a\u4e2a\u6587\u4ef6\u5bfc\u5165\u5171\u4eab\u5c31\u76f4\u63a5\u4f7f\u7528\u5305\u540d.\u53d8\u91cf\u540d)","title":"3. \u591a\u6a21\u5757\u5f00\u53d1\u65f6\u7684\u6ce8\u610f\u70b9"},{"location":"008-12--python\u63d0\u9ad8-1/#_8","text":"\u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001 \u662f\u9762\u5411\u5bf9\u8c61\u76843\u5927\u7279\u6027","title":"\u518d\u8bae \u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001"},{"location":"008-12--python\u63d0\u9ad8-1/#_9","text":"","title":"\u4e3a\u5565\u8981\u5c01\u88c5"},{"location":"008-12--python\u63d0\u9ad8-1/#_10","text":"\u5728\u4f7f\u7528\u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b\u65f6\uff0c\u5f53\u9700\u8981\u5bf9\u6570\u636e\u5904\u7406\u65f6\uff0c\u9700\u8981\u8003\u8651\u7528\u54ea\u4e2a\u6a21\u677f\u4e2d\u54ea\u4e2a\u51fd\u6570\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f46\u662f\u5f53\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u65f6\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5c06\u6570\u636e\u5b58\u50a8\u5230\u4e86\u8fd9\u4e2a\u72ec\u7acb\u7684\u7a7a\u95f4\u4e2d\uff0c\u8fd9\u4e2a\u72ec\u7acb\u7684\u7a7a\u95f4\uff08\u5373\u5bf9\u8c61\uff09\u4e2d\u901a\u8fc7\u4e00\u4e2a\u7279\u6b8a\u7684\u53d8\u91cf\uff08 class \uff09\u80fd\u591f\u83b7\u53d6\u5230\u7c7b\uff08\u6a21\u677f\uff09\uff0c\u800c\u4e14\u8fd9\u4e2a\u7c7b\u4e2d\u7684\u65b9\u6cd5\u662f\u6709\u4e00\u5b9a\u6570\u91cf\u7684\uff0c\u4e0e\u6b64\u7c7b\u65e0\u5173\u7684\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728\u672c\u7c7b\u4e2d\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u6570\u636e\u5904\u7406\u65f6\uff0c\u53ef\u4ee5\u5f88\u5feb\u901f\u7684\u5b9a\u4f4d\u5230\u9700\u8981\u7684\u65b9\u6cd5\u662f\u8c01 \u8fd9\u6837\u66f4\u65b9\u4fbf \u5168\u5c40\u53d8\u91cf\u662f\u53ea\u80fd\u67091\u4efd\u7684\uff0c\u591a\u5f88\u591a\u4e2a\u51fd\u6570\u9700\u8981\u591a\u4e2a\u5907\u4efd\u65f6\uff0c\u5f80\u5f80\u9700\u8981\u5229\u7528\u5176\u5b83\u7684\u53d8\u91cf\u6765\u8fdb\u884c\u50a8\u5b58\uff1b\u800c\u901a\u8fc7\u5c01\u88c5 \u4f1a\u5c06\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\u8fd9\u4e2a\u53d8\u91cf \u53d8\u4e3a\u4e86\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u201c\u5168\u5c40\u201d\u53d8\u91cf\uff0c\u53ea\u8981\u5bf9\u8c61\u4e0d\u4e00\u6837\u90a3\u4e48\u8fd9\u4e2a\u53d8\u91cf\u5c31\u53ef\u4ee5\u518d\u67091\u4efd\uff0c\u6240\u4ee5\u8fd9\u6837\u66f4\u65b9\u4fbf \u4ee3\u7801\u5212\u5206\u66f4\u6e05\u6670 \u9762\u5411\u8fc7\u7a0b \u5168\u5c40\u53d8\u91cf 1 \u5168\u5c40\u53d8\u91cf 2 \u5168\u5c40\u53d8\u91cf 3 ... def \u51fd\u6570 1 (): pass def \u51fd\u6570 2 (): pass def \u51fd\u6570 3 (): pass def \u51fd\u6570 4 (): pass def \u51fd\u6570 5 (): pass \u9762\u5411\u5bf9\u8c61 class \u7c7b( object ): \u5c5e\u6027 1 \u5c5e\u6027 2 def \u65b9\u6cd5 1 ( self ): pass def \u65b9\u6cd5 2 ( self ): pass class \u7c7b2( object ): \u5c5e\u6027 3 def \u65b9\u6cd5 3 ( self ): pass def \u65b9\u6cd5 4 ( self ): pass def \u65b9\u6cd5 5 ( self ): pass","title":"\u597d\u5904"},{"location":"008-12--python\u63d0\u9ad8-1/#_11","text":"","title":"\u4e3a\u5565\u8981\u7ee7\u627f"},{"location":"008-12--python\u63d0\u9ad8-1/#_12","text":"\u80fd\u591f\u63d0\u5347\u4ee3\u7801\u7684\u91cd\u7528\u7387\uff0c\u5373\u5f00\u53d1\u4e00\u4e2a\u7c7b\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u5b50\u529f\u80fd\u4e2d\u76f4\u63a5\u4f7f\u7528 \u7ee7\u627f\u80fd\u591f\u6709\u6548\u7684\u8fdb\u884c\u4ee3\u7801\u7684\u7ba1\u7406\uff0c\u5f53\u67d0\u4e2a\u7c7b\u6709\u95ee\u9898\u53ea\u8981\u4fee\u6539\u8fd9\u4e2a\u7c7b\u5c31\u884c\uff0c\u800c\u5176\u7ee7\u627f\u8fd9\u4e2a\u7c7b\u7684\u5b50\u7c7b\u5f80\u5f80\u4e0d\u9700\u8981\u5c31\u4fee\u6539","title":"\u8bf4\u660e"},{"location":"008-12--python\u63d0\u9ad8-1/#_13","text":"class MiniOS ( object ): \"\"\"MiniOS \u64cd\u4f5c\u7cfb\u7edf\u7c7b \"\"\" def __init__ ( self , name ): self . name = name self . apps = [] # \u5b89\u88c5\u7684\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\u5217\u8868 def __str__ ( self ): return \" %s \u5b89\u88c5\u7684\u8f6f\u4ef6\u5217\u8868\u4e3a %s \" % ( self . name , str ( self . apps )) def install_app ( self , app ): # \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u4e86\u8f6f\u4ef6 if app . name in self . apps : print ( \"\u5df2\u7ecf\u5b89\u88c5\u4e86 %s \uff0c\u65e0\u9700\u518d\u6b21\u5b89\u88c5\" % app . name ) else : app . install () self . apps . append ( app . name ) class App ( object ): def __init__ ( self , name , version , desc ): self . name = name self . version = version self . desc = desc def __str__ ( self ): return \" %s \u7684\u5f53\u524d\u7248\u672c\u662f %s - %s \" % ( self . name , self . version , self . desc ) def install ( self ): print ( \"\u5c06 %s [ %s ] \u7684\u6267\u884c\u7a0b\u5e8f\u590d\u5236\u5230\u7a0b\u5e8f\u76ee\u5f55...\" % ( self . name , self . version )) class PyCharm ( App ): pass class Chrome ( App ): def install ( self ): print ( \"\u6b63\u5728\u89e3\u538b\u7f29\u5b89\u88c5\u7a0b\u5e8f...\" ) super () . install () linux = MiniOS ( \"Linux\" ) print ( linux ) pycharm = PyCharm ( \"PyCharm\" , \"1.0\" , \"python \u5f00\u53d1\u7684 IDE \u73af\u5883\" ) chrome = Chrome ( \"Chrome\" , \"2.0\" , \"\u8c37\u6b4c\u6d4f\u89c8\u5668\" ) linux . install_app ( pycharm ) linux . install_app ( chrome ) linux . install_app ( chrome ) print ( linux ) \u8fd0\u884c\u7ed3\u679c Linux \u5b89\u88c5\u7684\u8f6f\u4ef6\u5217\u8868\u4e3a [] \u5c06 PyCharm [1.0] \u7684\u6267\u884c\u7a0b\u5e8f\u590d\u5236\u5230\u7a0b\u5e8f\u76ee\u5f55... \u6b63\u5728\u89e3\u538b\u7f29\u5b89\u88c5\u7a0b\u5e8f... \u5c06 Chrome [2.0] \u7684\u6267\u884c\u7a0b\u5e8f\u590d\u5236\u5230\u7a0b\u5e8f\u76ee\u5f55... \u5df2\u7ecf\u5b89\u88c5\u4e86 Chrome\uff0c\u65e0\u9700\u518d\u6b21\u5b89\u88c5 Linux \u5b89\u88c5\u7684\u8f6f\u4ef6\u5217\u8868\u4e3a ['PyCharm', 'Chrome']","title":"\u600e\u6837\u7406\u89e3\u591a\u6001"},{"location":"008-12--python\u63d0\u9ad8-1/#python","text":"''' \u7ee7\u627f\uff1a \u4e00\u79cd\u521b\u9020\u65b0\u7c7b\u7684\u65b9\u6cd5\uff0c\u65b0\u5efa\u7684\u7c7b\u53ef\u4ee5\u7ee7\u627f\u4e00\u4e2a\u6216\u591a\u4e2a\u7236\u7c7b\u7684\u5c5e\u6027 \u7236\u7c7b\u53c8\u53ef\u4ee5\u79f0\u4e3a \u57fa\u7c7b\u6216\u8d85\u7c7b\uff1b\u5b50\u7c7b\u53c8\u79f0\u4e3a\u6d3e\u751f\u7c7b \u7ee7\u627f\u7684\u76ee\u7684\uff1a \u4e3a\u4e86\u51cf\u5c11\u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u4ee3\u7801\u5197\u4f59 python\u4e2d\u7ee7\u627f\u7684\u7279\u70b9\uff1a 1.\u53ef\u4ee5\u9057\u4f20\u3001\u91cd\u7528\u7236\u7c7b\u7684\u5c5e\u6027 2.\u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b 3.\u7ee7\u627f\u80cc\u666f\u4e0b\uff0cpython\u4e2d\u7684\u7c7b\u5206\u4e3a\u4e24\u79cd\uff1a\u65b0\u5f0f\u7c7b\u3001\u7ecf\u5178\u7c7b \u65b0\u5f0f\u7c7b\uff1a\u4f46\u51e1\u7ee7\u627f\u4e86object\u7684\u7c7b\uff0c\u4ee5\u53ca\u8be5\u7c7b\u7684\u5b50\u7c7b\u3001\u5b50\u5b50\u7c7b \u5728python3\u4e2d\u4e00\u4e2a\u7c7b\u5373\u4fbf\u662f\u6ca1\u6709\u663e\u5f0f\u7684\u7ee7\u627f\u4efb\u4f55\u7c7b\uff0c\u5219\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b\u3002 \u5373\uff0cpython3\u4e2d\u6240\u6709\u7684\u7c7b\u90fd\u662f\u65b0\u5f0f\u7c7b \u7ecf\u5178\u7c7b\uff1a\u6ca1\u6709\u7ee7\u627fobject \u5728python2\u4e2d\u53d6\u5206\u65b0\u5f0f\u3001\u7ecf\u5178\u7c7b ''' class Parent1 : pass # \u5728python3\u4e2d\u5199\u5165object\u7ee7\u627f\uff0c\u4e3a\u4e86\u80fd\u5728Python2\u4e2d\u517c\u5bb9 class Parent2 ( object ): pass class Sub1 ( Parent1 ): pass class Sub2 ( Parent1 , Parent2 ): pass # \u67e5\u770b\u7c7b\u7684\u7236\u7c7b(\u57fa\u7c7b)\uff0c\u8bbf\u95ee\u5c5e\u6027__bases__ print ( Parent1 . __bases__ ) print ( Parent2 . __bases__ ) # \u9ed8\u8ba4\u7ee7\u627f object\u7c7b print ( Sub1 . __bases__ ) print ( Sub2 . __bases__ ) # \u5224\u65ad\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5b50\u7c7b\uff0c\u4f7f\u7528\u5185\u7f6e\u65b9\u6cd5 issubclass() print ( issubclass ( Sub1 , Parent1 )) # \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u662f\u7279\u5b9a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u4f7f\u7528\u65b9\u6cd5isinstance() s = Sub1 () # \u5bf9\u8c61\u662f\u6240\u5c5e\u7c7b\u7684\u5b9e\u4f8b print ( isinstance ( s , Sub1 )) # \u5bf9\u8c61\u662f\u6240\u5c5e\u7c7b\u7684\u7236\u7c7b\u7684\u5b9e\u4f8b print ( isinstance ( s , Parent1 )) # \u5bf9\u8c61\u662fobject\u7c7b\u7684\u5b9e\u4f8b print ( isinstance ( s , object )) # \u83b7\u6089\u5bf9\u8c61\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\uff0c\u4f7f\u7528\u5c5e\u6027__class__ print ( s . __class__ ) ''' \u5b50\u7c7b\u5982\u4f55\u91cd\u7528\u7236\u7c7b\uff1f \u65b9\u5f0f\u4e00\u3001\u6307\u540d\u9053\u59d3\u7684\u5e94\u7528\u67d0\u4e00\u4e2a\u7c7b\u4e2d\u7684\u51fd\u6570 \uff081\u3001\u4e0e\u7ee7\u627f\u65e0\u5173 2\u3001\u4e14\u8bbf\u95ee\u7684\u51fd\u6570\uff0c\u6ca1\u6709\u81ea\u52a8\u4f20\u503c\u7684\u6548\u679c\uff09 \u65b9\u5f0f\u4e8c\u3001\u4f7f\u7528\u5185\u7f6e\u65b9\u6cd5 super() \u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u7684\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u7528\u6765\u4e13\u95e8\u8bbf\u95ee\u7236\u7c7b\u4e2d\u7684\u5c5e\u6027 **\u5b8c\u5168\u53c2\u7167mro\u5217\u8868** python2\u4e2d\uff1a\u7c7b\u4e2d\u4f7f\u7528super(\u5f53\u524d\u7c7b\u540d\uff0cself) python3\u4e2d\uff1asuper() \uff081\u3001\u4e25\u683c\u4f9d\u8d56mro\u5217\u8868 2\u3001\u8bbf\u95ee\u7684\u662f\u7ed1\u5b9a\u65b9\u6cd5\uff0c\u6709\u81ea\u52a8\u4f20\u503c\u7684\u6548\u679c\uff09 \u5728\u7ee7\u627f\u80cc\u666f\u4e0b,\u5c5e\u6027\u7684\u67e5\u627e\u4f18\u5148\u7ea7\uff1a 1.\u5355\u7ee7\u627f\u80cc\u666f\uff1a \u5bf9\u8c61\u5185\u90e8 --\u300b \u5bf9\u8c61\u7684\u7c7b --\u300b \u7236\u7c7b --\u300b \u7236\u7236\u7c7b \u2026\u2026 --\u300bobject 2.\u591a\u7ee7\u627f\u80cc\u666f\uff1a 1\uff09\u82e5\u4e00\u4e2a\u5b50\u7c7b\u7ee7\u627f\u591a\u4e2a\u5206\u652f\uff0c\u975e\u83f1\u5f62\u7ed3\u6784\uff08\u591a\u4e2a\u5206\u652f\u6ca1\u6709\u5171\u540c\u7ee7\u627f\u7ecf\u5178\u7c7b\u3001\u65b0\u5f0f\u7c7b\uff08\u975eobject\u7684\u7c7b\uff09\uff09 \u5bf9\u8c61\u5185\u90e8 --\u300b \u5bf9\u8c61\u7684\u7c7b --\u300b\u7236\u7c7b\uff08\u4ece\u5de6\u5f80\u53f3\uff0c\u5404\u5206\u652f\u67e5\u627e\uff09 --\u300b object 2\uff09\u83f1\u5f62\u7ee7\u627f\u95ee\u9898 -1 py3\uff0cpy2 \u591a\u7236\u7c7b\u6700\u7ec8\u6307\u5411\u540c\u4e00\u4e2a\u7c7b\uff0c\u6b64\u7c7b\u4e3a\u65b0\u5f0f\u7c7b\uff1a \u5e7f\u5ea6\u4f18\u5148\u67e5\u627e\uff1a\u5404\u7236\u7c7b\u5206\u652f\u67e5\u627e\uff0c\u5728\u6700\u540e\u4e00\u4e2a\u7236\u7c7b\u67e5\u627e\u5b8c\u6bd5\uff0c\u518d\u53bb\u9876\u7ea7\u7c7b\u67e5\u627e -2 py2 \u591a\u7236\u7c7b\u6700\u7ec8\u6307\u5411\u540c\u4e00\u4e2a\u7c7b\uff0c\u6b64\u7c7b\u4e3a\u7ecf\u5178\u7c7b\uff1a \u6df1\u5ea6\u4f18\u5148\u67e5\u627e\uff1a\u5728\u7b2c\u4e00\u4e2a\u7236\u7c7b\u5206\u652f\u67e5\u627e\uff0c\u7b2c\u4e00\u6b21\u5c31\u53bb\u627e\u9876\u7ea7\u7c7b\u67e5\u627e python\u67e5\u627e\u539f\u7406\uff1a \u4f7f\u7528C3\u7ebf\u6027\u7b97\u6cd5\uff0c\u8ba1\u7b97\u51fa\u4e00\u4e2a\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\uff08MRO\uff09\uff0c\u6b64\u5217\u8868\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6240\u6709\u79ef\u7d2f\u7684\u7ebf\u6027\u987a\u5e8f\u5217\u8868\u3002 \u5982\uff1a>>> f.mro() [<class '__main__.F'>, <class '__main__.D'>, <class '__main__.B'>, <class '__main__.E'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>] \u6240\u6709\u7236\u7c7b\u7684MRO\u5217\u8868\u5e76\u9075\u5faa\u5982\u4e0b\u4e09\u6761\u51c6\u5219: 1.\u5b50\u7c7b\u4f1a\u5148\u4e8e\u7236\u7c7b\u88ab\u68c0\u67e5 2.\u591a\u4e2a\u7236\u7c7b\u4f1a\u6839\u636e\u5b83\u4eec\u5728\u5217\u8868\u4e2d\u7684\u987a\u5e8f\u88ab\u68c0\u67e5 3.\u5982\u679c\u5bf9\u4e0b\u4e00\u4e2a\u7c7b\u5b58\u5728\u4e24\u4e2a\u5408\u6cd5\u7684\u9009\u62e9,\u9009\u62e9\u7b2c\u4e00\u4e2a\u7236\u7c7b ''' # \u5229\u7528\u7ee7\u627f\u89e3\u51b3\u4ee3\u7801\u5197\u4f59 class CollegePeople : school = 'college' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class Stu ( CollegePeople ): def __init__ ( self , name , age , sex , score ): # \u6307\u540d\u9053\u59d3\u7684\u5e94\u7528\u7236\u7c7b\u4e2d\u7684\u51fd\u6570 CollegePeople . __init__ ( self , name , age , sex ) self . score = score def choose_course ( self , y ): print ( ' %s choose course' % self . name , y ) class Teacher ( CollegePeople ): def __init__ ( self , name , age , sex , level ): # CollegePeople.__init__(self, name, age, sex) # \u4f7f\u7528\u5185\u7f6e\u65b9\u6cd5 super()\u91cd\u7528\u7236\u7c7b super () . __init__ ( name , age , sex ) self . level = level def score ( self , stu , num ): stu . score = num s1 = Stu ( 'name' , 18 , 'male' , 99 ) print ( s1 . __dict__ ) t1 = Teacher ( 'teacher' , 28 , 'female' , 10 ) print ( t1 . __dict__ ) \u65b9\u5f0f\u4e00\u3001\u6307\u540d\u9053\u59d3\u7684\u5e94\u7528\u67d0\u4e00\u4e2a\u7c7b\u4e2d\u7684\u51fd\u6570 \uff08 1 \u3001\u4e0e\u7ee7\u627f\u65e0\u5173 2 \u3001\u4e14\u8bbf\u95ee\u7684\u51fd\u6570\uff0c\u6ca1\u6709\u81ea\u52a8\u4f20\u503c\u7684\u6548\u679c\uff09 class A : def __init__ ( self , a ): self . a = a class B : def __init__ ( self , b ): self . b = b class C ( A ): def __init__ ( self , a , b , c ): A . __init__ ( self , a ) B . __init__ ( self , b ) self . c = c c1 = C ( 'a' , 'b' , 'c' ) print ( c1 . __dict__ ) # ------------------------------- # \u5355\u7ee7\u627f\u4e0b\u7684\u67e5\u627e\u987a\u5e8f class Pra : def f1 ( self ): print ( 'P --> f1' ) def f2 ( self ): print ( 'P ----> f2' ) self . f1 () class Fo ( Pra ): def f1 ( self ): print ( 'F ---> f1' ) a = Fo () a . f2 () # ----------------------------------------------- ''' \u7ec4\u5408\uff1a\u67d0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u62e5\u6709\u4e00\u4e2a\u5c5e\u6027\uff0c\u5176\u503c\u6765\u81ea\u4e8e\u53e6\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61 class Foo: xxx = 222 class Bar: yyy = 111 obj = Foo() b = Bar\uff08\uff09 obj.attr = Bar() obj.a = b obj.xxxx #\u8c03\u7528Foo\u5185\u5c5e\u6027 obj.attr.yyyy #\u8c03\u7528Bar\u5185\u5c5e\u6027 \u4f7f\u7528\u7ec4\u5408\u7684\u76ee\u7684\uff1a \u901a\u8fc7\u4e3a\u67d0\u4e00\u4e2a\u5bf9\u8c61\u6dfb\u52a0\u5c5e\u6027\u7684\u65b9\u5f0f\uff0c\u95f4\u63a5\u5c06\u4e24\u4e2a\u7c7b\u8fdb\u884c\u5173\u8054\uff0c\u51cf\u5c11\u7c7b\u4e0e\u7c7b\u4ee3\u7801\u5197\u4f59 ''' # \u4f7f\u7528\u7ec4\u5408\u51cf\u5c11\u4ee3\u7801\u5197\u4f59 class CollegePeople (): school = 'college' def __init__ ( self , name , age , sex ): self . name = name self . age = age self . sex = sex class CollegeStudent ( CollegePeople ): def __init__ ( self , name , age , sex , score = 0 ): super () . __init__ ( name , age , sex ) self . score = score self . courses = [] def tell_all_course ( self ): print (( '\u5b66\u751f[ %s ]\u9009\u4fee\u7684\u8bfe\u7a0b\u5982\u4e0b' % self . name ) . center ( 50 , '=' )) for obj in self . courses : obj . tell_course () print ( '=' * 60 ) class CollegeTeacher ( CollegePeople ): def __init__ ( self , name , age , sex , level ): super () . __init__ ( name , age , sex ) self . level = level self . courses = [] def tell_all_course ( self ): print (( '\u8001\u5e08[ %s ]\u6559\u6388\u7684\u8bfe\u7a0b\u5982\u4e0b' % self . name ) . center ( 50 , '*' )) for obj in self . courses : obj . tell_course () print ( '*' * 70 ) # \u521b\u5efa\u8bfe\u7a0b class CollegeCourse : def __init__ ( self , c_name , c_price , c_period ): self . c_name = c_name self . c_price = c_price self . c_period = c_period def tell_course ( self ): print ( 'course:' + self . c_name , self . c_price , self . c_period ) python = CollegeCourse ( 'python\u5168\u6808\u5f00\u53d1' , 1900 , '5mons' ) linux = CollegeCourse ( 'linux\u67b6\u6784\u5e08' , 900 , '3mons' ) # \u5b66\u751f\u6dfb\u52a0\u8bfe\u7a0b stu1 = CollegeStudent ( 'STU1' , 38 , 'male' ) stu1 . courses . append ( python ) stu1 . courses . append ( linux ) stu1 . tell_all_course () # \u6559\u5e08\u6dfb\u52a0\u8bfe\u7a0b tea1 = CollegeTeacher ( 'TEA1' , 18 , 'male' , 10 ) tea1 . courses . append ( linux ) tea1 . tell_all_course () # ------------------------------------------- ''' \u591a\u6001\uff1a\u4e00\u7c7b\u4e8b\u7269\u5b58\u5728\u591a\u79cd\u5f62\u6001 ### Python\u4e2d\u591a\u6001\u7684`\u4f5c\u7528` **\u8ba9\u5177\u6709\u4e0d\u540c\u529f\u80fd\u7684\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u51fd\u6570\u540d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u51fd\u6570\u540d\u8c03\u7528\u4e0d\u540c\u5185\u5bb9(\u529f\u80fd)\u7684\u51fd\u6570\u3002** ### Python\u4e2d\u591a\u6001\u7684`\u7279\u70b9` 1\u3001\u53ea\u5173\u5fc3\u5bf9\u8c61\u7684\u5b9e\u4f8b\u65b9\u6cd5\u662f\u5426\u540c\u540d\uff0c\u4e0d\u5173\u5fc3\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u578b\uff1b 2\u3001\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u4e4b\u95f4\uff0c\u7ee7\u627f\u5173\u7cfb\u53ef\u6709\u53ef\u65e0\uff1b 3\u3001\u591a\u6001\u7684\u597d\u5904\u53ef\u4ee5\u589e\u52a0\u4ee3\u7801\u7684\u5916\u90e8\u8c03\u7528\u7075\u6d3b\u5ea6\uff0c\u8ba9\u4ee3\u7801\u66f4\u52a0\u901a\u7528\uff0c\u517c\u5bb9\u6027\u6bd4\u8f83\u5f3a\uff1b 4\u3001\u591a\u6001\u662f\u8c03\u7528\u65b9\u6cd5\u7684\u6280\u5de7\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u7c7b\u7684\u5185\u90e8\u8bbe\u8ba1\u3002 \u4f8b\uff1a\u52a8\u7269\u5b58\u5728\u591a\u79cd\u5f62\u6001<\u4eba\uff0c\u72d7\uff0c\u732b> \u591a\u6001\u6027\uff1a\u5728\u591a\u6001\u7684\u80cc\u666f\u4e0b\uff08\u7edf\u4e00\uff09\uff0c\u4e0d\u8003\u8651\u5b9e\u4f8b\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b9e\u4f8b \u5373\u4e0d\u540c\u7684\u5b9e\u4f8b\uff0c\u8c03\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e0d\u540c\u7684\u7ed3\u679c \u4f8b\uff1a\u4e0d\u540c\u79cd\u7c7b\u7684\u52a8\u7269\uff0c\u90fd\u53ef\u4ee5\u8c03\u7528\u5403\u559d\u62c9\u6492\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u7ed3\u679c\u4e0d\u540c\u3002 \u591a\u6001\u6027\u5206\u4e3a\u9759\u6001\u591a\u6001\u6027\u548c\u52a8\u6001\u591a\u6001\u6027 \u62bd\u8c61\u7c7b\uff1a\u4e00\u4e2a\u7279\u6b8a\u7684\u7c7b\uff0c\u53ea\u80fd\u88ab\u7ee7\u627f\uff0c\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u82e5\u7c7b\u662f\u4e00\u5806\u5bf9\u8c61\u4e2d\u62bd\u53d6\u76f8\u540c\u7684\u5185\u5bb9\u800c\u6765\uff0c\u62bd\u8c61\u7c7b\u5219\u662f\u4ece\u4e00\u5806\u7c7b\u4e2d\u62bd\u53d6\u76f8\u540c\u7684\u5185\u5bb9\u800c\u6765\uff0c\u5185\u5bb9\u5305\u62ec\u4e86\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u62bd\u8c61\u7c7b\u548c\u63a5\u53e3\uff1a\u62bd\u8c61\u7c7b\u7684\u672c\u8d28\u8fd8\u662f\u7d2f\uff0c\u6307\u7684\u662f\u4e00\u7ec4\u7c7b\u7684\u76f8\u4f3c\u6027\uff0c\u5305\u62ec\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u800c\u63a5\u53e3\u53ea\u5f3a\u8c03\u51fd\u6570\u5c5e\u6027\u7684\u76f8\u4f3c\u6027\u3002 abc\u6a21\u5757\uff1a\u4f7f\u5b50\u7c7b\u5f3a\u5236\u9075\u5faa\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u5373\u5b50\u7c7b\u5fc5\u987b\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5 \u6ce8\uff1a\u7236\u7c7b\u53ea\u80fd\u7528\u6765\u5efa\u7acb\u89c4\u8303\uff0c\u4e0d\u80fd\u7528\u6765\u5b9e\u4f8b\u5316\uff0c\u65e0\u9700\u5b9e\u73b0\u5185\u90e8\u65b9\u6cd5 \u4f8b\uff1a class Animal(metaclass = abc.ABCMeta): @abc.abstractmethod def speak(self): pass \u9e2d\u5b50\u7c7b\u578b\uff1a\u5982\u679c\u770b\u8d77\u6765\u50cf\u3001\u53eb\u58f0\u50cf\u800c\u4e14\u8d70\u8d77\u8def\u6765\u50cf\u9e2d\u5b50\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u9e2d\u5b50 python\u7a0b\u5e8f\u5458\u901a\u5e38\u6839\u636e\u8fd9\u79cd\u884c\u4e3a\u6765\u7f16\u5199\u7a0b\u5e8f\u3002 \u4f8b\u5982\uff0clinux\u5bf9\u786c\u76d8\u7684\u64cd\u4f5c\u770b\u8d77\u6765\u50cf\u6587\u4ef6\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u7528\u64cd\u4f5c\u6587\u4ef6\u7684\u65b9\u6cd5\u64cd\u4f5c\u786c\u76d8 ''' ''' \u5c01\u88c5\uff1a\u660e\u786e\u7684\u53d6\u5206\u5185\u5916\uff0c\u5c01\u88c5\u7684\u5c5e\u6027\u53ef\u4ee5\u76f4\u63a5\u5728\u5185\u90e8\u8c03\u7528\uff0c\u800c\u4e0d\u80fd\u88ab\u5916\u754c\u4f7f\u7528\u3002 \u9690\u85cf\u65b9\u5f0f\uff1a\u5b9a\u4e49\u7684\u5c5e\u6027\u4ee5__\u5f00\u5934\u3002\u4f8b\uff1a__name \u6ce8\u610f\uff1a__xxx__\u4e3a\u5185\u7f6e\u5c5e\u6027\u800c\u4e0d\u662f\u5f71\u85cf \u9690\u85cf\u5b58\u50a8\u7684__dict__\u603b\u7ed3\uff1a 1.__\u5f00\u5934\u7684\u5c5e\u6027\uff0c\u5b9e\u73b0\u7684\u9690\u85cf\u4ec5\u4ec5\u53ea\u662f\u4e00\u79cd\u8bed\u6cd5\u610f\u4e49\u4e0a\u7684\u53d8\u5f62\uff0c\u5e76\u4e0d\u4f1a\u771f\u6b63\u9650\u5236\u7c7b\u5916\u90e8\u7684\u8bbf\u95ee 2.\u6539\u53d8\u5f62\u64cd\u4f5c\u53ea\u5728\u7c7b\u5b9a\u4e49\u9636\u6bb5\u68c0\u6d4b\u8bed\u6cd5\u65f6\u53d1\u751f\u4e00\u6b21\uff0c\u7c7b\u5b9a\u4e49\u9636\u6bb5\u7ed3\u675f\u540e\uff08\u5bf9\u8c61\u3001\u7c7b\u7684\u6dfb\u52a0\u4fee\u6539\u7b49\u64cd\u4f5c\uff09\u5b9a\u4e49\u7684\u5c5e\u6027\u4e0d\u4f1a\u53d8\u5f62 3.\u5c5e\u6027\u6dfb\u52a0__\u5f00\u5934\u53ef\u4ee5\u9632\u6b62\u5b50\u7c7b\u8986\u76d6\u7236\u7c7b\u7684\u65b9\u6cd5\u3002\u4e14\u7236\u7c7b\u5185\u53ea\u4f1a\u67e5\u627e\u5230\u81ea\u8eab\u7684\u9690\u85cf\u5c5e\u6027 \u5c01\u88c5\u6570\u636e\u5c5e\u6027\u76ee\u7684\uff1a\u5c06\u6570\u636e\u5c5e\u6027\u9690\u85cf\uff0c\u7c7b\u5916\u90e8\u65e0\u6cd5\u76f4\u63a5\u64cd\u4f5c\u5c5e\u6027\uff0c\u901a\u8fc7\u7c7b\u5185\u90e8\u63a5\u53e3\u95f4\u63a5\u64cd\u4f5c \u63a5\u53e3\u5b9e\u73b0\u5404\u79cd\u903b\u8f91\uff0c\u63a7\u5236\u5916\u90e8\u4f7f\u7528\u63a5\u53e3\u5bf9\u5c5e\u6027\u7684\u64cd\u4f5c \u5c01\u88c5\u65b9\u6cd5\u7684\u76ee\u7684\uff1a\u9694\u79bb\u590d\u6742\u5ea6 ''' class Foo : __x = 111 # _Foo__x __y = 222 # _Foo__y def __init__ ( self , name , age ): self . __name = name self . __age = age def __func ( self ): # _Foo__func pass def get_info ( self ): print ( self . __name , self . __age , self . __x ) # print(self._Foo__name,self._Foo__age,self._Foo__x) # \u5916\u754c\u65e0\u6cd5\u8c03\u7528\u9690\u85cf\u5c5e\u6027 print ( Foo . __x ) print ( Foo . __func ) # \u67e5\u770b\u7c7b\u540d\u79f0\u7a7a\u95f4\uff0c\u53d1\u73b0\u5c5e\u6027\u540d\u79f0\u5728\u5b9a\u4e49\u68c0\u6d4b\u9636\u6bb5\u4fee\u6539 print ( Foo . __dict__ ) # \u4ecd\u7136\u53ef\u4ee5\u8c03\u7528\u4fee\u6539\u540e\u540d\u5b57\u7684\u5c5e\u6027\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 print ( Foo . _Foo__x ) print ( Foo . _Foo__y ) # \u5728\u7c7b\u5b9a\u4e49\u68c0\u6d4b\u9636\u6bb5\u4e4b\u540e\u5b9a\u4e49\u7684\u5c5e\u6027\uff0c\u4e0d\u88ab\u4fee\u6539\u5c31\u653e\u5165\u7a7a\u95f4 Foo . __z = 333 print ( Foo . __dict__ ) print ( Foo . __z ) # \u5bf9\u8c61\u4e2d\u4e5f\u4f1a\u4fee\u6539\u5bf9\u5e94\u7684\u9690\u85cf\u5c5e\u6027 obj = Foo ( '123' , 18 ) print ( obj . __dict__ ) print ( obj . __name ) print ( obj . __age ) obj . get_info () # \u5bf9\u8c61\u521b\u5efa\u4e4b\u540e\uff0c\u65b0\u5b9a\u4e49\u7684\u5c5e\u6027\uff0c\u4e0d\u4f1a\u88ab\u4fee\u6539 obj . __sex = 'male' print ( obj . __dict__ ) print ( obj . __sex ) # ------------------------------------------- # \u5c01\u88c5\u6570\u636e\u5c5e\u6027\u7684\u76ee\u7684\uff1a # \u901a\u8fc7\u63a5\u53e3\uff0c\u5b9e\u73b0\u63a7\u5236\u518d\u95f4\u63a5\u4fee\u6539\u79c1\u6709\u7c7b\u578b class People : def __init__ ( self , name , age ): self . __name = name self . __age = age def get_info ( self ): print ( self . __name , self . __age ) def set_info ( self , name , age ): if type ( name ) is not str : print ( 'name type error!' ) return if type ( age ) is not int : print ( 'age type error' ) return self . __name = name self . __age = age # \u521b\u5efa\u5bf9\u8c61 obj = People ( 'lin' , 12 ) obj . get_info () # \u4f7f\u7528\u63a5\u53e3\u4f5c\u4e3a\u63a7\u5236\u7528\u6237\u8f93\u5165\u7684\u5224\u65ad\uff0c\u8fbe\u5230\u4e0d\u5f71\u54cd\u9690\u85cf\u5c5e\u6027\u7684\u4f5c\u7528 obj . set_info ( 18 , 'LIN' ) obj . set_info ( 'LIN' , '18' ) # \u6210\u529f\u4fee\u6539\u5bf9\u8c61 obj . set_info ( 'LIN' , 18 ) obj . get_info () # -------------------- ''' \u7279\u6027\uff1a\u901a\u8fc7\u5b58\u53d6\u65b9\u6cd5\u5b58\u53d6\u7684\u5c5e\u6027\u79f0\u4e4b\u4e3a\u7279\u6027 property\u88c5\u9970\u5668\uff1a\u4f7f\u7c7b\u5185\u7684\u51fd\u6570\u5c5e\u6027\u4f2a\u88c5\u6210\u6570\u636e\u5c5e\u6027 \u88abproperty\u88c5\u662f\u7684\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528@xxx.setter\u548c@xxx.deleter\u8fdb\u884cset\u3001del\u64cd\u4f5c \u6ce8\uff1a\u4ec5\u53ef\u4f7f\u7528\u4e0e\u65b0\u5f0f\u7c7b ''' class People1 : def __init__ ( self , name , weight , height ): self . __name = name self . __weight = weight self . __height = height @property def bmi ( self ): return self . __weight / ( self . __height ** 2 ) # \u51e1\u662f\u88abproperty\u88c5\u9970\u8fc7\u7684\u51fd\u6570\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d.setter\u4f5c\u4e3a\u88c5\u9970\u5668\uff0c\u8ba9\u79c1\u6709\u5c5e\u6027\u53ef\u4ee5\u88ab\u4fee\u6539 @bmi.setter def bmi ( self , obj ): self . __name = obj @bmi.deleter def bmi ( self ): del self . __name p1 = People1 ( 'p1' , 75 , 1.85 ) print ( p1 . bmi )","title":"\u66f4\u52a0\u8d85\u8be6\u7ec6\u7684\u89e3\u91caPython\u7684\u5c01\u88c5,\u7ee7\u627f,\u591a\u6001"},{"location":"009-13--python\u63d0\u9ad8-2/","text":"13.1. \u591a\u7ee7\u627f\u4ee5\u53caMRO\u987a\u5e8f \u00b6 \u591a\u7ee7\u627f\u4ee5\u53caMRO\u987a\u5e8f \u00b6 1. \u5355\u72ec\u8c03\u7528\u7236\u7c7b\u7684\u65b9\u6cd5 \u00b6 # coding=utf-8 print ( \"******\u591a\u7ee7\u627f\u4f7f\u7528\u7c7b\u540d.__init__ \u53d1\u751f\u7684\u72b6\u6001******\" ) class Parent ( object ): def __init__ ( self , name ): print ( 'parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . name = name print ( 'parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son1 ( Parent ): def __init__ ( self , name , age ): print ( 'Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . age = age Parent . __init__ ( self , name ) print ( 'Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son2 ( Parent ): def __init__ ( self , name , gender ): print ( 'Son2\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . gender = gender Parent . __init__ ( self , name ) print ( 'Son2\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Grandson ( Son1 , Son2 ): def __init__ ( self , name , age , gender ): print ( 'Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) Son1 . __init__ ( self , name , age ) # \u5355\u72ec\u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5 Son2 . __init__ ( self , name , gender ) print ( 'Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) gs = Grandson ( 'grandson' , 12 , '\u7537' ) print ( '\u59d3\u540d\uff1a' , gs . name ) print ( '\u5e74\u9f84\uff1a' , gs . age ) print ( '\u6027\u522b\uff1a' , gs . gender ) print ( \"******\u591a\u7ee7\u627f\u4f7f\u7528\u7c7b\u540d.__init__ \u53d1\u751f\u7684\u72b6\u6001****** \\n\\n \" ) \u8fd0\u884c\u7ed3\u679c: ****** \u591a\u7ee7\u627f\u4f7f\u7528\u7c7b\u540d . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son2\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 #\u88ab\u7ee7\u627f\u4e86\u4e24\u6b21 parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son2\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 \u59d3\u540d\uff1a grandson \u5e74\u9f84\uff1a 12 \u6027\u522b\uff1a \u7537 ****** \u591a\u7ee7\u627f\u4f7f\u7528\u7c7b\u540d . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** python \u662f\u52a8\u6001\u7c7b\u578b\u7684\u8bed\u8a00\u56e0\u6b64\u6ca1\u6709\u65b9\u6cd5\u7684\u91cd\u8f7d\u53ea\u6709\u65b9\u6cd5\u7684\u91cd\u5199 2. \u591a\u7ee7\u627f\u4e2dsuper\u8c03\u7528\u6709\u6240\u7236\u7c7b\u7684\u88ab\u91cd\u5199\u7684\u65b9\u6cd5 \u00b6 print ( \"******\u591a\u7ee7\u627f\u4f7f\u7528super().__init__ \u53d1\u751f\u7684\u72b6\u6001******\" ) class Parent ( object ): def __init__ ( self , name , * args , ** kwargs ): # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . name = name print ( 'parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son1 ( Parent ): def __init__ ( self , name , age , * args , ** kwargs ): # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . age = age super () . __init__ ( name , * args , ** kwargs ) # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son2 ( Parent ): def __init__ ( self , name , gender , * args , ** kwargs ): # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'Son2\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . gender = gender super () . __init__ ( name , * args , ** kwargs ) # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'Son2\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Grandson ( Son1 , Son2 ): def __init__ ( self , name , age , gender ): print ( 'Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) # \u591a\u7ee7\u627f\u65f6\uff0c\u76f8\u5bf9\u4e8e\u4f7f\u7528\u7c7b\u540d.__init__\u65b9\u6cd5\uff0c\u8981\u628a\u6bcf\u4e2a\u7236\u7c7b\u5168\u90e8\u5199\u4e00\u904d # \u800csuper\u53ea\u7528\u4e00\u53e5\u8bdd\uff0c\u6267\u884c\u4e86\u5168\u90e8\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4f55\u591a\u7ee7\u627f\u9700\u8981\u5168\u90e8\u4f20\u53c2\u7684\u4e00\u4e2a\u539f\u56e0 # super(Grandson, self).__init__(name, age, gender) super () . __init__ ( name , age , gender ) print ( 'Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) print ( Grandson . __mro__ ) #C3\u7b97\u6cd5\u83b7\u5f97super\u8c03\u7528\u7236\u7c7b\u65f6\u7684\u987a\u5e8f gs = Grandson ( 'grandson' , 12 , '\u7537' ) print ( '\u59d3\u540d\uff1a' , gs . name ) print ( '\u5e74\u9f84\uff1a' , gs . age ) print ( '\u6027\u522b\uff1a' , gs . gender ) print ( \"******\u591a\u7ee7\u627f\u4f7f\u7528super().__init__ \u53d1\u751f\u7684\u72b6\u6001****** \\n\\n \" ) \u8fd0\u884c\u7ed3\u679c\uff1a ****** \u591a\u7ee7\u627f\u4f7f\u7528 super () . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** ( < class ' __main__ . Grandson '>, <class ' __main__ . Son1 '>, <class ' __main__ . Son2 '>, <class ' __main__ . Parent '>, <class ' object '>) Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 Son2\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 #\u53ea\u88ab\u8c03\u7528\u4e86\u4e00\u6b21 parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son2\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 \u59d3\u540d\uff1a grandson \u5e74\u9f84\uff1a 12 \u6027\u522b\uff1a \u7537 ****** \u591a\u7ee7\u627f\u4f7f\u7528 super () . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** \u6ce8\u610f\uff1a \u00b6 \u4ee5\u4e0a2\u4e2a\u4ee3\u7801\u6267\u884c\u7684\u7ed3\u679c\u4e0d\u540c \u5982\u679c2\u4e2a\u5b50\u7c7b\u4e2d\u90fd\u7ee7\u627f\u4e86\u7236\u7c7b\uff0c\u5f53\u5728\u5b50\u7c7b\u4e2d\u901a\u8fc7\u7236\u7c7b\u540d\u8c03\u7528\u65f6\uff0cparent\u88ab\u6267\u884c\u4e862\u6b21 \u5982\u679c2\u4e2a\u5b50\u7c7b\u4e2d\u90fd\u7ee7\u627f\u4e86\u7236\u7c7b\uff0c\u5f53\u5728\u5b50\u7c7b\u4e2d\u901a\u8fc7super\u8c03\u7528\u65f6\uff0cparent\u88ab\u6267\u884c\u4e861\u6b21 *args, **kwargs \u89e3\u91ca \u00b6 def test2 ( a , b , * args , ** kwargs ): print ( \"------\" ) print ( a ) print ( b ) print ( args ) print ( kwargs ) def test1 ( a , b , * args , ** kwargs ): print ( a ) print ( b ) print ( args ) print ( kwargs ) # test2(a, b, args, kwargs) # \u76f8\u5f53\u4e8etest2(11, 22, (33, 44, 55, 66), {\"name\":\"laowang\", \"age\":18}) # test2(a, b, *args, kwargs) # \u76f8\u5f53\u4e8etest2(11, 22, 33, 44, 55, 66, {\"name\":\"laowang\", \"age\":18}) test2 ( a , b , * args , ** kwargs ) # \u76f8\u5f53\u4e8etest2(11, 22, 33, 44, 55, 66, name=\"laowang\", age=18) #\u6240\u4ee5\u4f20\u9012\u53c2\u6570\u4e5f\u8981\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\u7c7b\u4f3c\u4e8e\u81ea\u52a8\u62c6\u5305 #*args, **kwargs\u4e0d\u4ec5\u662f\u53ef\u4ee5\u653e\u5728\u578b\u53c2\u4e2d,\u4e5f\u662f\u53ef\u4ee5\u653e\u5728\u5b9e\u53c2\u4e2d\u7684 test1 ( 11 , 22 , 33 , 44 , 55 , 66 , name = \"laowang\" , age = 18 ) \u8fd0\u884c\u7ed3\u679c 11 22 ( 33 , 44 , 55 , 66 ) { 'name' : 'laowang' , 'age' : 18 } ------ 11 22 ( 33 , 44 , 55 , 66 ) { 'name' : 'laowang' , 'age' : 18 } 3. \u5355\u7ee7\u627f\u4e2dsuper \u00b6 print ( \"******\u5355\u7ee7\u627f\u4f7f\u7528super().__init__ \u53d1\u751f\u7684\u72b6\u6001******\" ) class Parent ( object ): def __init__ ( self , name ): print ( 'parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . name = name print ( 'parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son1 ( Parent ): def __init__ ( self , name , age ): print ( 'Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . age = age super () . __init__ ( name ) # \u5355\u7ee7\u627f\u4e0d\u80fd\u63d0\u4f9b\u5168\u90e8\u53c2\u6570 print ( 'Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Grandson ( Son1 ): def __init__ ( self , name , age , gender ): print ( 'Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) super () . __init__ ( name , age ) # \u5355\u7ee7\u627f\u4e0d\u80fd\u63d0\u4f9b\u5168\u90e8\u53c2\u6570 print ( 'Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) gs = Grandson ( 'grandson' , 12 , '\u7537' ) print ( '\u59d3\u540d\uff1a' , gs . name ) print ( '\u5e74\u9f84\uff1a' , gs . age ) #print('\u6027\u522b\uff1a', gs.gender) print ( \"******\u5355\u7ee7\u627f\u4f7f\u7528super().__init__ \u53d1\u751f\u7684\u72b6\u6001****** \\n\\n \" ) \u8fd0\u884c\u7ed3\u679c ****** \u5355\u7ee7\u627f\u4f7f\u7528 super () . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 \u59d3\u540d\uff1a grandson \u5e74\u9f84\uff1a 12 ****** \u5355\u7ee7\u627f\u4f7f\u7528 super () . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** \u603b\u7ed3 \u00b6 super(). init__\u76f8\u5bf9\u4e8e\u7c7b\u540d.__init \uff0c\u5728\u5355\u7ee7\u627f\u4e0a\u7528\u6cd5\u57fa\u672c\u65e0\u5dee \u4f46\u5728\u591a\u7ee7\u627f\u4e0a\u6709\u533a\u522b\uff0csuper\u65b9\u6cd5\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u7236\u7c7b\u7684\u65b9\u6cd5\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\uff0c\u800c\u4f7f\u7528\u7c7b\u540d\u7684\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u65b9\u6cd5\u88ab\u6267\u884c\u591a\u6b21\uff0c\u5177\u4f53\u770b\u524d\u9762\u7684\u8f93\u51fa\u7ed3\u679c \u591a\u7ee7\u627f\u65f6\uff0c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u5bf9\u7236\u7c7b\u7684\u4f20\u53c2\u6570\uff0c\u5e94\u8be5\u662f\u7531\u4e8epython\u4e2dsuper\u7684\u7b97\u6cd5\u5bfc\u81f4\u7684\u539f\u56e0\uff0c\u5fc5\u987b\u628a\u53c2\u6570\u5168\u90e8\u4f20\u9012\uff0c\u5426\u5219\u4f1a\u62a5\u9519 \u5355\u7ee7\u627f\u65f6\uff0c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u5219\u4e0d\u80fd\u5168\u90e8\u4f20\u9012\uff0c\u53ea\u80fd\u4f20\u7236\u7c7b\u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570\uff0c\u5426\u5219\u4f1a\u62a5\u9519 \u591a\u7ee7\u627f\u65f6\uff0c\u76f8\u5bf9\u4e8e\u4f7f\u7528\u7c7b\u540d.__init__\u65b9\u6cd5\uff0c\u8981\u628a\u6bcf\u4e2a\u7236\u7c7b\u5168\u90e8\u5199\u4e00\u904d, \u800c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u53ea\u9700\u5199\u4e00\u53e5\u8bdd\u4fbf\u6267\u884c\u4e86\u5168\u90e8\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4f55\u591a\u7ee7\u627f\u9700\u8981\u5168\u90e8\u4f20\u53c2\u7684\u4e00\u4e2a\u539f\u56e0 \u5c0f\u8bd5\u725b\u5200(\u4ee5\u4e0b\u4e3a\u9762\u8bd5\u9898) \u00b6 \u4ee5\u4e0b\u7684\u4ee3\u7801\u7684\u8f93\u51fa\u5c06\u662f\u4ec0\u4e48? \u8bf4\u51fa\u4f60\u7684\u7b54\u6848\u5e76\u89e3\u91ca\u3002 class Parent ( object ): x = 1 class Child1 ( Parent ): pass class Child2 ( Parent ): pass print ( Parent . x , Child1 . x , Child2 . x ) Child1 . x = 2 print ( Parent . x , Child1 . x , Child2 . x ) Parent . x = 3 print ( Parent . x , Child1 . x , Child2 . x ) \u7b54\u6848, \u4ee5\u4e0a\u4ee3\u7801\u7684\u8f93\u51fa\u662f\uff1a 1 1 1 1 2 1 3 2 3 \u4f7f\u4f60\u56f0\u60d1\u6216\u662f\u60ca\u5947\u7684\u662f\u5173\u4e8e\u6700\u540e\u4e00\u884c\u7684\u8f93\u51fa\u662f 3 2 3 \u800c\u4e0d\u662f 3 2 1\u3002\u4e3a\u4ec0\u4e48\u6539\u53d8\u4e86 Parent.x \u7684\u503c\u8fd8\u4f1a\u6539\u53d8 Child2.x \u7684\u503c\uff0c\u4f46\u662f\u540c\u65f6 Child1.x \u503c\u5374\u6ca1\u6709\u6539\u53d8\uff1f \u8fd9\u4e2a\u7b54\u6848\u7684\u5173\u952e\u662f\uff0c\u5728 Python \u4e2d\uff0c\u7c7b\u53d8\u91cf\u5728\u5185\u90e8\u662f\u4f5c\u4e3a\u5b57\u5178\u5904\u7406\u7684\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u7684\u540d\u5b57\u6ca1\u6709\u5728\u5f53\u524d\u7c7b\u7684\u5b57\u5178\u4e2d\u53d1\u73b0\uff0c\u5c06\u641c\u7d22\u7956\u5148\u7c7b\uff08\u6bd4\u5982\u7236\u7c7b\uff09\u76f4\u5230\u88ab\u5f15\u7528\u7684\u53d8\u91cf\u540d\u88ab\u627e\u5230\uff08\u5982\u679c\u8fd9\u4e2a\u88ab\u5f15\u7528\u7684\u53d8\u91cf\u540d\u65e2\u6ca1\u6709\u5728\u81ea\u5df1\u6240\u5728\u7684\u7c7b\u53c8\u6ca1\u6709\u5728\u7956\u5148\u7c7b\u4e2d\u627e\u5230\uff0c\u4f1a\u5f15\u53d1\u4e00\u4e2a AttributeError \u5f02\u5e38 \uff09\u3002 \u56e0\u6b64\uff0c\u5728\u7236\u7c7b\u4e2d\u8bbe\u7f6e x = 1 \u4f1a\u4f7f\u5f97\u7c7b\u53d8\u91cf x \u5728\u5f15\u7528\u8be5\u7c7b\u548c\u5176\u4efb\u4f55\u5b50\u7c7b\u4e2d\u7684\u503c\u4e3a 1\u3002\u8fd9\u5c31\u662f\u56e0\u4e3a\u7b2c\u4e00\u4e2a print \u8bed\u53e5\u7684\u8f93\u51fa\u662f 1 1 1\u3002 \u968f\u540e\uff0c\u5982\u679c\u4efb\u4f55\u5b83\u7684\u5b50\u7c7b\u91cd\u5199\u4e86\u8be5\u503c\uff08\u4f8b\u5982\uff0c\u6211\u4eec\u6267\u884c\u8bed\u53e5 Child1.x = 2\uff09\uff0c\u7136\u540e\uff0c\u8be5\u503c\u4ec5\u4ec5\u5728\u5b50\u7c7b\u4e2d\u88ab\u6539\u53d8\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7b2c\u4e8c\u4e2a print \u8bed\u53e5\u7684\u8f93\u51fa\u662f 1 2 1\u3002 \u6700\u540e\uff0c\u5982\u679c\u8be5\u503c\u5728\u7236\u7c7b\u4e2d\u88ab\u6539\u53d8\uff08\u4f8b\u5982\uff0c\u6211\u4eec\u6267\u884c\u8bed\u53e5 Parent.x = 3\uff09\uff0c\u8fd9\u4e2a\u6539\u53d8\u4f1a\u5f71\u54cd\u5230\u4efb\u4f55\u672a\u91cd\u5199\u8be5\u503c\u7684\u5b50\u7c7b\u5f53\u4e2d\u7684\u503c\uff08\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\u88ab\u5f71\u54cd\u7684\u5b50\u7c7b\u662f Child2\uff09\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7b2c\u4e09\u4e2a print \u8f93\u51fa\u662f 3 2 3\u3002 13.2 \u518d\u8bba\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5 \u00b6 \u518d\u8bba\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5 \u00b6 1. \u7c7b\u5c5e\u6027\u3001\u5b9e\u4f8b\u5c5e\u6027 \u00b6 \u5b83\u4eec\u5728\u5b9a\u4e49\u548c\u4f7f\u7528\u4e2d\u6709\u6240\u533a\u522b\uff0c\u800c\u6700\u672c\u8d28\u7684\u533a\u522b\u662f\u5185\u5b58\u4e2d\u4fdd\u5b58\u7684\u4f4d\u7f6e\u4e0d\u540c\uff0c \u5b9e\u4f8b\u5c5e\u6027\u5c5e\u4e8e\u5bf9\u8c61 \u7c7b\u5c5e\u6027\u5c5e\u4e8e\u7c7b class Province ( object ): # \u7c7b\u5c5e\u6027 country = '\u4e2d\u56fd' def __init__ ( self , name ): # \u5b9e\u4f8b\u5c5e\u6027 self . name = name # \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61 obj = Province ( '\u5c71\u4e1c\u7701' ) # \u76f4\u63a5\u8bbf\u95ee\u5b9e\u4f8b\u5c5e\u6027 print ( obj . name ) # \u76f4\u63a5\u8bbf\u95ee\u7c7b\u5c5e\u6027 Province . country \u7531\u4e0a\u8ff0\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\u3010\u5b9e\u4f8b\u5c5e\u6027\u9700\u8981\u901a\u8fc7\u5bf9\u8c61\u6765\u8bbf\u95ee\u3011\u3010\u7c7b\u5c5e\u6027\u901a\u8fc7\u7c7b\u8bbf\u95ee\u3011\uff0c\u5728\u4f7f\u7528\u4e0a\u53ef\u4ee5\u770b\u51fa\u5b9e\u4f8b\u5c5e\u6027\u548c\u7c7b\u5c5e\u6027\u7684\u5f52\u5c5e\u662f\u4e0d\u540c\u7684\u3002 \u5176\u5728\u5185\u5bb9\u7684\u5b58\u50a8\u65b9\u5f0f\u7c7b\u4f3c\u5982\u4e0b\u56fe\uff1a \u7531\u4e0a\u56fe\u770b\u51fa\uff1a \u7c7b\u5c5e\u6027\u5728\u5185\u5b58\u4e2d\u53ea\u4fdd\u5b58\u4e00\u4efd \u5b9e\u4f8b\u5c5e\u6027\u5728\u6bcf\u4e2a\u5bf9\u8c61\u4e2d\u90fd\u8981\u4fdd\u5b58\u4e00\u4efd \u5e94\u7528\u573a\u666f\uff1a \u00b6 \u901a\u8fc7\u7c7b\u521b\u5efa\u5b9e\u4f8b\u5bf9\u8c61\u65f6\uff0c\u5982\u679c\u6bcf\u4e2a\u5bf9\u8c61\u9700\u8981\u5177\u6709\u76f8\u540c\u540d\u5b57\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u5c31\u4f7f\u7528\u7c7b\u5c5e\u6027\uff0c\u7528\u4e00\u4efd\u65e2\u53ef 2. \u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5 \u00b6 \u65b9\u6cd5\u5305\u62ec\uff1a\u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\uff0c\u4e09\u79cd\u65b9\u6cd5\u5728\u5185\u5b58\u4e2d\u90fd\u5f52\u5c5e\u4e8e\u7c7b\uff0c\u533a\u522b\u5728\u4e8e\u8c03\u7528\u65b9\u5f0f\u4e0d\u540c\u3002 \u5b9e\u4f8b\u65b9\u6cd5\uff1a\u7531\u5bf9\u8c61\u8c03\u7528\uff1b\u81f3\u5c11\u4e00\u4e2aself\u53c2\u6570\uff1b\u6267\u884c\u5b9e\u4f8b\u65b9\u6cd5\u65f6\uff0c\u81ea\u52a8\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u5bf9\u8c61\u8d4b\u503c\u7ed9self\uff1b \u7c7b\u65b9\u6cd5\uff1a\u7531\u7c7b\u8c03\u7528\uff1b \u81f3\u5c11\u4e00\u4e2acls\u53c2\u6570\uff1b\u6267\u884c\u7c7b\u65b9\u6cd5\u65f6\uff0c\u81ea\u52a8\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u7c7b\u8d4b\u503c\u7ed9cls\uff1b \u9759\u6001\u65b9\u6cd5\uff1a\u7531\u7c7b\u8c03\u7528\uff1b\u65e0\u9ed8\u8ba4\u53c2\u6570\uff1b #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" Created on Thu Aug 8 22:52:19 2019 @author: zzh \"\"\" class Foo ( object ): def __init__ ( self , name ): self . name = name def ord_func ( self ): \"\"\" \u5b9a\u4e49\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u81f3\u5c11\u6709\u4e00\u4e2aself\u53c2\u6570 \"\"\" # print(self.name) print ( '\u5b9e\u4f8b\u65b9\u6cd5' ) @classmethod def class_func ( cls ): \"\"\" \u5b9a\u4e49\u7c7b\u65b9\u6cd5\uff0c\u81f3\u5c11\u6709\u4e00\u4e2acls\u53c2\u6570 \"\"\" print ( '\u7c7b\u65b9\u6cd5' ) @staticmethod def static_func (): #(\u4e3b\u8981\u662f\u9632\u6b62\u51fa\u73b0\u53c8\u6709\u7c7b\u53c8\u6709\u7c7b\u5916\u7684\u51fd\u6570\u51fa\u73b0) \"\"\" \u5b9a\u4e49\u9759\u6001\u65b9\u6cd5 \uff0c\u65e0\u9ed8\u8ba4\u53c2\u6570\"\"\" print ( '\u9759\u6001\u65b9\u6cd5' ) f = Foo ( \"\u4e2d\u56fd\" ) # \u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 f . ord_func () # \u8c03\u7528\u7c7b\u65b9\u6cd5 Foo . class_func () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5 Foo . static_func () \u8fd0\u884c\u7ed3\u679c \u5b9e\u4f8b\u65b9\u6cd5 \u7c7b\u65b9\u6cd5 \u9759\u6001\u65b9\u6cd5 \u5bf9\u6bd4 \u00b6 \u76f8\u540c\u70b9\uff1a\u5bf9\u4e8e\u6240\u6709\u7684\u65b9\u6cd5\u800c\u8a00\uff0c\u5747\u5c5e\u4e8e\u7c7b\uff0c\u6240\u4ee5 \u5728\u5185\u5b58\u4e2d\u4e5f\u53ea\u4fdd\u5b58\u4e00\u4efd \u4e0d\u540c\u70b9\uff1a\u65b9\u6cd5\u8c03\u7528\u8005\u4e0d\u540c\u3001\u8c03\u7528\u65b9\u6cd5\u65f6\u81ea\u52a8\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u540c\u3002 \u6ce8\u610f: \u7c7b\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528\u7c7b\u5c5e\u6027\u53ca\u7c7b\u65b9\u6cd5,\u5b9e\u4f8b\u5bf9\u8c61\u4e09\u7c7b\u90fd\u53ef\u8fdb\u884c\u8c03\u7528. property\u5c5e\u6027 \u00b6 1. \u4ec0\u4e48\u662fproperty\u5c5e\u6027 \u00b6 \u4e00\u79cd\u7528\u8d77\u6765\u50cf\u662f\u4f7f\u7528\u7684\u5b9e\u4f8b\u5c5e\u6027\u4e00\u6837\u7684\u7279\u6b8a\u5c5e\u6027\uff0c\u53ef\u4ee5\u5bf9\u5e94\u4e8e\u67d0\u4e2a\u65b9\u6cd5(\u4e0d\u7528\u5bf9\u8fd9\u4e2a\u65b9\u6cd5\u52a0\u62ec\u53f7) # ############### \u5b9a\u4e49 ############### class Foo : def func ( self ): pass # \u5b9a\u4e49property\u5c5e\u6027 @property def prop ( self ): pass # ############### \u8c03\u7528 ############### foo_obj = Foo () foo_obj . func () # \u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 foo_obj . prop # \u8c03\u7528property\u5c5e\u6027 property\u5c5e\u6027\u7684\u5b9a\u4e49\u548c\u8c03\u7528\u8981\u6ce8\u610f\u4e00\u4e0b\u51e0\u70b9\uff1a \u00b6 \u5b9a\u4e49\u65f6\uff0c\u5728\u5b9e\u4f8b\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0 @property \u88c5\u9970\u5668\uff1b\u5e76\u4e14\u4ec5\u6709\u4e00\u4e2aself\u53c2\u6570 \u8c03\u7528\u65f6\uff0c\u65e0\u9700\u62ec\u53f7 \u65b9\u6cd5\uff1a foo_obj . func () property\u5c5e\u6027 \uff1a foo_obj . prop 2. \u7b80\u5355\u7684\u5b9e\u4f8b \u00b6 \u5bf9\u4e8e\u4eac\u4e1c\u5546\u57ce\u4e2d\u663e\u793a\u7535\u8111\u4e3b\u673a\u7684\u5217\u8868\u9875\u9762\uff0c\u6bcf\u6b21\u8bf7\u6c42\u4e0d\u53ef\u80fd\u628a\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u663e\u793a\u5230\u9875\u9762\u4e0a\uff0c\u800c\u662f\u901a\u8fc7\u5206\u9875\u7684\u529f\u80fd\u5c40\u90e8\u663e\u793a\uff0c\u6240\u4ee5\u5728\u5411\u6570\u636e\u5e93\u4e2d\u8bf7\u6c42\u6570\u636e\u65f6\u5c31\u8981\u663e\u793a\u7684\u6307\u5b9a\u83b7\u53d6\u4ece\u7b2cm\u6761\u5230\u7b2cn\u6761\u7684\u6240\u6709\u6570\u636e \u8fd9\u4e2a\u5206\u9875\u7684\u529f\u80fd\u5305\u62ec\uff1a \u6839\u636e\u7528\u6237\u8bf7\u6c42\u7684\u5f53\u524d\u9875\u548c\u603b\u6570\u636e\u6761\u6570\u8ba1\u7b97\u51fa m \u548c n \u6839\u636em \u548c n \u53bb\u6570\u636e\u5e93\u4e2d\u8bf7\u6c42\u6570\u636e #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" Created on Thu Aug 8 22:52:19 2019 @author: zzh \"\"\" # ############### \u5b9a\u4e49 ############### class Pager : def __init__ ( self , current_page ): # \u7528\u6237\u5f53\u524d\u8bf7\u6c42\u7684\u9875\u7801\uff08\u7b2c\u4e00\u9875\u3001\u7b2c\u4e8c\u9875...\uff09 self . current_page = current_page # \u6bcf\u9875\u9ed8\u8ba4\u663e\u793a10\u6761\u6570\u636e self . per_items = 10 @property def start ( self ): val = ( self . current_page - 1 ) * self . per_items return val @property def end ( self ): val = self . current_page * self . per_items return val if __name__ == \"__main__\" : # ############### \u8c03\u7528 ############### p = Pager ( 1 ) print ( p . start ) # \u5c31\u662f\u8d77\u59cb\u503c\uff0c\u5373\uff1am print ( p . end ) # \u5c31\u662f\u7ed3\u675f\u503c\uff0c\u5373\uff1an p = Pager ( 100 ) print ( p . start ) # \u5c31\u662f\u8d77\u59cb\u503c\uff0c\u5373\uff1am print ( p . end ) # \u5c31\u662f\u7ed3\u675f\u503c\uff0c\u5373\uff1an \u6267\u884c\u7ed3\u679c 0 10 990 1000 \u4ece\u4e0a\u8ff0\u53ef\u89c1 \u00b6 Python\u7684property\u5c5e\u6027\u7684\u529f\u80fd\u662f\uff1aproperty\u5c5e\u6027\u5185\u90e8\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u903b\u8f91\u8ba1\u7b97\uff0c\u6700\u7ec8\u5c06\u8ba1\u7b97\u7ed3\u679c\u8fd4\u56de\u3002(\u590d\u6742\u7684\u8ba1\u7b97\u5c01\u88c5\u5230\u65b9\u6cd5\u91cc\u8fdb\u884c\u8ba1\u7b97,\u4f46\u662f\u8c03\u7528\u7684\u65f6\u5019\u4f7f\u7528\u5c5e\u6027\u8fdb\u884c\u8c03\u7528.\u8fd9\u662f\u5c01\u88c5\u7684\u597d\u5904,\u800c\u4e14\u6bd4\u4f7f\u7528\u65b9\u6cd5\u7684\u597d\u5904\u662f\u4e0d\u7528\u8003\u8651\u4f20\u9012\u51e0\u4e2a\u53c2\u6570,\u8fd9\u6837\u4f1a\u65b9\u4fbf\u5f88\u591a) 3. property\u5c5e\u6027\u7684\u6709\u4e24\u79cd\u65b9\u5f0f \u00b6 \u88c5\u9970\u5668 \u5373\uff1a\u5728\u65b9\u6cd5\u4e0a\u5e94\u7528\u88c5\u9970\u5668 \u7c7b\u5c5e\u6027 \u5373\uff1a\u5728\u7c7b\u4e2d\u5b9a\u4e49\u503c\u4e3aproperty\u5bf9\u8c61\u7684\u7c7b\u5c5e\u6027 3.1 \u88c5\u9970\u5668\u65b9\u5f0f \u00b6 \u5728\u7c7b\u7684\u5b9e\u4f8b\u65b9\u6cd5\u4e0a\u5e94\u7528@property\u88c5\u9970\u5668 Python\u4e2d\u7684\u7c7b\u6709 \u7ecf\u5178\u7c7b \u548c \u65b0\u5f0f\u7c7b \uff0c \u65b0\u5f0f\u7c7b \u7684\u5c5e\u6027\u6bd4 \u7ecf\u5178\u7c7b \u7684\u5c5e\u6027\u4e30\u5bcc\u3002\uff08 \u5982\u679c\u7c7b\u7ee7object\uff0c\u90a3\u4e48\u8be5\u7c7b\u662f\u65b0\u5f0f\u7c7b \uff09 \u7ecf\u5178\u7c7b\uff0c\u5177\u6709\u4e00\u79cd@property\u88c5\u9970\u5668 \u00b6 # ############### \u5b9a\u4e49 ############### class Goods : @property def price ( self ): return \"laowang\" # ############### \u8c03\u7528 ############### obj = Goods () result = obj . price # \u81ea\u52a8\u6267\u884c @property \u4fee\u9970\u7684 price \u65b9\u6cd5\uff0c\u5e76\u83b7\u53d6\u65b9\u6cd5\u7684\u8fd4\u56de\u503c print ( result ) \u65b0\u5f0f\u7c7b\uff0c\u5177\u6709\u4e09\u79cd@property\u88c5\u9970\u5668 \u00b6 #coding=utf-8 # ############### \u5b9a\u4e49 ############### class Goods : \"\"\"python3\u4e2d\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b \u4ee5python2\u30013\u6267\u884c\u6b64\u7a0b\u5e8f\u7684\u7ed3\u679c\u4e0d\u540c\uff0c\u56e0\u4e3a\u53ea\u6709\u5728python3\u4e2d\u624d\u6709@xxx.setter @xxx.deleter \"\"\" @property def price ( self ): print ( '@property' ) @price.setter def price ( self , value ): print ( '@price.setter' ) @price.deleter def price ( self ): print ( '@price.deleter' ) # ############### \u8c03\u7528 ############### obj = Goods () obj . price # \u81ea\u52a8\u6267\u884c @property \u4fee\u9970\u7684 price \u65b9\u6cd5\uff0c\u5e76\u83b7\u53d6\u65b9\u6cd5\u7684\u8fd4\u56de\u503c obj . price = 123 # \u81ea\u52a8\u6267\u884c @price.setter \u4fee\u9970\u7684 price \u65b9\u6cd5\uff0c\u5e76\u5c06 123 \u8d4b\u503c\u7ed9\u65b9\u6cd5\u7684\u53c2\u6570 del obj . price # \u81ea\u52a8\u6267\u884c @price.deleter \u4fee\u9970\u7684 price \u65b9\u6cd5 \u6ce8\u610f \u00b6 \u7ecf\u5178\u7c7b\u4e2d\u7684\u5c5e\u6027\u53ea\u6709\u4e00\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u5176\u5bf9\u5e94\u88ab @property \u4fee\u9970\u7684\u65b9\u6cd5 \u65b0\u5f0f\u7c7b\u4e2d\u7684\u5c5e\u6027\u6709\u4e09\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u5e76\u5206\u522b\u5bf9\u5e94\u4e86\u4e09\u4e2a\u88ab@property\u3001@\u65b9\u6cd5\u540d.setter\u3001@\u65b9\u6cd5\u540d.deleter\u4fee\u9970\u7684\u65b9\u6cd5 \u7531\u4e8e\u65b0\u5f0f\u7c7b\u4e2d\u5177\u6709\u4e09\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u51e0\u4e2a\u5c5e\u6027\u7684\u8bbf\u95ee\u7279\u70b9\uff0c\u5206\u522b\u5c06\u4e09\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5c5e\u6027\uff1a\u83b7\u53d6\u3001\u4fee\u6539\u3001\u5220\u9664(\u4e3b\u8981\u5c31\u662f\u4e3a\u4e86\u7528\u7684\u65f6\u5019\u7b80\u4ecb) class Goods ( object ): def __init__ ( self ): # \u539f\u4ef7 self . original_price = 100 # \u6298\u6263 self . discount = 0.8 @property def price ( self ): # \u5b9e\u9645\u4ef7\u683c = \u539f\u4ef7 * \u6298\u6263 new_price = self . original_price * self . discount return new_price @price.setter def price ( self , value ): self . original_price = value #\u53ef\u4ee5\u4f5c\u4e00\u4e9b\u4fee\u6539 @price.deleter def price ( self ): del self . original_price #\u5220\u9664\u5b9e\u4f8b\u5c5e\u6027 obj = Goods () obj . price # \u83b7\u53d6\u5546\u54c1\u4ef7\u683c obj . price = 200 # \u4fee\u6539\u5546\u54c1\u539f\u4ef7 del obj . price # \u5220\u9664\u5546\u54c1\u539f\u4ef7 \u4e00\u822c\u7528\u7684\u5c31\u662f\u83b7\u53d6\u6839\u8bbe\u7f6e\u7684\u5c5e\u6027 @property @price.setter(\u8bbe\u7f6e) 3.2 \u7c7b\u5c5e\u6027\u65b9\u5f0f\uff0c\u521b\u5efa\u503c\u4e3aproperty\u5bf9\u8c61\u7684\u7c7b\u5c5e\u6027 \u00b6 \u5f53\u4f7f\u7528\u7c7b\u5c5e\u6027\u7684\u65b9\u5f0f\u521b\u5efaproperty\u5c5e\u6027\u65f6\uff0c \u7ecf\u5178\u7c7b \u548c \u65b0\u5f0f\u7c7b \u65e0\u533a\u522b class Foo : def get_bar ( self ): return 'laowang' BAR = property ( get_bar ) #\u76f8\u5f53\u4e8e\u7c7b\u5c5e\u6027,\u53ea\u4e0d\u8fc7\u662f\u5bf9\u8c61\u65b9\u6cd5\u7684\u8fd4\u56de\u503c obj = Foo () reuslt = obj . BAR # \u81ea\u52a8\u8c03\u7528get_bar\u65b9\u6cd5\uff0c\u5e76\u83b7\u53d6\u65b9\u6cd5\u7684\u8fd4\u56de\u503c print ( reuslt ) property\u65b9\u6cd5\u4e2d\u6709\u4e2a\u56db\u4e2a\u53c2\u6570 \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 \u5bf9\u8c61.\u5c5e\u6027 \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 \u5bf9\u8c61.\u5c5e\u6027 \uff1d XXX \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 del \u5bf9\u8c61.\u5c5e\u6027 \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u4e32\uff0c\u8c03\u7528 \u5bf9\u8c61.\u5c5e\u6027. doc \uff0c\u6b64\u53c2\u6570\u662f\u8be5\u5c5e\u6027\u7684\u63cf\u8ff0\u4fe1\u606f #coding=utf-8 class Foo ( object ): def get_bar ( self ): print ( \"getter...\" ) return 'laowang' def set_bar ( self , value ): \"\"\"\u5fc5\u987b\u4e24\u4e2a\u53c2\u6570\"\"\" print ( \"setter...\" ) return 'set value' + value def del_bar ( self ): print ( \"deleter...\" ) return 'laowang' BAR = property ( get_bar , set_bar , del_bar , \"description...\" ) obj = Foo () obj . BAR # \u81ea\u52a8\u8c03\u7528\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\uff1aget_bar obj . BAR = \"alex\" # \u81ea\u52a8\u8c03\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\uff1aset_bar\u65b9\u6cd5\uff0c\u5e76\u5c06\u201calex\u201d\u5f53\u4f5c\u53c2\u6570\u4f20\u5165 desc = Foo . BAR . __doc__ # \u81ea\u52a8\u83b7\u53d6\u7b2c\u56db\u4e2a\u53c2\u6570\u4e2d\u8bbe\u7f6e\u7684\u503c\uff1adescription... print ( desc ) del obj . BAR # \u81ea\u52a8\u8c03\u7528\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\uff1adel_bar\u65b9\u6cd5 \u7531\u4e8e \u7c7b\u5c5e\u6027\u65b9\u5f0f \u521b\u5efaproperty\u5c5e\u6027\u5177\u67093\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u51e0\u4e2a\u5c5e\u6027\u7684\u8bbf\u95ee\u7279\u70b9\uff0c\u5206\u522b\u5c06\u4e09\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5c5e\u6027\uff1a\u83b7\u53d6\u3001\u4fee\u6539\u3001\u5220\u9664 class Goods ( object ): def __init__ ( self ): # \u539f\u4ef7 self . original_price = 100 # \u6298\u6263 self . discount = 0.8 def get_price ( self ): # \u5b9e\u9645\u4ef7\u683c = \u539f\u4ef7 * \u6298\u6263 new_price = self . original_price * self . discount return new_price def set_price ( self , value ): self . original_price = value def del_price ( self ): del self . original_price PRICE = property ( get_price , set_price , del_price , '\u4ef7\u683c\u5c5e\u6027\u63cf\u8ff0...' ) obj = Goods () obj . PRICE # \u83b7\u53d6\u5546\u54c1\u4ef7\u683c obj . PRICE = 200 # \u4fee\u6539\u5546\u54c1\u539f\u4ef7 del obj . PRICE # \u5220\u9664\u5546\u54c1\u539f\u4ef7 4. Django\u6846\u67b6\u4e2d\u5e94\u7528\u4e86property\u5c5e\u6027\uff08\u4e86\u89e3\uff09 \u00b6 WEB\u6846\u67b6 Django \u7684\u89c6\u56fe\u4e2d request.POST \u5c31\u662f\u4f7f\u7528\u7684\u7c7b\u5c5e\u6027\u7684\u65b9\u5f0f\u521b\u5efa\u7684\u5c5e\u6027 class WSGIRequest ( http . HttpRequest ): def __init__ ( self , environ ): script_name = get_script_name ( environ ) path_info = get_path_info ( environ ) if not path_info : # Sometimes PATH_INFO exists, but is empty (e.g. accessing # the SCRIPT_NAME URL without a trailing slash). We really need to # operate as if they'd requested '/'. Not amazingly nice to force # the path like this, but should be harmless. path_info = '/' self . environ = environ self . path_info = path_info self . path = ' %s / %s ' % ( script_name . rstrip ( '/' ), path_info . lstrip ( '/' )) self . META = environ self . META [ 'PATH_INFO' ] = path_info self . META [ 'SCRIPT_NAME' ] = script_name self . method = environ [ 'REQUEST_METHOD' ] . upper () _ , content_params = cgi . parse_header ( environ . get ( 'CONTENT_TYPE' , '' )) if 'charset' in content_params : try : codecs . lookup ( content_params [ 'charset' ]) except LookupError : pass else : self . encoding = content_params [ 'charset' ] self . _post_parse_error = False try : content_length = int ( environ . get ( 'CONTENT_LENGTH' )) except ( ValueError , TypeError ): content_length = 0 self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ], content_length ) self . _read_started = False self . resolver_match = None def _get_scheme ( self ): return self . environ . get ( 'wsgi.url_scheme' ) def _get_request ( self ): warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or ' '`request.POST` instead.' , RemovedInDjango19Warning , 2 ) if not hasattr ( self , '_request' ): self . _request = datastructures . MergeDict ( self . POST , self . GET ) return self . _request @cached_property def GET ( self ): # The WSGI spec says 'QUERY_STRING' may be absent. raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' ) return http . QueryDict ( raw_query_string , encoding = self . _encoding ) # ############### \u770b\u8fd9\u91cc\u770b\u8fd9\u91cc ############### def _get_post ( self ): if not hasattr ( self , '_post' ): self . _load_post_and_files () return self . _post # ############### \u770b\u8fd9\u91cc\u770b\u8fd9\u91cc ############### def _set_post ( self , post ): self . _post = post @cached_property def COOKIES ( self ): raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' ) return http . parse_cookie ( raw_cookie ) def _get_files ( self ): if not hasattr ( self , '_files' ): self . _load_post_and_files () return self . _files # ############### \u770b\u8fd9\u91cc\u770b\u8fd9\u91cc ############### POST = property ( _get_post , _set_post ) FILES = property ( _get_files ) REQUEST = property ( _get_request ) \u7efc\u4e0a\u6240\u8ff0: \u00b6 \u5b9a\u4e49property\u5c5e\u6027\u5171\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u5206\u522b\u662f\u3010\u88c5\u9970\u5668\u3011\u548c\u3010\u7c7b\u5c5e\u6027\u3011\uff0c\u800c\u3010\u88c5\u9970\u5668\u3011\u65b9\u5f0f\u9488\u5bf9\u7ecf\u5178\u7c7b\u548c\u65b0\u5f0f\u7c7b\u53c8\u6709\u6240\u4e0d\u540c\u3002 \u901a\u8fc7\u4f7f\u7528property\u5c5e\u6027\uff0c\u80fd\u591f\u7b80\u5316\u8c03\u7528\u8005\u5728\u83b7\u53d6\u6570\u636e\u7684\u6d41\u7a0b 13.4property\u5c5e\u6027-\u5e94\u7528 \u00b6 1. \u79c1\u6709\u5c5e\u6027\u6dfb\u52a0getter\u548csetter\u65b9\u6cd5(python\u4e00\u822c\u662f\u4e0d\u7528\u7684) \u00b6 class Money ( object ): def __init__ ( self ): self . __money = 0 #\u79c1\u6709\u5c5e\u6027 def getMoney ( self ): #get\u65b9\u6cd5 return self . __money def setMoney ( self , value ): #set\u65b9\u6cd5 if isinstance ( value , int ): self . __money = value else : print ( \"error:\u4e0d\u662f\u6574\u578b\u6570\u5b57\" ) 2. \u4f7f\u7528property\u5347\u7ea7getter\u548csetter\u65b9\u6cd5 \u00b6 class Money ( object ): def __init__ ( self ): self . __money = 0 def getMoney ( self ): return self . __money def setMoney ( self , value ): if isinstance ( value , int ): self . __money = value else : print ( \"error:\u4e0d\u662f\u6574\u578b\u6570\u5b57\" ) # \u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\uff0c\u5f53\u5bf9\u8fd9\u4e2amoney\u8bbe\u7f6e\u503c\u65f6\u8c03\u7528setMoney,\u5f53\u83b7\u53d6\u503c\u65f6\u8c03\u7528getMoney money = property ( getMoney , setMoney ) #\u7c7b\u5c5e\u6027 a = Money () a . money = 100 # \u8c03\u7528setMoney\u65b9\u6cd5 print ( a . money ) # \u8c03\u7528getMoney\u65b9\u6cd5 #100 3. \u4f7f\u7528property\u53d6\u4ee3getter\u548csetter\u65b9\u6cd5 \u00b6 \u91cd\u65b0\u5b9e\u73b0\u4e00\u4e2a\u5c5e\u6027\u7684\u8bbe\u7f6e\u548c\u8bfb\u53d6\u65b9\u6cd5,\u53ef\u505a\u8fb9\u754c\u5224\u5b9a class Money ( object ): def __init__ ( self ): self . __money = 0 # \u4f7f\u7528\u88c5\u9970\u5668\u5bf9money\u8fdb\u884c\u88c5\u9970\uff0c\u90a3\u4e48\u4f1a\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a\u53ebmoney\u7684\u5c5e\u6027\uff0c\u5f53\u8c03\u7528\u83b7\u53d6money\u7684\u503c\u65f6\uff0c\u8c03\u7528\u88c5\u9970\u7684\u65b9\u6cd5 @property def money ( self ): return self . __money # \u4f7f\u7528\u88c5\u9970\u5668\u5bf9money\u8fdb\u884c\u88c5\u9970\uff0c\u5f53\u5bf9money\u8bbe\u7f6e\u503c\u65f6\uff0c\u8c03\u7528\u88c5\u9970\u7684\u65b9\u6cd5 @money.setter def money ( self , value ): if isinstance ( value , int ): self . __money = value else : print ( \"error:\u4e0d\u662f\u6574\u578b\u6570\u5b57\" ) a = Money () a . money = 100 print ( a . money ) 13.5 \u9b54\u6cd5\u5c5e\u6027 \u00b6 \u65e0\u8bba\u4eba\u6216\u4e8b\u7269\u5f80\u5f80\u90fd\u6709\u4e0d\u6309\u5957\u8def\u51fa\u724c\u7684\u60c5\u51b5\uff0cPython\u7684\u7c7b\u5c5e\u6027\u4e5f\u662f\u5982\u6b64\uff0c\u5b58\u5728\u7740\u4e00\u4e9b\u5177\u6709\u7279\u6b8a\u542b\u4e49\u7684\u5c5e\u6027\uff0c\u8be6\u60c5\u5982\u4e0b\uff1a 1. __doc__ \u00b6 \u8868\u793a\u7c7b\u7684\u63cf\u8ff0\u4fe1\u606f class Foo : \"\"\" \u63cf\u8ff0\u7c7b\u4fe1\u606f\uff0c\u8fd9\u662f\u7528\u4e8e\u770b\u7247\u7684\u795e\u5947 \"\"\" #\u7c7b\u7684\u63cf\u8ff0\u4fe1\u606f def func ( self ): pass print ( Foo . __doc__ ) \u6267\u884c\u7ed3\u679c \u63cf\u8ff0\u7c7b\u4fe1\u606f\uff0c\u8fd9\u662f\u7528\u4e8e\u770b\u7247\u7684\u795e\u5947 \u4e5f\u53ef\u4ee5\u4f7f\u7528help\u51fd\u6570\u83b7\u5f97\u540c\u6837\u7684\u6548\u679c help ( Foo ) Help on class Foo in module __main__ : class Foo ( builtins . object ) | \u63cf\u8ff0\u7c7b\u4fe1\u606f\uff0c\u8fd9\u662f\u7528\u4e8e\u770b\u7247\u7684\u795e\u5947 | | Methods defined here : | | func ( self ) | | ---------------------------------------------------------------------- | Data descriptors defined here : | | __dict__ | dictionary for instance variables ( if defined ) | | __weakref__ | list of weak references to the object ( if defined ) 2. __module__ \u548c __class__ \u00b6 module \u8868\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u5bf9\u8c61\u5728\u90a3\u4e2a\u6a21\u5757 class \u8868\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u5bf9\u8c61\u7684\u7c7b\u662f\u4ec0\u4e48 test . py # -*- coding:utf-8 -*- class Person ( object ): def __init__ ( self ): self . name = 'laowang' main . py from test import Person obj = Person () print ( obj . __module__ ) # \u8f93\u51fa test \u5373\uff1a\u8f93\u51fa\u6a21\u5757 print ( obj . __class__ ) # \u8f93\u51fa test.Person \u5373\uff1a\u8f93\u51fa\u7c7b \u6267\u884cmain.py test < class ' test . Person '> 3. __init__ \u00b6 \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u901a\u8fc7\u7c7b\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u81ea\u52a8\u89e6\u53d1\u6267\u884c class Person : def __init__ ( self , name ): self . name = name self . age = 18 obj = Person ( 'laowang' ) # \u81ea\u52a8\u6267\u884c\u7c7b\u4e2d\u7684 __init__ \u65b9\u6cd5 4. __del__ \u00b6 \u5f53\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u88ab\u91ca\u653e\u65f6\uff0c\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u3002 \u6ce8\uff1a\u6b64\u65b9\u6cd5\u4e00\u822c\u65e0\u987b\u5b9a\u4e49\uff0c\u56e0\u4e3aPython\u662f\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00\uff0c\u7a0b\u5e8f\u5458\u5728\u4f7f\u7528\u65f6\u65e0\u9700\u5173\u5fc3\u5185\u5b58\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u56e0\u4e3a\u6b64\u5de5\u4f5c\u90fd\u662f\u4ea4\u7ed9Python\u89e3\u91ca\u5668\u6765\u6267\u884c\uff0c\u6240\u4ee5\uff0c __del__ \u7684\u8c03\u7528\u662f\u7531\u89e3\u91ca\u5668\u5728\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u7684\u3002 class Foo : def __del__ ( self ): pass 5. __call__ \u00b6 \u5bf9\u8c61\u540e\u9762\u52a0\u62ec\u53f7\uff0c\u89e6\u53d1\u6267\u884c\u3002 \u6ce8\uff1a __init__ \u65b9\u6cd5\u7684\u6267\u884c\u662f\u7531\u521b\u5efa\u5bf9\u8c61\u89e6\u53d1\u7684\uff0c\u5373\uff1a \u5bf9\u8c61 = \u7c7b\u540d() \uff1b\u800c\u5bf9\u4e8e __call__ \u65b9\u6cd5\u7684\u6267\u884c\u662f\u7531\u5bf9\u8c61\u540e\u52a0\u62ec\u53f7\u89e6\u53d1\u7684\uff0c\u5373\uff1a \u5bf9\u8c61() \u6216\u8005 \u7c7b()() class Foo : def __init__ ( self ): pass def __call__ ( self , * args , ** kwargs ): print ( '__call__' ) print ( \"\u6211\u662fcall\u65b9\u6cd5\" ) obj = Foo () # \u6267\u884c __init__ obj () # \u6267\u884c __call__ \u6267\u884c\u7ed3\u679c __call__ \u6211\u662f call\u65b9\u6cd5 6. __dict__ \u00b6 \u7c7b\u6216\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5c5e\u6027 \u7c7b\u7684\u5b9e\u4f8b\u5c5e\u6027\u5c5e\u4e8e\u5bf9\u8c61\uff1b\u7c7b\u4e2d\u7684\u7c7b\u5c5e\u6027\u548c\u65b9\u6cd5\u7b49\u5c5e\u4e8e\u7c7b\uff0c\u5373\uff1a class Province ( object ): country = 'China' def __init__ ( self , name , count ): self . name = name self . count = count def func ( self , * args , ** kwargs ): print ( 'func' ) # \u83b7\u53d6\u7c7b\u7684\u5c5e\u6027\uff0c\u5373\uff1a\u7c7b\u5c5e\u6027\u3001\u65b9\u6cd5\u3001 print ( Province . __dict__ ) # \u8f93\u51fa\uff1a{'__dict__': <attribute '__dict__' of 'Province' objects>, '__module__': '__main__', 'country': 'China', '__doc__': None, '__weakref__': <attribute '__weakref__' of 'Province' objects>, 'func': <function Province.func at 0x101897950>, '__init__': <function Province.__init__ at 0x1018978c8>} obj1 = Province ( '\u5c71\u4e1c' , 10000 ) print ( obj1 . __dict__ ) # \u83b7\u53d6 \u5bf9\u8c61obj1 \u7684\u5c5e\u6027 # \u8f93\u51fa\uff1a{'count': 10000, 'name': '\u5c71\u4e1c'} obj2 = Province ( '\u5c71\u897f' , 20000 ) print ( obj2 . __dict__ ) # \u83b7\u53d6 \u5bf9\u8c61obj1 \u7684\u5c5e\u6027 # \u8f93\u51fa\uff1a{'count': 20000, 'name': '\u5c71\u897f'} 7. __str__ \u00b6 \u5982\u679c\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86 __str__ \u65b9\u6cd5\uff0c\u90a3\u4e48\u5728\u6253\u5370 \u5bf9\u8c61 \u65f6\uff0c\u9ed8\u8ba4\u8f93\u51fa\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u3002 obj = Foo () # -*- coding: utf-8 -*- #main.py class Foo : def __str__ ( self ): return 'laowang' obj = Foo () print ( obj ) #\u6839\u5bf9\u8c61()\u8fdb\u884c\u533a\u522b # \u8f93\u51fa\uff1alaowang print ( \"\u5bf9\u8c61\u7684\u63cf\u8ff0 % s \" % obj ) #\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e5f\u662f\u53ef\u4ee5\u5f97\u5230\u5bf9\u8c61\u7684str\u63cf\u8ff0\u7684 print ( obj ) #\u6839\u5bf9\u8c61()\u8fdb\u884c\u533a\u522b # \u8f93\u51fa\uff1alaowang \u6267\u884c laowang \u5bf9\u8c61\u7684\u63cf\u8ff0 laowang 8\u3001 __getitem__\u3001__setitem__\u3001__delitem__ \u00b6 \u7528\u4e8e\u7d22\u5f15\u64cd\u4f5c\uff0c\u5982\u5b57\u5178\u3002\u4ee5\u4e0a\u5206\u522b\u8868\u793a\u83b7\u53d6\u3001\u8bbe\u7f6e\u3001\u5220\u9664\u6570\u636e # -*- coding:utf-8 -*- class Foo ( object ): def __getitem__ ( self , key ): print ( '__getitem__' , key ) def __setitem__ ( self , key , value ): print ( '__setitem__' , key , value ) def __delitem__ ( self , key ): print ( '__delitem__' , key ) obj = Foo () result = obj [ 'k1' ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __getitem__ obj [ 'k2' ] = 'laowang' # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __setitem__ del obj [ 'k1' ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __delitem__ 9\u3001 __getslice__\u3001__setslice__\u3001__delslice__ \u00b6 \u8be5\u4e09\u4e2a\u65b9\u6cd5\u7528\u4e8e\u5206\u7247\u64cd\u4f5c\uff0c\u5982\uff1a\u5217\u8868 # -*- coding:utf-8 -*- class Foo ( object ): def __getslice__ ( self , i , j ): print ( '__getslice__' , i , j ) def __setslice__ ( self , i , j , sequence ): print ( '__setslice__' , i , j ) def __delslice__ ( self , i , j ): print ( '__delslice__' , i , j ) obj = Foo () obj [ - 1 : 1 ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __getslice__ obj [ 0 : 1 ] = [ 11 , 22 , 33 , 44 ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __setslice__ del obj [ 0 : 2 ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __delslice__ 13.6 \u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1 \u00b6 \u7ee7\u627f - \u662f\u57fa\u4e8ePython\u4e2d\u7684\u5c5e\u6027\u67e5\u627e(\u5982X.name) \u591a\u6001 - \u5728X.method\u65b9\u6cd5\u4e2d\uff0cmethod\u7684\u610f\u4e49\u53d6\u51b3\u4e8eX\u7684\u7c7b\u578b(\u5b50\u7c7b\u91cd\u5199\u4e86\u7528\u5b57\u7c7b\u7684,\u6ca1\u6709\u91cd\u5199\u7528\u7236\u7c7b\u7684.\u540c\u6837\u662f\u5f00\u8f66,\u7236\u4eb2\u5f00\u5927\u8d27\u8f66,\u513f\u5b50\u5f00\u5c0f\u8d27\u8f66.\u8fd9\u5c31\u662f\u591a\u6001) \u5c01\u88c5 - \u65b9\u6cd5\u548c\u8fd0\u7b97\u7b26\u5b9e\u73b0\u884c\u4e3a\uff0c\u6570\u636e\u9690\u85cf\u9ed8\u8ba4\u662f\u4e00\u79cd\u60ef\u4f8b \u53c2\u8003\u5b9e\u4f8b \u00b6 \u817e\u8baf\u5373\u65f6\u901a\u4fe1\u6a21\u5757,\u521d\u7ea7\u5c01\u88c5 #! /usr/bin/env python # coding: utf-8 import random import time class Message ( object ): def __init__ ( self , msgarr = [], toacc = '' ): self . msgbody = msgarr # \u6b64\u5904\u4e3aMsgDict\u5bf9\u8c61\u5b9e\u4f8b\u7684\u5217\u8868\u6216\u8005\u7a7a\u5217\u8868 self . toacc = toacc # toacc\u4e3a\u5b57\u7b26\u4e32(\u5355\u53d1)\u6216\u8005\u5217\u8868(\u6279\u91cf\u53d1) self . msgrandom = random . randint ( 1 , 1000000000 ) self . msgrequest = { 'To_Account' : toacc , # \u6d88\u606f\u63a5\u6536\u65b9\u8d26\u53f7 'MsgRandom' : self . msgrandom , # \u6d88\u606f\u968f\u673a\u6570\uff0c\u7531\u968f\u673a\u51fd\u6570\u4ea7\u751f 'MsgBody' : [ t . msg for t in msgarr ] } def del_option ( self , option ): if option in ( set ( self . msgrequest ) - set ([ 'To_Account' , 'MsgRandom' , 'MsgBody' ])): self . __dict__ . pop ( option ) self . msgrequest . pop ( option ) def append_msg ( self , msg ): self . msgbody . append ( msg ) self . msgrequest [ 'MsgBody' ] . append ( msg . msg ) def insert_msg ( self , index , msg ): self . msgbody . insert ( index , msg ) self . msgrequest [ 'MsgBody' ] . insert ( msg . msg ) def del_msg ( self , index ): if index in range ( len ( self . msgbody )): del self . msgbody [ index ] del sel . msgrequest [ 'MsgBody' ][ index ] def set_from ( self , fromacc ): # \u6307\u5b9a\u6d88\u606f\u7684\u53d1\u9001\u65b9\uff0c\u9ed8\u8ba4\u4e3a\u670d\u52a1\u5668\u53d1\u9001 self . fromacc = fromacc self . msgrequest [ 'From_Account' ] = fromacc def set_to ( self , toacc ): # \u6307\u5b9a\u6d88\u606f\u7684\u63a5\u6536\u65b9\uff0c\u53ef\u4ee5\u4e3aString(\u5355\u53d1),\u53ef\u4ee5\u4e3aList(\u6279\u91cf\u53d1\u9001) self . toacc = toacc self . msgrequest [ 'To_Account' ] = toacc def refresh_random ( self ): self . msgrandom = random . randint ( 1 , 1000000000 ) self . msgrequest [ 'MsgRandom' ] = self . msgrandom , # \u6d88\u606f\u968f\u673a\u6570\uff0c\u7531\u968f\u673a\u51fd\u6570\u4ea7\u751f def set_sync ( self , sync ): # \u540c\u6b65\u9009\u9879\uff1a1, \u628a\u6d88\u606f\u540c\u6b65\u5230From_Account\u5728\u7ebf\u7ec8\u7aef\u548c\u6f2b\u6e38\u4e0a # 2, \u6d88\u606f\u4e0d\u540c\u6b65\u81f3From_Account # \u82e5\u4e0d\u586b\u5199\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5c06\u6d88\u606f\u540c\u6b65 # \u4ec5\u5728\u5355\u53d1\u5355\u804a\u6d88\u606f\u4e2d\u53ef\u8c03\u7528 self . sync = sync self . msgrequest [ 'SyncOtherMachine' ] = sync def set_timestamp ( self ): # \u8bbe\u7f6e\u6d88\u606f\u65f6\u95f4\u6233\uff0cunix\u65f6\u95f4, \u4ec5\u5728\u5355\u53d1\u5355\u804a\u6d88\u606f\u4e2d\u53ef\u4ee5\u8c03\u7528 self . timestamp = int ( time . time ()) self . msgrequest [ 'MsgTimeStamp' ] = self . timestamp def set_offlinepush ( self , pushflag = 0 , desc = '' , ext = '' , sound = '' ): # \u4ec5\u9002\u7528\u4e8eAPNa\u63a8\u9001\uff0c\u4e0d\u9002\u7528\u4e8e\u5b89\u5353\u5382\u5546\u63a8\u9001 self . msgrequest [ 'OfflinePushInfo' ] = { 'PushFlag' : pushflag , 'Desc' : desc , 'Ext' : ext , 'Sound' : sound } class MsgDict ( object ): def __init__ ( self , msgtype = '' , msgcontent = {}): self . msgtype = msgtype self . msgcontent = msgcontent @property def msg ( self ): return { 'MsgType' : self . msgtype , 'MsgContent' : self . msgcontent } def set_content ( self , content ): self . msgcontent = content class TextMsg ( MsgDict ): def __init__ ( self , text = '' , msgtype = 'TIMTextElem' ): self . text = text content = { 'Text' : text } super ( TextMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_text ( self , text ): self . text = text self . msgcontent [ 'Text' ] = text class LocationMsg ( MsgDict ): def __init__ ( self , desc = '' , latitude = 0 , longitude = 0 , msgtype = 'TIMLocationElem' ): self . desc = desc self . latitude = latitude self . longitude = longitude content = { 'Desc' : desc , # \u5730\u7406\u4f4d\u7f6e\u63cf\u8ff0\u4fe1\u606f, String 'Latitude' : latitude , # \u7eac\u5ea6, Number 'Longitude' : longitude # \u7ecf\u5ea6, Number } super ( LocationMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_desc ( self , desc ): self . desc = desc self . msgcontent [ 'Desc' ] = desc def set_location ( self , latitude , longitude ): self . latitude = latitude self . longitude = longitude self . msgcontent [ 'Latitude' ] = latitude self . msgcontent [ 'Longitude' ] = longitude def set_latitude ( self , latitude ): self . latitude = latitude self . msgcontent [ 'Latitude' ] = latitude def set_longitude ( self , longitude ): self . longitude = longitude self . msgcontent [ 'Longitude' ] = longitude class FaceMsg ( MsgDict ): def __init__ ( self , index = 1 , data = '' , msgtype = 'TIMFaceElem' ): self . index = index self . data = data content = { 'Index' : index , # \u8868\u60c5\u7d22\u5f15\uff0c\u7528\u6237\u81ea\u5b9a\u4e49, Number 'Data' : data # \u989d\u5916\u6570\u636e, String } super ( TextMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_index ( self , index ): self . index = index self . msgcontent [ 'Index' ] = index def set_data ( self , data ): self . data = data self . msgcontent [ 'Data' ] = data class CustomMsg ( MsgDict ): def __init__ ( self , data = '' , desc = '' , ext = '' , sound = '' , msgtype = 'TIMCustomElem' ): self . data = data self . desc = desc self . ext = ext self . sound = sound content = { 'Data' : data , # \u81ea\u5b9a\u4e49\u6d88\u606f\u6570\u636e\u3002\u4e0d\u4f5c\u4e3aAPNS\u7684payload\u4e2d\u5b57\u6bb5\u4e0b\u53d1\uff0c\u6545\u4ecepayload\u4e2d\u65e0\u6cd5\u83b7\u53d6Data\u5b57\u6bb5, String 'Desc' : desc , # \u81ea\u5b9a\u4e49\u6d88\u606f\u63cf\u8ff0\uff0c\u5f53\u63a5\u6536\u65b9\u4e3aiphone\u540e\u53f0\u5728\u7ebf\u65f6\uff0c\u505aios\u79bb\u7ebfPush\u65f6\u6587\u672c\u5c55\u793a 'Ext' : ext , # \u6269\u5c55\u5b57\u6bb5\uff0c\u5f53\u63a5\u6536\u65b9\u4e3aios\u7cfb\u7edf\u4e14\u5e94\u7528\u5904\u5728\u540e\u53f0\u65f6\uff0c\u6b64\u5b57\u6bb5\u4f5c\u4e3aAPNS\u8bf7\u6c42\u5305Payloads\u4e2d\u7684ext\u952e\u503c\u4e0b\u53d1\uff0cExt\u7684\u534f\u8bae\u683c\u5f0f\u7531\u4e1a\u52a1\u65b9\u786e\u5b9a\uff0cAPNS\u53ea\u505a\u900f\u4f20 'Sound' : sound # \u81ea\u5b9a\u4e49APNS\u63a8\u9001\u94c3\u58f0 } super ( CustomMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_data ( self , data ): self . data = data self . msgcontent [ 'Data' ] = data def set_desc ( self , desc ): self . desc = desc self . msgcontent [ 'Desc' ] = desc def set_ext ( self , ext ): self . ext = ext self . msgcontent [ 'Ext' ] = ext def set_sound ( self , sound ): self . sound = sound self . msgcontent [ 'Sound' ] = sound class SoundMsg ( MsgDict ): def __init__ ( self , uuid = '' , size = 0 , second = 0 , msgtype = 'TIMSoundElem' ): self . uuid = uuid self . size = size self . second = second content = { 'UUID' : uuid , # \u8bed\u97f3\u5e8f\u5217\u53f7\uff0c\u540e\u53f0\u7528\u4e8e\u7d22\u5f15\u8bed\u97f3\u7684\u952e\u503c\uff0cString 'Size' : size , # \u8bed\u97f3\u6570\u636e\u5927\u5c0f, Number 'Second' : second # \u8bed\u97f3\u65f6\u957f\uff0c\u5355\u4f4d\u79d2 Number } super ( SoundMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_uuid ( self , uuid ): self . uuid = uuid self . msgcontent [ 'UUID' ] = uuid def set_size ( self , size ): self . size = size self . msgcontent [ 'Size' ] = size def set_second ( self , second ): self . second = second self . msgcontent [ 'Second' ] = second class ImageMsg ( MsgDict ): def __init__ ( self , uuid = '' , imgformat = 0 , imginfo = [], msgtype = 'TIMImageElem' ): self . uuid = uuid self . imgformat = imgformat self . imginfo = imginfo content = { 'UUID' : uuid , # \u56fe\u7247\u5e8f\u5217\u53f7\uff0c\u540e\u53f0\u7528\u4e8e\u7d22\u5f15\u8bed\u97f3\u7684\u952e\u503c\uff0cString 'ImageFormat' : imgformat , # \u56fe\u7247\u683c\u5f0f\uff0c BMP=1, JPG=2, GIF=3, \u5176\u4ed6=0, Number 'ImageInfoArray' : [ t . info for t in imginfo ] # \u539f\u56fe\uff0c\u7f29\u7565\u56fe\u6216\u8005\u5927\u56fe\u4e0b\u8f7d\u4fe1\u606f, Array } super ( ImageMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_uuid ( self , uuid ): self . uuid = uuid self . msgcontent [ 'UUID' ] = uuid def set_format ( self , imgformat ): self . imgformat = imgformat self . msgcontent [ 'ImageFormat' ] = imgformat def append_info ( self , info ): # info \u4e3aImageInfo\u5bf9\u8c61\u5b9e\u4f8b self . imginfo . append ( info ) self . msgcontnet [ 'ImageInfoArray' ] . append ( info . info ) def insert_info ( self , index , info ): self . imginfo . insert ( index , info ) self . msgcontent [ 'ImageInfoArray' ] . insert ( index , info . info ) def del_info ( self , index ): del self . imginfo [ index ] del self . msgcontent [ 'ImageInfoArray' ][ index ] class FileMsg ( MsgDict ): def __init__ ( self , uuid = '' , size = 0 , name = '' , msgtype = 'TIMFileElem' ): self . uuid = uuid self . size = size self . name = name content = { 'UUID' : uuid , # \u6587\u4ef6\u5e8f\u5217\u53f7\uff0c\u540e\u53f0\u7528\u4e8e\u7d22\u5f15\u8bed\u97f3\u7684\u952e\u503c\uff0cString 'FileSize' : size , # \u6587\u4ef6\u6570\u636e\u5927\u5c0f, Number 'FileName' : name # \u6587\u4ef6\u540d\u79f0/\u8def\u5f84\uff0c String } super ( FileMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_uuid ( self , uuid ): self . uuid = uuid self . msgcontent [ 'UUID' ] = UUID def set_size ( self , size ): self . size = size self . msgcontent [ 'FileSize' ] = size def set_name ( self , name ): self . name = name self . msgcontent [ 'FileName' ] = name class ImageInfo ( object ): def __init__ ( self , itype = 1 , size = 0 , width = 0 , height = 0 , url = '' ): #\u56fe\u7247\u7c7b\u578b\uff0c 1-\u539f\u56fe\uff0c 2-\u5927\u56fe\uff0c 3-\u7f29\u7565\u56fe, 0-\u5176\u4ed6 self . itype = itype # \u56fe\u7247\u6570\u636e\u5927\u5c0f,Number self . size = size # \u56fe\u7247\u5bbd\u5ea6,Number self . width = width # \u56fe\u7247\u9ad8\u5ea6, Number self . height = height # \u56fe\u7247\u4e0b\u8f7d\u5730\u5740,String self . url = url @property def info ( self ): return { 'Type' : self . itype , 'Size' : self . size , 'Width' : self . width , 'Height' : self . height , 'URL' : self . url } def set_type ( self , itype ): self . itype = itype def set_size ( self , size ): self . size = size def set_width ( self , width ): self . width = width def set_height ( self , height ): self . height = height def set_url ( self , url ): self . url = url \u5fae\u4fe1\u5f00\u53d1\u5305\uff0cpython\u5b9e\u73b0, wechat_sdk\u5f00\u53d1 \u00b6 http://wechat-python-sdk.com/ \u622a\u53d6\u90e8\u5206\u4ee3\u7801\uff0c\u5b66\u4e60\u7c7b\u7684\u8bbe\u8ba1 from __future__ import unicode_literals import time from wechat_sdk.lib.crypto import BasicCrypto from wechat_sdk.lib.request import WechatRequest from wechat_sdk.exceptions import NeedParamError from wechat_sdk.utils import disable_urllib3_warning class WechatConf ( object ): \"\"\" WechatConf \u914d\u7f6e\u7c7b \u8be5\u7c7b\u5c06\u4f1a\u5b58\u50a8\u6240\u6709\u548c\u5fae\u4fe1\u5f00\u53d1\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f, \u540c\u65f6\u4e5f\u4f1a\u7ef4\u62a4\u914d\u7f6e\u4fe1\u606f\u7684\u6709\u6548\u6027. \"\"\" def __init__ ( self , ** kwargs ): \"\"\" :param kwargs: \u914d\u7f6e\u4fe1\u606f\u5b57\u5178, \u53ef\u7528\u5b57\u5178 key \u503c\u53ca\u5bf9\u5e94\u89e3\u91ca\u5982\u4e0b: 'token': \u5fae\u4fe1 Token 'appid': App ID 'appsecret': App Secret 'encrypt_mode': \u52a0\u89e3\u5bc6\u6a21\u5f0f ('normal': \u660e\u6587\u6a21\u5f0f, 'compatible': \u517c\u5bb9\u6a21\u5f0f, 'safe': \u5b89\u5168\u6a21\u5f0f(\u9ed8\u8ba4)) 'encoding_aes_key': EncodingAESKey \u503c (\u4f20\u5165\u6b64\u503c\u5fc5\u987b\u4fdd\u8bc1\u540c\u65f6\u4f20\u5165 token, appid, \u5426\u5219\u629b\u51fa\u5f02\u5e38) 'access_token_getfunc': access token \u83b7\u53d6\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'access_token_setfunc': access token \u5199\u5165\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'access_token_refreshfunc': access token \u5237\u65b0\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'access_token': \u76f4\u63a5\u5bfc\u5165\u7684 access token \u503c, \u8be5\u503c\u9700\u8981\u5728\u4e0a\u4e00\u6b21\u8be5\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\u624b\u52a8\u8fdb\u884c\u7f13\u5b58\u5e76\u5728\u6b64\u5904\u4f20\u5165, \u5982\u679c\u4e0d \u4f20\u5165, \u5c06\u4f1a\u5728\u9700\u8981\u65f6\u81ea\u52a8\u91cd\u65b0\u83b7\u53d6 (\u4f20\u5165 access_token_getfunc \u548c access_token_setfunc \u51fd\u6570 \u540e\u5c06\u4f1a\u81ea\u52a8\u5ffd\u7565\u6b64\u5904\u7684\u4f20\u5165\u503c) 'access_token_expires_at': \u76f4\u63a5\u5bfc\u5165\u7684 access token \u7684\u8fc7\u671f\u65e5\u671f, \u8be5\u503c\u9700\u8981\u5728\u4e0a\u4e00\u6b21\u8be5\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\u624b\u52a8\u8fdb\u884c\u7f13\u5b58 \u5e76\u5728\u6b64\u5904\u4f20\u5165, \u5982\u679c\u4e0d\u4f20\u5165, \u5c06\u4f1a\u5728\u9700\u8981\u65f6\u81ea\u52a8\u91cd\u65b0\u83b7\u53d6 (\u4f20\u5165 access_token_getfunc \u548c access_token_setfunc \u51fd\u6570\u540e\u5c06\u4f1a\u81ea\u52a8\u5ffd\u7565\u6b64\u5904\u7684\u4f20\u5165\u503c) 'jsapi_ticket_getfunc': jsapi ticket \u83b7\u53d6\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'jsapi_ticket_setfunc': jsapi ticket \u5199\u5165\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'jsapi_ticket_refreshfunc': jsapi ticket \u5237\u65b0\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'jsapi_ticket': \u76f4\u63a5\u5bfc\u5165\u7684 jsapi ticket \u503c, \u8be5\u503c\u9700\u8981\u5728\u4e0a\u4e00\u6b21\u8be5\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\u624b\u52a8\u8fdb\u884c\u7f13\u5b58\u5e76\u5728\u6b64\u5904\u4f20\u5165, \u5982\u679c\u4e0d \u4f20\u5165, \u5c06\u4f1a\u5728\u9700\u8981\u65f6\u81ea\u52a8\u91cd\u65b0\u83b7\u53d6 (\u4f20\u5165 jsapi_ticket_getfunc \u548c jsapi_ticket_setfunc \u51fd\u6570 \u540e\u5c06\u4f1a\u81ea\u52a8\u5ffd\u7565\u6b64\u5904\u7684\u4f20\u5165\u503c) 'jsapi_ticket_expires_at': \u76f4\u63a5\u5bfc\u5165\u7684 jsapi ticket \u7684\u8fc7\u671f\u65e5\u671f, \u8be5\u503c\u9700\u8981\u5728\u4e0a\u4e00\u6b21\u8be5\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\u624b\u52a8\u8fdb\u884c\u7f13\u5b58 \u5e76\u5728\u6b64\u5904\u4f20\u5165, \u5982\u679c\u4e0d\u4f20\u5165, \u5c06\u4f1a\u5728\u9700\u8981\u65f6\u81ea\u52a8\u91cd\u65b0\u83b7\u53d6 (\u4f20\u5165 jsapi_ticket_getfunc \u548c jsapi_ticket_setfunc \u51fd\u6570\u540e\u5c06\u4f1a\u81ea\u52a8\u5ffd\u7565\u6b64\u5904\u7684\u4f20\u5165\u503c) 'partnerid': \u8d22\u4ed8\u901a\u5546\u6237\u8eab\u4efd\u6807\u8bc6, \u652f\u4ed8\u6743\u9650\u4e13\u7528 'partnerkey': \u8d22\u4ed8\u901a\u5546\u6237\u6743\u9650\u5bc6\u94a5 Key, \u652f\u4ed8\u6743\u9650\u4e13\u7528 'paysignkey': \u5546\u6237\u7b7e\u540d\u5bc6\u94a5 Key, \u652f\u4ed8\u6743\u9650\u4e13\u7528 'checkssl': \u662f\u5426\u68c0\u67e5 SSL, \u9ed8\u8ba4\u4e0d\u68c0\u67e5 (False), \u53ef\u907f\u514d urllib3 \u7684 InsecurePlatformWarning \u8b66\u544a :return: \"\"\" self . __request = WechatRequest () if kwargs . get ( 'checkssl' ) is not True : disable_urllib3_warning () # \u53ef\u89e3\u51b3 InsecurePlatformWarning \u8b66\u544a self . __token = kwargs . get ( 'token' ) self . __appid = kwargs . get ( 'appid' ) self . __appsecret = kwargs . get ( 'appsecret' ) self . __encrypt_mode = kwargs . get ( 'encrypt_mode' , 'safe' ) self . __encoding_aes_key = kwargs . get ( 'encoding_aes_key' ) self . __crypto = None self . _update_crypto () self . __access_token_getfunc = kwargs . get ( 'access_token_getfunc' ) self . __access_token_setfunc = kwargs . get ( 'access_token_setfunc' ) self . __access_token_refreshfunc = kwargs . get ( 'access_token_refreshfunc' ) self . __access_token = kwargs . get ( 'access_token' ) self . __access_token_expires_at = kwargs . get ( 'access_token_expires_at' ) self . __jsapi_ticket_getfunc = kwargs . get ( 'jsapi_ticket_getfunc' ) self . __jsapi_ticket_setfunc = kwargs . get ( 'jsapi_ticket_setfunc' ) self . __jsapi_ticket_refreshfunc = kwargs . get ( 'jsapi_ticket_refreshfunc' ) self . __jsapi_ticket = kwargs . get ( 'jsapi_ticket' ) self . __jsapi_ticket_expires_at = kwargs . get ( 'jsapi_ticket_expires_at' ) self . __partnerid = kwargs . get ( 'partnerid' ) self . __partnerkey = kwargs . get ( 'partnerkey' ) self . __paysignkey = kwargs . get ( 'paysignkey' ) @property def token ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d Token \"\"\" self . _check_token () return self . __token @token.setter def token ( self , token ): \"\"\" \u8bbe\u7f6e\u5f53\u524d Token \"\"\" self . __token = token self . _update_crypto () # \u6539\u52a8 Token \u9700\u8981\u91cd\u65b0\u66f4\u65b0 Crypto @property def appid ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d App ID \"\"\" return self . __appid @property def appsecret ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d App Secret \"\"\" return self . __appsecret def set_appid_appsecret ( self , appid , appsecret ): \"\"\" \u8bbe\u7f6e\u5f53\u524d App ID \u53ca App Secret\"\"\" self . __appid = appid self . __appsecret = appsecret self . _update_crypto () # \u6539\u52a8 App ID \u540e\u9700\u8981\u91cd\u65b0\u66f4\u65b0 Crypto @property def encoding_aes_key ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d EncodingAESKey \"\"\" return self . __encoding_aes_key @encoding_aes_key.setter def encoding_aes_key ( self , encoding_aes_key ): \"\"\" \u8bbe\u7f6e\u5f53\u524d EncodingAESKey \"\"\" self . __encoding_aes_key = encoding_aes_key self . _update_crypto () # \u6539\u52a8 EncodingAESKey \u9700\u8981\u91cd\u65b0\u66f4\u65b0 Crypto @property def encrypt_mode ( self ): return self . __encrypt_mode @encrypt_mode.setter def encrypt_mode ( self , encrypt_mode ): \"\"\" \u8bbe\u7f6e\u5f53\u524d\u52a0\u5bc6\u6a21\u5f0f \"\"\" self . __encrypt_mode = encrypt_mode self . _update_crypto () @property def crypto ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d Crypto \u5b9e\u4f8b \"\"\" return self . __crypto @property def access_token ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d access token \u503c, \u672c\u65b9\u6cd5\u4f1a\u81ea\u884c\u7ef4\u62a4 access token \u6709\u6548\u6027 \"\"\" self . _check_appid_appsecret () if callable ( self . __access_token_getfunc ): self . __access_token , self . __access_token_expires_at = self . __access_token_getfunc () if self . __access_token : now = time . time () if self . __access_token_expires_at - now > 60 : return self . __access_token self . grant_access_token () # \u4ece\u817e\u8baf\u670d\u52a1\u5668\u83b7\u53d6 access token \u5e76\u66f4\u65b0 return self . __access_token @property def jsapi_ticket ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d jsapi ticket \u503c, \u672c\u65b9\u6cd5\u4f1a\u81ea\u884c\u7ef4\u62a4 jsapi ticket \u6709\u6548\u6027 \"\"\" self . _check_appid_appsecret () if callable ( self . __jsapi_ticket_getfunc ): self . __jsapi_ticket , self . __jsapi_ticket_expires_at = self . __jsapi_ticket_getfunc () if self . __jsapi_ticket : now = time . time () if self . __jsapi_ticket_expires_at - now > 60 : return self . __jsapi_ticket self . grant_jsapi_ticket () # \u4ece\u817e\u8baf\u670d\u52a1\u5668\u83b7\u53d6 jsapi ticket \u5e76\u66f4\u65b0 return self . __jsapi_ticket @property def partnerid ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d\u8d22\u4ed8\u901a\u5546\u6237\u8eab\u4efd\u6807\u8bc6 \"\"\" return self . __partnerid @property def partnerkey ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d\u8d22\u4ed8\u901a\u5546\u6237\u6743\u9650\u5bc6\u94a5 Key \"\"\" return self . __partnerkey @property def paysignkey ( self ): \"\"\" \u83b7\u53d6\u5546\u6237\u7b7e\u540d\u5bc6\u94a5 Key \"\"\" return self . __paysignkey def grant_access_token ( self ): \"\"\" \u83b7\u53d6 access token \u5e76\u66f4\u65b0\u5f53\u524d\u914d\u7f6e :return: \u8fd4\u56de\u7684 JSON \u6570\u636e\u5305 (\u4f20\u5165 access_token_refreshfunc \u53c2\u6570\u540e\u8fd4\u56de None) \"\"\" self . _check_appid_appsecret () if callable ( self . __access_token_refreshfunc ): self . __access_token , self . __access_token_expires_at = self . __access_token_refreshfunc () return response_json = self . __request . get ( url = \"https://api.weixin.qq.com/cgi-bin/token\" , params = { \"grant_type\" : \"client_credential\" , \"appid\" : self . __appid , \"secret\" : self . __appsecret , }, access_token = self . __access_token ) self . __access_token = response_json [ 'access_token' ] self . __access_token_expires_at = int ( time . time ()) + response_json [ 'expires_in' ] if callable ( self . __access_token_setfunc ): self . __access_token_setfunc ( self . __access_token , self . __access_token_expires_at ) return response_json def grant_jsapi_ticket ( self ): \"\"\" \u83b7\u53d6 jsapi ticket \u5e76\u66f4\u65b0\u5f53\u524d\u914d\u7f6e :return: \u8fd4\u56de\u7684 JSON \u6570\u636e\u5305 (\u4f20\u5165 jsapi_ticket_refreshfunc \u53c2\u6570\u540e\u8fd4\u56de None) \"\"\" self . _check_appid_appsecret () if callable ( self . __jsapi_ticket_refreshfunc ): self . __jsapi_ticket , self . __jsapi_ticket_expires_at = self . __jsapi_ticket_refreshfunc () return response_json = self . __request . get ( url = \"https://api.weixin.qq.com/cgi-bin/ticket/getticket\" , params = { \"type\" : \"jsapi\" , }, access_token = self . access_token , ) self . __jsapi_ticket = response_json [ 'ticket' ] self . __jsapi_ticket_expires_at = int ( time . time ()) + response_json [ 'expires_in' ] if callable ( self . __jsapi_ticket_setfunc ): self . __jsapi_ticket_setfunc ( self . __jsapi_ticket , self . __jsapi_ticket_expires_at ) return response_json def get_access_token ( self ): \"\"\" \u83b7\u53d6 Access Token \u53ca Access Token \u8fc7\u671f\u65e5\u671f, \u4ec5\u4f9b\u7f13\u5b58\u4f7f\u7528, \u5982\u679c\u5e0c\u671b\u5f97\u5230\u539f\u751f\u7684 Access Token \u8bf7\u6c42\u6570\u636e\u8bf7\u4f7f\u7528 :func:`grant_token` **\u4ec5\u4e3a\u517c\u5bb9 v0.6.0 \u4ee5\u524d\u7248\u672c\u4f7f\u7528, \u81ea\u884c\u7ef4\u62a4 access_token \u8bf7\u4f7f\u7528 access_token_setfunc \u548c access_token_getfunc \u8fdb\u884c\u64cd\u4f5c** :return: dict \u5bf9\u8c61, key \u5305\u62ec `access_token` \u53ca `access_token_expires_at` \"\"\" self . _check_appid_appsecret () return { 'access_token' : self . access_token , 'access_token_expires_at' : self . __access_token_expires_at , } def get_jsapi_ticket ( self ): \"\"\" \u83b7\u53d6 Jsapi Ticket \u53ca Jsapi Ticket \u8fc7\u671f\u65e5\u671f, \u4ec5\u4f9b\u7f13\u5b58\u4f7f\u7528, \u5982\u679c\u5e0c\u671b\u5f97\u5230\u539f\u751f\u7684 Jsapi Ticket \u8bf7\u6c42\u6570\u636e\u8bf7\u4f7f\u7528 :func:`grant_jsapi_ticket` **\u4ec5\u4e3a\u517c\u5bb9 v0.6.0 \u4ee5\u524d\u7248\u672c\u4f7f\u7528, \u81ea\u884c\u7ef4\u62a4 jsapi_ticket \u8bf7\u4f7f\u7528 jsapi_ticket_setfunc \u548c jsapi_ticket_getfunc \u8fdb\u884c\u64cd\u4f5c** :return: dict \u5bf9\u8c61, key \u5305\u62ec `jsapi_ticket` \u53ca `jsapi_ticket_expires_at` \"\"\" self . _check_appid_appsecret () return { 'jsapi_ticket' : self . jsapi_ticket , 'jsapi_ticket_expires_at' : self . __jsapi_ticket_expires_at , } def _check_token ( self ): \"\"\" \u68c0\u67e5 Token \u662f\u5426\u5b58\u5728 :raises NeedParamError: Token \u53c2\u6570\u6ca1\u6709\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u63d0\u4f9b \"\"\" if not self . __token : raise NeedParamError ( 'Please provide Token parameter in the construction of class.' ) def _check_appid_appsecret ( self ): \"\"\" \u68c0\u67e5 AppID \u548c AppSecret \u662f\u5426\u5b58\u5728 :raises NeedParamError: AppID \u6216 AppSecret \u53c2\u6570\u6ca1\u6709\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u5b8c\u6574\u63d0\u4f9b \"\"\" if not self . __appid or not self . __appsecret : raise NeedParamError ( 'Please provide app_id and app_secret parameters in the construction of class.' ) def _update_crypto ( self ): \"\"\" \u6839\u636e\u5f53\u524d\u914d\u7f6e\u5185\u5bb9\u66f4\u65b0 Crypto \u7c7b \"\"\" if self . __encrypt_mode in [ 'compatible' , 'safe' ] and self . __encoding_aes_key is not None : if self . __token is None or self . __appid is None : raise NeedParamError ( 'Please provide token and appid parameters in the construction of class.' ) self . __crypto = BasicCrypto ( self . __token , self . __encoding_aes_key , self . __appid ) else : self . __crypto = None \u601d\u7ef4\u953b\u70bc \u00b6 \u8bbe\u8ba1\u8bb2\u5e08\u548c\u5b66\u751f\u7c7b\uff0c\u8bb2\u5e08\u6709\u4e0a\u8bfe\uff0c\u5907\u8bfe\u7b49\u65b9\u6cd5\uff0c\u5b66\u751f\u6709\u542c\u8bfe\uff0c\u505a\u7ec3\u4e60\u7b49\u65b9\u6cd5\uff0c\u5747\u6709\u59d3\u540d\u3001\u6027\u522b\u3001\u5e74\u9f84\u7b49\u57fa\u672c\u5c5e\u6027 \u8bbe\u8ba1\u804a\u5929Message\u7c7b 13.7 with\u4e0e\u201c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u201d \u00b6 \u5982\u679c\u4f60\u6709\u9605\u8bfb\u6e90\u7801\u7684\u4e60\u60ef\uff0c\u53ef\u80fd\u4f1a\u770b\u5230\u4e00\u4e9b\u4f18\u79c0\u7684\u4ee3\u7801\u7ecf\u5e38\u51fa\u73b0\u5e26\u6709 \u201cwith\u201d \u5173\u952e\u5b57\u7684\u8bed\u53e5\uff0c\u5b83\u901a\u5e38\u7528\u5728\u4ec0\u4e48\u573a\u666f\u5462\uff1f\u4eca \u5bf9\u4e8e\u7cfb\u7edf\u8d44\u6e90\u5982\u6587\u4ef6\u3001\u6570\u636e\u5e93\u8fde\u63a5\u3001socket \u800c\u8a00\uff0c\u5e94\u7528\u7a0b\u5e8f\u6253\u5f00\u8fd9\u4e9b\u8d44\u6e90\u5e76\u6267\u884c\u5b8c\u4e1a\u52a1\u903b\u8f91\u4e4b\u540e\uff0c\u5fc5\u987b\u505a\u7684\u4e00\u4ef6\u4e8b\u5c31\u662f\u8981\u5173\u95ed\uff08\u65ad\u5f00\uff09\u8be5\u8d44\u6e90\u3002 \u6bd4\u5982 Python \u7a0b\u5e8f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u5f80\u6587\u4ef6\u4e2d\u5199\u5185\u5bb9\uff0c\u5199\u5b8c\u4e4b\u540e\uff0c\u5c31\u8981\u5173\u95ed\u8be5\u6587\u4ef6\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4ec0\u4e48\u60c5\u51b5\u5462\uff1f\u6781\u7aef\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0 \"Too many open files\" \u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u7cfb\u7edf\u5141\u8bb8\u4f60\u6253\u5f00\u7684\u6700\u5927\u6587\u4ef6\u6570\u91cf\u662f\u6709\u9650\u7684\u3002 \u540c\u6837\uff0c\u5bf9\u4e8e\u6570\u636e\u5e93\uff0c\u5982\u679c\u8fde\u63a5\u6570\u8fc7\u591a\u800c\u6ca1\u6709\u53ca\u65f6\u5173\u95ed\u7684\u8bdd\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0 \"Can not connect to MySQL server Too many connections\"\uff0c\u56e0\u4e3a\u6570\u636e\u5e93\u8fde\u63a5\u662f\u4e00\u79cd\u975e\u5e38\u6602\u8d35\u7684\u8d44\u6e90\uff0c\u4e0d\u53ef\u80fd\u65e0\u9650\u5236\u7684\u88ab\u521b\u5efa\u3002 \u6765\u770b\u770b\u5982\u4f55\u6b63\u786e\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u3002 \u666e\u901a\u7248\uff1a \u00b6 def m1 (): f = open ( \"output.txt\" , \"w\" ) f . write ( \"python\u4e4b\u7985\" ) f . close () \u8fd9\u6837\u5199\u6709\u4e00\u4e2a\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u5982\u679c\u5728\u8c03\u7528 write \u7684\u8fc7\u7a0b\u4e2d\uff0c\u51fa\u73b0\u4e86\u5f02\u5e38\u8fdb\u800c\u5bfc\u81f4\u540e\u7eed\u4ee3\u7801\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\uff0cclose \u65b9\u6cd5\u65e0\u6cd5\u88ab\u6b63\u5e38\u8c03\u7528\uff0c\u56e0\u6b64\u8d44\u6e90\u5c31\u4f1a\u4e00\u76f4\u88ab\u8be5\u7a0b\u5e8f\u5360\u7528\u8005\u91ca\u653e\u3002\u90a3\u4e48\u8be5\u5982\u4f55\u6539\u8fdb\u4ee3\u7801\u5462\uff1f \u8fdb\u9636\u7248\uff1a \u00b6 def m2 (): f = open ( \"output.txt\" , \"w\" ) try : f . write ( \"python\u4e4b\u7985\" ) except IOError : print ( \"oops error\" ) finally : f . close () \u6539\u826f\u7248\u672c\u7684\u7a0b\u5e8f\u662f\u5bf9\u53ef\u80fd\u53d1\u751f\u5f02\u5e38\u7684\u4ee3\u7801\u5904\u8fdb\u884c try \u6355\u83b7\uff0c\u4f7f\u7528 try/finally \u8bed\u53e5\uff0c\u8be5\u8bed\u53e5\u8868\u793a\u5982\u679c\u5728 try \u4ee3\u7801\u5757\u4e2d\u7a0b\u5e8f\u51fa\u73b0\u4e86\u5f02\u5e38\uff0c\u540e\u7eed\u4ee3\u7801\u5c31\u4e0d\u518d\u6267\u884c\uff0c\u800c\u76f4\u63a5\u8df3\u8f6c\u5230 except \u4ee3\u7801\u5757\u3002\u800c\u65e0\u8bba\u5982\u4f55\uff0cfinally \u5757\u7684\u4ee3\u7801\u6700\u7ec8\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u56e0\u6b64\uff0c\u53ea\u8981\u628a close \u653e\u5728 finally \u4ee3\u7801\u4e2d\uff0c\u6587\u4ef6\u5c31\u4e00\u5b9a\u4f1a\u5173\u95ed\u3002 else\u4ec0\u4e48\u65f6\u5019\u6267\u884c? \u53ea\u6709try\u4e2d\u7684\u4ee3\u7801\u6267\u884c\u5b8c\u6ca1\u6709\u4ea7\u751f\u4efb\u4f55\u7684\u5f02\u5e38\u7136\u540e\u6267\u884celse\u4e2d\u7684\u4ee3\u7801 Exception \u8fd9\u4e2a\u5f02\u5e38\u4ee3\u8868\u7684\u662f\u6240\u6709\u7684\u5f02\u5e38,\u5982\u679c\u524d\u9762\u7684\u5f02\u5e38\u90fd\u6ca1\u6709\u6355\u83b7\u5230\u7684\u8bdd\u5c31\u4f1a\u6267\u884c\u8fd9\u4e2a\u5f02\u5e38\u7684\u5904\u7406 \u9ad8\u7ea7\u7248\uff1a \u00b6 def m3 (): with open ( \"output.txt\" , \"r\" ) as f : f . write ( \"Python\u4e4b\u7985\" ) \u4e00\u79cd\u66f4\u52a0\u7b80\u6d01\u3001\u4f18\u96c5\u7684\u65b9\u5f0f\u5c31\u662f\u7528 with \u5173\u952e\u5b57\u3002open \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u8d4b\u503c\u7ed9\u53d8\u91cf f\uff0c\u5f53\u79bb\u5f00 with \u4ee3\u7801\u5757\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8c03\u7528 f.close() \u65b9\u6cd5\uff0c with \u7684\u4f5c\u7528\u548c\u4f7f\u7528 try/finally \u8bed\u53e5\u662f\u4e00\u6837\u7684\u3002\u90a3\u4e48\u5b83\u7684\u5b9e\u73b0\u539f\u7406\u662f\u4ec0\u4e48\uff1f\u5728\u8bb2 with \u7684\u539f\u7406\u524d\u8981\u6d89\u53ca\u5230\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\uff0c\u5c31\u662f\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff08Context Manager\uff09\u3002 \u4ec0\u4e48\u662f\u4e0a\u4e0b\u6587(context) \u00b6 \u4e0a\u4e0b\u6587\u5728\u4e0d\u540c\u7684\u5730\u65b9\u8868\u793a\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u8981\u611f\u6027\u7406\u89e3\u3002context\u5176\u5b9e\u8bf4\u767d\u4e86\uff0c\u548c\u6587\u7ae0\u7684\u4e0a\u4e0b\u6587\u662f\u4e00\u4e2a\u610f\u601d\uff0c\u5728\u901a\u4fd7\u4e00\u70b9\uff0c\u6211\u89c9\u5f97\u53eb\u73af\u5883\u66f4\u597d\u3002.... \u6797\u51b2\u5927\u53eb\u4e00\u58f0\u201c\u554a\u4e5f\uff01\u201d.... \u95ee:\u8fd9\u53e5\u8bdd\u6797\u51b2\u7684\u201c\u554a\u4e5f\u201d\u8868\u8fbe\u4e86\u6797\u51b2\u600e\u6837\u7684\u5fc3\u91cc\uff1f \u7b54:\u554a\u4f60\u5988\u4e2a\u5934\u554a\uff01 \u770b\uff0c\u4e00\u7bc7\u6587\u7ae0\uff0c\u7ed9\u4f60\u6458\u5f55\u4e00\u6bb5\uff0c\u6ca1\u524d\u6ca1\u540e\uff0c\u4f60\u8bfb\u4e0d\u61c2\uff0c\u56e0\u4e3a\u6709\u8bed\u5883\uff0c\u5c31\u662f\u8bed\u8a00\u73af\u5883\u5b58\u5728\uff0c\u4e00\u6bb5\u8bdd\u8bf4\u4e86\u4ec0\u4e48\uff0c\u8981\u901a\u8fc7\u4e0a\u4e0b\u6587(\u6587\u7ae0\u7684\u4e0a\u4e0b\u6587)\u6765\u63a8\u65ad\u3002 app\u70b9\u51fb\u4e00\u4e2a\u6309\u94ae\u8fdb\u5165\u4e00\u4e2a\u65b0\u7684\u754c\u9762\uff0c\u4e5f\u8981\u4fdd\u5b58\u4f60\u662f\u5728\u54ea\u4e2a\u5c4f\u5e55\u8df3\u8fc7\u6765\u7684\u7b49\u7b49\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4f60\u70b9\u51fb\u8fd4\u56de\u7684\u65f6\u5019\u80fd\u6b63\u786e\u8df3\u56de\uff0c\u5982\u679c\u4e0d\u5b58\u80af\u5b9a\u5c31\u65e0\u6cd5\u6b63\u786e\u8df3\u56de\u4e86\u3002 \u770b\u8fd9\u4e9b\u90fd\u662f\u4e0a\u4e0b\u6587\u7684\u5178\u578b\u4f8b\u5b50\uff0c\u7406\u89e3\u6210\u73af\u5883\u5c31\u53ef\u4ee5\uff0c(\u800c\u4e14\u4e0a\u4e0b\u6587\u867d\u7136\u53eb\u4e0a\u4e0b\u6587\uff0c\u4f46\u662f\u7a0b\u5e8f\u91cc\u9762\u4e00\u822c\u90fd\u53ea\u6709\u4e0a\u6587\u800c\u5df2\uff0c\u53ea\u662f\u53eb\u7684\u597d\u542c\u53eb\u4e0a\u4e0b\u6587\u3002\u3002\u8fdb\u7a0b\u4e2d\u65ad\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u6709\u4e0a\u6709\u4e0b\u7684\uff0c\u4e0d\u8fc7\u4e0d\u8fd9\u4e2a\u9ad8\u6df1\u7684\u95ee\u9898\u5c31\u4e0d\u8981\u6df1\u7a76\u4e86\u3002\u3002\u3002) \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u00b6 \u4efb\u4f55\u5b9e\u73b0\u4e86 enter () \u548c exit () \u65b9\u6cd5\u7684\u5bf9\u8c61\u90fd\u53ef\u79f0\u4e4b\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 with \u5173\u952e\u5b57\u3002\u663e\u7136\uff0c\u6587\u4ef6\uff08file\uff09\u5bf9\u8c61\u4e5f\u5b9e\u73b0\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u90a3\u4e48\u6587\u4ef6\u5bf9\u8c61\u662f\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6a21\u62df\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5df1\u7684\u6587\u4ef6\u7c7b\uff0c\u8ba9\u8be5\u7c7b\u5b9e\u73b0 enter () \u548c exit () \u65b9\u6cd5\u3002 class File (): def __init__ ( self , filename , mode ): self . filename = filename self . mode = mode def __enter__ ( self ): print ( \"entering\" ) self . f = open ( self . filename , self . mode ) return self . f def __exit__ ( self , * args ): print ( \"will exit\" ) self . f . close () enter () \u65b9\u6cd5\u8fd4\u56de\u8d44\u6e90\u5bf9\u8c61\uff0c\u8fd9\u91cc\u5c31\u662f\u4f60\u5c06\u8981\u6253\u5f00\u7684\u90a3\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c exit () \u65b9\u6cd5\u5904\u7406\u4e00\u4e9b\u6e05\u9664\u5de5\u4f5c\u3002 \u56e0\u4e3a File \u7c7b\u5b9e\u73b0\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u4f7f\u7528 with \u8bed\u53e5\u4e86\u3002 with File ( 'out.txt' , 'w' ) as f : print ( \"writing\" ) f . write ( 'hello, python' ) \u8fd9\u6837\uff0c\u4f60\u5c31\u65e0\u9700\u663e\u793a\u5730\u8c03\u7528 close \u65b9\u6cd5\u4e86\uff0c\u7531\u7cfb\u7edf\u81ea\u52a8\u53bb\u8c03\u7528\uff0c\u54ea\u6015\u4e2d\u95f4\u9047\u5230\u5f02\u5e38 close \u65b9\u6cd5\u4e5f\u4f1a\u88ab\u8c03\u7528\u3002 \u5b9e\u73b0\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u53e6\u5916\u65b9\u5f0f \u00b6 Python \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a contextmanager \u7684\u88c5\u9970\u5668\uff0c\u66f4\u8fdb\u4e00\u6b65\u7b80\u5316\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u901a\u8fc7 yield \u5c06\u51fd\u6570\u5206\u5272\u6210\u4e24\u90e8\u5206\uff0cyield \u4e4b\u524d\u7684\u8bed\u53e5\u5728 enter \u65b9\u6cd5\u4e2d\u6267\u884c\uff0cyield \u4e4b\u540e\u7684\u8bed\u53e5\u5728 exit \u65b9\u6cd5\u4e2d\u6267\u884c\u3002\u7d27\u8ddf\u5728 yield \u540e\u9762\u7684\u503c\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 from contextlib import contextmanager @contextmanager def my_open ( path , mode ): f = open ( path , mode ) yield f f . close () \u8c03\u7528 with my_open('out.txt', 'w') as f: f.write(\"hello , the simplest context manager\") \u603b\u7ed3 \u00b6 Python \u63d0\u4f9b\u4e86 with \u8bed\u6cd5\u7528\u4e8e\u7b80\u5316\u8d44\u6e90\u64cd\u4f5c\u7684\u540e\u7eed\u6e05\u9664\u64cd\u4f5c\uff0c\u662f try/finally \u7684\u66ff\u4ee3\u65b9\u6cd5\uff0c\u5b9e\u73b0\u539f\u7406\u5efa\u7acb\u5728\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e4b\u4e0a\u3002\u6b64\u5916\uff0cPython \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a contextmanager \u88c5\u9970\u5668\uff0c\u66f4\u8fdb\u4e00\u6b65\u7b80\u5316\u4e0a\u4e0b\u7ba1\u7406\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002","title":"009 13  python\u63d0\u9ad8 2"},{"location":"009-13--python\u63d0\u9ad8-2/#131-mro","text":"","title":"13.1. \u591a\u7ee7\u627f\u4ee5\u53caMRO\u987a\u5e8f"},{"location":"009-13--python\u63d0\u9ad8-2/#mro","text":"","title":"\u591a\u7ee7\u627f\u4ee5\u53caMRO\u987a\u5e8f"},{"location":"009-13--python\u63d0\u9ad8-2/#1","text":"# coding=utf-8 print ( \"******\u591a\u7ee7\u627f\u4f7f\u7528\u7c7b\u540d.__init__ \u53d1\u751f\u7684\u72b6\u6001******\" ) class Parent ( object ): def __init__ ( self , name ): print ( 'parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . name = name print ( 'parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son1 ( Parent ): def __init__ ( self , name , age ): print ( 'Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . age = age Parent . __init__ ( self , name ) print ( 'Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son2 ( Parent ): def __init__ ( self , name , gender ): print ( 'Son2\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . gender = gender Parent . __init__ ( self , name ) print ( 'Son2\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Grandson ( Son1 , Son2 ): def __init__ ( self , name , age , gender ): print ( 'Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) Son1 . __init__ ( self , name , age ) # \u5355\u72ec\u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5 Son2 . __init__ ( self , name , gender ) print ( 'Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) gs = Grandson ( 'grandson' , 12 , '\u7537' ) print ( '\u59d3\u540d\uff1a' , gs . name ) print ( '\u5e74\u9f84\uff1a' , gs . age ) print ( '\u6027\u522b\uff1a' , gs . gender ) print ( \"******\u591a\u7ee7\u627f\u4f7f\u7528\u7c7b\u540d.__init__ \u53d1\u751f\u7684\u72b6\u6001****** \\n\\n \" ) \u8fd0\u884c\u7ed3\u679c: ****** \u591a\u7ee7\u627f\u4f7f\u7528\u7c7b\u540d . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son2\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 #\u88ab\u7ee7\u627f\u4e86\u4e24\u6b21 parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son2\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 \u59d3\u540d\uff1a grandson \u5e74\u9f84\uff1a 12 \u6027\u522b\uff1a \u7537 ****** \u591a\u7ee7\u627f\u4f7f\u7528\u7c7b\u540d . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** python \u662f\u52a8\u6001\u7c7b\u578b\u7684\u8bed\u8a00\u56e0\u6b64\u6ca1\u6709\u65b9\u6cd5\u7684\u91cd\u8f7d\u53ea\u6709\u65b9\u6cd5\u7684\u91cd\u5199","title":"1. \u5355\u72ec\u8c03\u7528\u7236\u7c7b\u7684\u65b9\u6cd5"},{"location":"009-13--python\u63d0\u9ad8-2/#2-super","text":"print ( \"******\u591a\u7ee7\u627f\u4f7f\u7528super().__init__ \u53d1\u751f\u7684\u72b6\u6001******\" ) class Parent ( object ): def __init__ ( self , name , * args , ** kwargs ): # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . name = name print ( 'parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son1 ( Parent ): def __init__ ( self , name , age , * args , ** kwargs ): # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . age = age super () . __init__ ( name , * args , ** kwargs ) # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son2 ( Parent ): def __init__ ( self , name , gender , * args , ** kwargs ): # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'Son2\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . gender = gender super () . __init__ ( name , * args , ** kwargs ) # \u4e3a\u907f\u514d\u591a\u7ee7\u627f\u62a5\u9519\uff0c\u4f7f\u7528\u4e0d\u5b9a\u957f\u53c2\u6570\uff0c\u63a5\u53d7\u53c2\u6570 print ( 'Son2\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Grandson ( Son1 , Son2 ): def __init__ ( self , name , age , gender ): print ( 'Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) # \u591a\u7ee7\u627f\u65f6\uff0c\u76f8\u5bf9\u4e8e\u4f7f\u7528\u7c7b\u540d.__init__\u65b9\u6cd5\uff0c\u8981\u628a\u6bcf\u4e2a\u7236\u7c7b\u5168\u90e8\u5199\u4e00\u904d # \u800csuper\u53ea\u7528\u4e00\u53e5\u8bdd\uff0c\u6267\u884c\u4e86\u5168\u90e8\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4f55\u591a\u7ee7\u627f\u9700\u8981\u5168\u90e8\u4f20\u53c2\u7684\u4e00\u4e2a\u539f\u56e0 # super(Grandson, self).__init__(name, age, gender) super () . __init__ ( name , age , gender ) print ( 'Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) print ( Grandson . __mro__ ) #C3\u7b97\u6cd5\u83b7\u5f97super\u8c03\u7528\u7236\u7c7b\u65f6\u7684\u987a\u5e8f gs = Grandson ( 'grandson' , 12 , '\u7537' ) print ( '\u59d3\u540d\uff1a' , gs . name ) print ( '\u5e74\u9f84\uff1a' , gs . age ) print ( '\u6027\u522b\uff1a' , gs . gender ) print ( \"******\u591a\u7ee7\u627f\u4f7f\u7528super().__init__ \u53d1\u751f\u7684\u72b6\u6001****** \\n\\n \" ) \u8fd0\u884c\u7ed3\u679c\uff1a ****** \u591a\u7ee7\u627f\u4f7f\u7528 super () . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** ( < class ' __main__ . Grandson '>, <class ' __main__ . Son1 '>, <class ' __main__ . Son2 '>, <class ' __main__ . Parent '>, <class ' object '>) Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 Son2\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 #\u53ea\u88ab\u8c03\u7528\u4e86\u4e00\u6b21 parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son2\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 \u59d3\u540d\uff1a grandson \u5e74\u9f84\uff1a 12 \u6027\u522b\uff1a \u7537 ****** \u591a\u7ee7\u627f\u4f7f\u7528 super () . __init__ \u53d1\u751f\u7684\u72b6\u6001 ******","title":"2. \u591a\u7ee7\u627f\u4e2dsuper\u8c03\u7528\u6709\u6240\u7236\u7c7b\u7684\u88ab\u91cd\u5199\u7684\u65b9\u6cd5"},{"location":"009-13--python\u63d0\u9ad8-2/#_1","text":"\u4ee5\u4e0a2\u4e2a\u4ee3\u7801\u6267\u884c\u7684\u7ed3\u679c\u4e0d\u540c \u5982\u679c2\u4e2a\u5b50\u7c7b\u4e2d\u90fd\u7ee7\u627f\u4e86\u7236\u7c7b\uff0c\u5f53\u5728\u5b50\u7c7b\u4e2d\u901a\u8fc7\u7236\u7c7b\u540d\u8c03\u7528\u65f6\uff0cparent\u88ab\u6267\u884c\u4e862\u6b21 \u5982\u679c2\u4e2a\u5b50\u7c7b\u4e2d\u90fd\u7ee7\u627f\u4e86\u7236\u7c7b\uff0c\u5f53\u5728\u5b50\u7c7b\u4e2d\u901a\u8fc7super\u8c03\u7528\u65f6\uff0cparent\u88ab\u6267\u884c\u4e861\u6b21","title":"\u6ce8\u610f\uff1a"},{"location":"009-13--python\u63d0\u9ad8-2/#args-kwargs","text":"def test2 ( a , b , * args , ** kwargs ): print ( \"------\" ) print ( a ) print ( b ) print ( args ) print ( kwargs ) def test1 ( a , b , * args , ** kwargs ): print ( a ) print ( b ) print ( args ) print ( kwargs ) # test2(a, b, args, kwargs) # \u76f8\u5f53\u4e8etest2(11, 22, (33, 44, 55, 66), {\"name\":\"laowang\", \"age\":18}) # test2(a, b, *args, kwargs) # \u76f8\u5f53\u4e8etest2(11, 22, 33, 44, 55, 66, {\"name\":\"laowang\", \"age\":18}) test2 ( a , b , * args , ** kwargs ) # \u76f8\u5f53\u4e8etest2(11, 22, 33, 44, 55, 66, name=\"laowang\", age=18) #\u6240\u4ee5\u4f20\u9012\u53c2\u6570\u4e5f\u8981\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\u7c7b\u4f3c\u4e8e\u81ea\u52a8\u62c6\u5305 #*args, **kwargs\u4e0d\u4ec5\u662f\u53ef\u4ee5\u653e\u5728\u578b\u53c2\u4e2d,\u4e5f\u662f\u53ef\u4ee5\u653e\u5728\u5b9e\u53c2\u4e2d\u7684 test1 ( 11 , 22 , 33 , 44 , 55 , 66 , name = \"laowang\" , age = 18 ) \u8fd0\u884c\u7ed3\u679c 11 22 ( 33 , 44 , 55 , 66 ) { 'name' : 'laowang' , 'age' : 18 } ------ 11 22 ( 33 , 44 , 55 , 66 ) { 'name' : 'laowang' , 'age' : 18 }","title":"*args, **kwargs \u89e3\u91ca"},{"location":"009-13--python\u63d0\u9ad8-2/#3-super","text":"print ( \"******\u5355\u7ee7\u627f\u4f7f\u7528super().__init__ \u53d1\u751f\u7684\u72b6\u6001******\" ) class Parent ( object ): def __init__ ( self , name ): print ( 'parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . name = name print ( 'parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Son1 ( Parent ): def __init__ ( self , name , age ): print ( 'Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) self . age = age super () . __init__ ( name ) # \u5355\u7ee7\u627f\u4e0d\u80fd\u63d0\u4f9b\u5168\u90e8\u53c2\u6570 print ( 'Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) class Grandson ( Son1 ): def __init__ ( self , name , age , gender ): print ( 'Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528' ) super () . __init__ ( name , age ) # \u5355\u7ee7\u627f\u4e0d\u80fd\u63d0\u4f9b\u5168\u90e8\u53c2\u6570 print ( 'Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528' ) gs = Grandson ( 'grandson' , 12 , '\u7537' ) print ( '\u59d3\u540d\uff1a' , gs . name ) print ( '\u5e74\u9f84\uff1a' , gs . age ) #print('\u6027\u522b\uff1a', gs.gender) print ( \"******\u5355\u7ee7\u627f\u4f7f\u7528super().__init__ \u53d1\u751f\u7684\u72b6\u6001****** \\n\\n \" ) \u8fd0\u884c\u7ed3\u679c ****** \u5355\u7ee7\u627f\u4f7f\u7528 super () . __init__ \u53d1\u751f\u7684\u72b6\u6001 ****** Grandson\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 Son1\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u5f00\u59cb\u88ab\u8c03\u7528 parent\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Son1\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 Grandson\u7684init\u7ed3\u675f\u88ab\u8c03\u7528 \u59d3\u540d\uff1a grandson \u5e74\u9f84\uff1a 12 ****** \u5355\u7ee7\u627f\u4f7f\u7528 super () . __init__ \u53d1\u751f\u7684\u72b6\u6001 ******","title":"3. \u5355\u7ee7\u627f\u4e2dsuper"},{"location":"009-13--python\u63d0\u9ad8-2/#_2","text":"super(). init__\u76f8\u5bf9\u4e8e\u7c7b\u540d.__init \uff0c\u5728\u5355\u7ee7\u627f\u4e0a\u7528\u6cd5\u57fa\u672c\u65e0\u5dee \u4f46\u5728\u591a\u7ee7\u627f\u4e0a\u6709\u533a\u522b\uff0csuper\u65b9\u6cd5\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u7236\u7c7b\u7684\u65b9\u6cd5\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\uff0c\u800c\u4f7f\u7528\u7c7b\u540d\u7684\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u65b9\u6cd5\u88ab\u6267\u884c\u591a\u6b21\uff0c\u5177\u4f53\u770b\u524d\u9762\u7684\u8f93\u51fa\u7ed3\u679c \u591a\u7ee7\u627f\u65f6\uff0c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u5bf9\u7236\u7c7b\u7684\u4f20\u53c2\u6570\uff0c\u5e94\u8be5\u662f\u7531\u4e8epython\u4e2dsuper\u7684\u7b97\u6cd5\u5bfc\u81f4\u7684\u539f\u56e0\uff0c\u5fc5\u987b\u628a\u53c2\u6570\u5168\u90e8\u4f20\u9012\uff0c\u5426\u5219\u4f1a\u62a5\u9519 \u5355\u7ee7\u627f\u65f6\uff0c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u5219\u4e0d\u80fd\u5168\u90e8\u4f20\u9012\uff0c\u53ea\u80fd\u4f20\u7236\u7c7b\u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570\uff0c\u5426\u5219\u4f1a\u62a5\u9519 \u591a\u7ee7\u627f\u65f6\uff0c\u76f8\u5bf9\u4e8e\u4f7f\u7528\u7c7b\u540d.__init__\u65b9\u6cd5\uff0c\u8981\u628a\u6bcf\u4e2a\u7236\u7c7b\u5168\u90e8\u5199\u4e00\u904d, \u800c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u53ea\u9700\u5199\u4e00\u53e5\u8bdd\u4fbf\u6267\u884c\u4e86\u5168\u90e8\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4f55\u591a\u7ee7\u627f\u9700\u8981\u5168\u90e8\u4f20\u53c2\u7684\u4e00\u4e2a\u539f\u56e0","title":"\u603b\u7ed3"},{"location":"009-13--python\u63d0\u9ad8-2/#_3","text":"\u4ee5\u4e0b\u7684\u4ee3\u7801\u7684\u8f93\u51fa\u5c06\u662f\u4ec0\u4e48? \u8bf4\u51fa\u4f60\u7684\u7b54\u6848\u5e76\u89e3\u91ca\u3002 class Parent ( object ): x = 1 class Child1 ( Parent ): pass class Child2 ( Parent ): pass print ( Parent . x , Child1 . x , Child2 . x ) Child1 . x = 2 print ( Parent . x , Child1 . x , Child2 . x ) Parent . x = 3 print ( Parent . x , Child1 . x , Child2 . x ) \u7b54\u6848, \u4ee5\u4e0a\u4ee3\u7801\u7684\u8f93\u51fa\u662f\uff1a 1 1 1 1 2 1 3 2 3 \u4f7f\u4f60\u56f0\u60d1\u6216\u662f\u60ca\u5947\u7684\u662f\u5173\u4e8e\u6700\u540e\u4e00\u884c\u7684\u8f93\u51fa\u662f 3 2 3 \u800c\u4e0d\u662f 3 2 1\u3002\u4e3a\u4ec0\u4e48\u6539\u53d8\u4e86 Parent.x \u7684\u503c\u8fd8\u4f1a\u6539\u53d8 Child2.x \u7684\u503c\uff0c\u4f46\u662f\u540c\u65f6 Child1.x \u503c\u5374\u6ca1\u6709\u6539\u53d8\uff1f \u8fd9\u4e2a\u7b54\u6848\u7684\u5173\u952e\u662f\uff0c\u5728 Python \u4e2d\uff0c\u7c7b\u53d8\u91cf\u5728\u5185\u90e8\u662f\u4f5c\u4e3a\u5b57\u5178\u5904\u7406\u7684\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u7684\u540d\u5b57\u6ca1\u6709\u5728\u5f53\u524d\u7c7b\u7684\u5b57\u5178\u4e2d\u53d1\u73b0\uff0c\u5c06\u641c\u7d22\u7956\u5148\u7c7b\uff08\u6bd4\u5982\u7236\u7c7b\uff09\u76f4\u5230\u88ab\u5f15\u7528\u7684\u53d8\u91cf\u540d\u88ab\u627e\u5230\uff08\u5982\u679c\u8fd9\u4e2a\u88ab\u5f15\u7528\u7684\u53d8\u91cf\u540d\u65e2\u6ca1\u6709\u5728\u81ea\u5df1\u6240\u5728\u7684\u7c7b\u53c8\u6ca1\u6709\u5728\u7956\u5148\u7c7b\u4e2d\u627e\u5230\uff0c\u4f1a\u5f15\u53d1\u4e00\u4e2a AttributeError \u5f02\u5e38 \uff09\u3002 \u56e0\u6b64\uff0c\u5728\u7236\u7c7b\u4e2d\u8bbe\u7f6e x = 1 \u4f1a\u4f7f\u5f97\u7c7b\u53d8\u91cf x \u5728\u5f15\u7528\u8be5\u7c7b\u548c\u5176\u4efb\u4f55\u5b50\u7c7b\u4e2d\u7684\u503c\u4e3a 1\u3002\u8fd9\u5c31\u662f\u56e0\u4e3a\u7b2c\u4e00\u4e2a print \u8bed\u53e5\u7684\u8f93\u51fa\u662f 1 1 1\u3002 \u968f\u540e\uff0c\u5982\u679c\u4efb\u4f55\u5b83\u7684\u5b50\u7c7b\u91cd\u5199\u4e86\u8be5\u503c\uff08\u4f8b\u5982\uff0c\u6211\u4eec\u6267\u884c\u8bed\u53e5 Child1.x = 2\uff09\uff0c\u7136\u540e\uff0c\u8be5\u503c\u4ec5\u4ec5\u5728\u5b50\u7c7b\u4e2d\u88ab\u6539\u53d8\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7b2c\u4e8c\u4e2a print \u8bed\u53e5\u7684\u8f93\u51fa\u662f 1 2 1\u3002 \u6700\u540e\uff0c\u5982\u679c\u8be5\u503c\u5728\u7236\u7c7b\u4e2d\u88ab\u6539\u53d8\uff08\u4f8b\u5982\uff0c\u6211\u4eec\u6267\u884c\u8bed\u53e5 Parent.x = 3\uff09\uff0c\u8fd9\u4e2a\u6539\u53d8\u4f1a\u5f71\u54cd\u5230\u4efb\u4f55\u672a\u91cd\u5199\u8be5\u503c\u7684\u5b50\u7c7b\u5f53\u4e2d\u7684\u503c\uff08\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\u88ab\u5f71\u54cd\u7684\u5b50\u7c7b\u662f Child2\uff09\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7b2c\u4e09\u4e2a print \u8f93\u51fa\u662f 3 2 3\u3002","title":"\u5c0f\u8bd5\u725b\u5200(\u4ee5\u4e0b\u4e3a\u9762\u8bd5\u9898)"},{"location":"009-13--python\u63d0\u9ad8-2/#132","text":"","title":"13.2 \u518d\u8bba\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5"},{"location":"009-13--python\u63d0\u9ad8-2/#_4","text":"","title":"\u518d\u8bba\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5"},{"location":"009-13--python\u63d0\u9ad8-2/#1_1","text":"\u5b83\u4eec\u5728\u5b9a\u4e49\u548c\u4f7f\u7528\u4e2d\u6709\u6240\u533a\u522b\uff0c\u800c\u6700\u672c\u8d28\u7684\u533a\u522b\u662f\u5185\u5b58\u4e2d\u4fdd\u5b58\u7684\u4f4d\u7f6e\u4e0d\u540c\uff0c \u5b9e\u4f8b\u5c5e\u6027\u5c5e\u4e8e\u5bf9\u8c61 \u7c7b\u5c5e\u6027\u5c5e\u4e8e\u7c7b class Province ( object ): # \u7c7b\u5c5e\u6027 country = '\u4e2d\u56fd' def __init__ ( self , name ): # \u5b9e\u4f8b\u5c5e\u6027 self . name = name # \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61 obj = Province ( '\u5c71\u4e1c\u7701' ) # \u76f4\u63a5\u8bbf\u95ee\u5b9e\u4f8b\u5c5e\u6027 print ( obj . name ) # \u76f4\u63a5\u8bbf\u95ee\u7c7b\u5c5e\u6027 Province . country \u7531\u4e0a\u8ff0\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\u3010\u5b9e\u4f8b\u5c5e\u6027\u9700\u8981\u901a\u8fc7\u5bf9\u8c61\u6765\u8bbf\u95ee\u3011\u3010\u7c7b\u5c5e\u6027\u901a\u8fc7\u7c7b\u8bbf\u95ee\u3011\uff0c\u5728\u4f7f\u7528\u4e0a\u53ef\u4ee5\u770b\u51fa\u5b9e\u4f8b\u5c5e\u6027\u548c\u7c7b\u5c5e\u6027\u7684\u5f52\u5c5e\u662f\u4e0d\u540c\u7684\u3002 \u5176\u5728\u5185\u5bb9\u7684\u5b58\u50a8\u65b9\u5f0f\u7c7b\u4f3c\u5982\u4e0b\u56fe\uff1a \u7531\u4e0a\u56fe\u770b\u51fa\uff1a \u7c7b\u5c5e\u6027\u5728\u5185\u5b58\u4e2d\u53ea\u4fdd\u5b58\u4e00\u4efd \u5b9e\u4f8b\u5c5e\u6027\u5728\u6bcf\u4e2a\u5bf9\u8c61\u4e2d\u90fd\u8981\u4fdd\u5b58\u4e00\u4efd","title":"1. \u7c7b\u5c5e\u6027\u3001\u5b9e\u4f8b\u5c5e\u6027"},{"location":"009-13--python\u63d0\u9ad8-2/#_5","text":"\u901a\u8fc7\u7c7b\u521b\u5efa\u5b9e\u4f8b\u5bf9\u8c61\u65f6\uff0c\u5982\u679c\u6bcf\u4e2a\u5bf9\u8c61\u9700\u8981\u5177\u6709\u76f8\u540c\u540d\u5b57\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u5c31\u4f7f\u7528\u7c7b\u5c5e\u6027\uff0c\u7528\u4e00\u4efd\u65e2\u53ef","title":"\u5e94\u7528\u573a\u666f\uff1a"},{"location":"009-13--python\u63d0\u9ad8-2/#2","text":"\u65b9\u6cd5\u5305\u62ec\uff1a\u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\uff0c\u4e09\u79cd\u65b9\u6cd5\u5728\u5185\u5b58\u4e2d\u90fd\u5f52\u5c5e\u4e8e\u7c7b\uff0c\u533a\u522b\u5728\u4e8e\u8c03\u7528\u65b9\u5f0f\u4e0d\u540c\u3002 \u5b9e\u4f8b\u65b9\u6cd5\uff1a\u7531\u5bf9\u8c61\u8c03\u7528\uff1b\u81f3\u5c11\u4e00\u4e2aself\u53c2\u6570\uff1b\u6267\u884c\u5b9e\u4f8b\u65b9\u6cd5\u65f6\uff0c\u81ea\u52a8\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u5bf9\u8c61\u8d4b\u503c\u7ed9self\uff1b \u7c7b\u65b9\u6cd5\uff1a\u7531\u7c7b\u8c03\u7528\uff1b \u81f3\u5c11\u4e00\u4e2acls\u53c2\u6570\uff1b\u6267\u884c\u7c7b\u65b9\u6cd5\u65f6\uff0c\u81ea\u52a8\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u7c7b\u8d4b\u503c\u7ed9cls\uff1b \u9759\u6001\u65b9\u6cd5\uff1a\u7531\u7c7b\u8c03\u7528\uff1b\u65e0\u9ed8\u8ba4\u53c2\u6570\uff1b #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" Created on Thu Aug 8 22:52:19 2019 @author: zzh \"\"\" class Foo ( object ): def __init__ ( self , name ): self . name = name def ord_func ( self ): \"\"\" \u5b9a\u4e49\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u81f3\u5c11\u6709\u4e00\u4e2aself\u53c2\u6570 \"\"\" # print(self.name) print ( '\u5b9e\u4f8b\u65b9\u6cd5' ) @classmethod def class_func ( cls ): \"\"\" \u5b9a\u4e49\u7c7b\u65b9\u6cd5\uff0c\u81f3\u5c11\u6709\u4e00\u4e2acls\u53c2\u6570 \"\"\" print ( '\u7c7b\u65b9\u6cd5' ) @staticmethod def static_func (): #(\u4e3b\u8981\u662f\u9632\u6b62\u51fa\u73b0\u53c8\u6709\u7c7b\u53c8\u6709\u7c7b\u5916\u7684\u51fd\u6570\u51fa\u73b0) \"\"\" \u5b9a\u4e49\u9759\u6001\u65b9\u6cd5 \uff0c\u65e0\u9ed8\u8ba4\u53c2\u6570\"\"\" print ( '\u9759\u6001\u65b9\u6cd5' ) f = Foo ( \"\u4e2d\u56fd\" ) # \u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 f . ord_func () # \u8c03\u7528\u7c7b\u65b9\u6cd5 Foo . class_func () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5 Foo . static_func () \u8fd0\u884c\u7ed3\u679c \u5b9e\u4f8b\u65b9\u6cd5 \u7c7b\u65b9\u6cd5 \u9759\u6001\u65b9\u6cd5","title":"2. \u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5"},{"location":"009-13--python\u63d0\u9ad8-2/#_6","text":"\u76f8\u540c\u70b9\uff1a\u5bf9\u4e8e\u6240\u6709\u7684\u65b9\u6cd5\u800c\u8a00\uff0c\u5747\u5c5e\u4e8e\u7c7b\uff0c\u6240\u4ee5 \u5728\u5185\u5b58\u4e2d\u4e5f\u53ea\u4fdd\u5b58\u4e00\u4efd \u4e0d\u540c\u70b9\uff1a\u65b9\u6cd5\u8c03\u7528\u8005\u4e0d\u540c\u3001\u8c03\u7528\u65b9\u6cd5\u65f6\u81ea\u52a8\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u540c\u3002 \u6ce8\u610f: \u7c7b\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528\u7c7b\u5c5e\u6027\u53ca\u7c7b\u65b9\u6cd5,\u5b9e\u4f8b\u5bf9\u8c61\u4e09\u7c7b\u90fd\u53ef\u8fdb\u884c\u8c03\u7528.","title":"\u5bf9\u6bd4"},{"location":"009-13--python\u63d0\u9ad8-2/#property","text":"","title":"property\u5c5e\u6027"},{"location":"009-13--python\u63d0\u9ad8-2/#1-property","text":"\u4e00\u79cd\u7528\u8d77\u6765\u50cf\u662f\u4f7f\u7528\u7684\u5b9e\u4f8b\u5c5e\u6027\u4e00\u6837\u7684\u7279\u6b8a\u5c5e\u6027\uff0c\u53ef\u4ee5\u5bf9\u5e94\u4e8e\u67d0\u4e2a\u65b9\u6cd5(\u4e0d\u7528\u5bf9\u8fd9\u4e2a\u65b9\u6cd5\u52a0\u62ec\u53f7) # ############### \u5b9a\u4e49 ############### class Foo : def func ( self ): pass # \u5b9a\u4e49property\u5c5e\u6027 @property def prop ( self ): pass # ############### \u8c03\u7528 ############### foo_obj = Foo () foo_obj . func () # \u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 foo_obj . prop # \u8c03\u7528property\u5c5e\u6027","title":"1. \u4ec0\u4e48\u662fproperty\u5c5e\u6027"},{"location":"009-13--python\u63d0\u9ad8-2/#property_1","text":"\u5b9a\u4e49\u65f6\uff0c\u5728\u5b9e\u4f8b\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0 @property \u88c5\u9970\u5668\uff1b\u5e76\u4e14\u4ec5\u6709\u4e00\u4e2aself\u53c2\u6570 \u8c03\u7528\u65f6\uff0c\u65e0\u9700\u62ec\u53f7 \u65b9\u6cd5\uff1a foo_obj . func () property\u5c5e\u6027 \uff1a foo_obj . prop","title":"property\u5c5e\u6027\u7684\u5b9a\u4e49\u548c\u8c03\u7528\u8981\u6ce8\u610f\u4e00\u4e0b\u51e0\u70b9\uff1a"},{"location":"009-13--python\u63d0\u9ad8-2/#2_1","text":"\u5bf9\u4e8e\u4eac\u4e1c\u5546\u57ce\u4e2d\u663e\u793a\u7535\u8111\u4e3b\u673a\u7684\u5217\u8868\u9875\u9762\uff0c\u6bcf\u6b21\u8bf7\u6c42\u4e0d\u53ef\u80fd\u628a\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u663e\u793a\u5230\u9875\u9762\u4e0a\uff0c\u800c\u662f\u901a\u8fc7\u5206\u9875\u7684\u529f\u80fd\u5c40\u90e8\u663e\u793a\uff0c\u6240\u4ee5\u5728\u5411\u6570\u636e\u5e93\u4e2d\u8bf7\u6c42\u6570\u636e\u65f6\u5c31\u8981\u663e\u793a\u7684\u6307\u5b9a\u83b7\u53d6\u4ece\u7b2cm\u6761\u5230\u7b2cn\u6761\u7684\u6240\u6709\u6570\u636e \u8fd9\u4e2a\u5206\u9875\u7684\u529f\u80fd\u5305\u62ec\uff1a \u6839\u636e\u7528\u6237\u8bf7\u6c42\u7684\u5f53\u524d\u9875\u548c\u603b\u6570\u636e\u6761\u6570\u8ba1\u7b97\u51fa m \u548c n \u6839\u636em \u548c n \u53bb\u6570\u636e\u5e93\u4e2d\u8bf7\u6c42\u6570\u636e #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" Created on Thu Aug 8 22:52:19 2019 @author: zzh \"\"\" # ############### \u5b9a\u4e49 ############### class Pager : def __init__ ( self , current_page ): # \u7528\u6237\u5f53\u524d\u8bf7\u6c42\u7684\u9875\u7801\uff08\u7b2c\u4e00\u9875\u3001\u7b2c\u4e8c\u9875...\uff09 self . current_page = current_page # \u6bcf\u9875\u9ed8\u8ba4\u663e\u793a10\u6761\u6570\u636e self . per_items = 10 @property def start ( self ): val = ( self . current_page - 1 ) * self . per_items return val @property def end ( self ): val = self . current_page * self . per_items return val if __name__ == \"__main__\" : # ############### \u8c03\u7528 ############### p = Pager ( 1 ) print ( p . start ) # \u5c31\u662f\u8d77\u59cb\u503c\uff0c\u5373\uff1am print ( p . end ) # \u5c31\u662f\u7ed3\u675f\u503c\uff0c\u5373\uff1an p = Pager ( 100 ) print ( p . start ) # \u5c31\u662f\u8d77\u59cb\u503c\uff0c\u5373\uff1am print ( p . end ) # \u5c31\u662f\u7ed3\u675f\u503c\uff0c\u5373\uff1an \u6267\u884c\u7ed3\u679c 0 10 990 1000","title":"2. \u7b80\u5355\u7684\u5b9e\u4f8b"},{"location":"009-13--python\u63d0\u9ad8-2/#_7","text":"Python\u7684property\u5c5e\u6027\u7684\u529f\u80fd\u662f\uff1aproperty\u5c5e\u6027\u5185\u90e8\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u903b\u8f91\u8ba1\u7b97\uff0c\u6700\u7ec8\u5c06\u8ba1\u7b97\u7ed3\u679c\u8fd4\u56de\u3002(\u590d\u6742\u7684\u8ba1\u7b97\u5c01\u88c5\u5230\u65b9\u6cd5\u91cc\u8fdb\u884c\u8ba1\u7b97,\u4f46\u662f\u8c03\u7528\u7684\u65f6\u5019\u4f7f\u7528\u5c5e\u6027\u8fdb\u884c\u8c03\u7528.\u8fd9\u662f\u5c01\u88c5\u7684\u597d\u5904,\u800c\u4e14\u6bd4\u4f7f\u7528\u65b9\u6cd5\u7684\u597d\u5904\u662f\u4e0d\u7528\u8003\u8651\u4f20\u9012\u51e0\u4e2a\u53c2\u6570,\u8fd9\u6837\u4f1a\u65b9\u4fbf\u5f88\u591a)","title":"\u4ece\u4e0a\u8ff0\u53ef\u89c1"},{"location":"009-13--python\u63d0\u9ad8-2/#3-property","text":"\u88c5\u9970\u5668 \u5373\uff1a\u5728\u65b9\u6cd5\u4e0a\u5e94\u7528\u88c5\u9970\u5668 \u7c7b\u5c5e\u6027 \u5373\uff1a\u5728\u7c7b\u4e2d\u5b9a\u4e49\u503c\u4e3aproperty\u5bf9\u8c61\u7684\u7c7b\u5c5e\u6027","title":"3. property\u5c5e\u6027\u7684\u6709\u4e24\u79cd\u65b9\u5f0f"},{"location":"009-13--python\u63d0\u9ad8-2/#31","text":"\u5728\u7c7b\u7684\u5b9e\u4f8b\u65b9\u6cd5\u4e0a\u5e94\u7528@property\u88c5\u9970\u5668 Python\u4e2d\u7684\u7c7b\u6709 \u7ecf\u5178\u7c7b \u548c \u65b0\u5f0f\u7c7b \uff0c \u65b0\u5f0f\u7c7b \u7684\u5c5e\u6027\u6bd4 \u7ecf\u5178\u7c7b \u7684\u5c5e\u6027\u4e30\u5bcc\u3002\uff08 \u5982\u679c\u7c7b\u7ee7object\uff0c\u90a3\u4e48\u8be5\u7c7b\u662f\u65b0\u5f0f\u7c7b \uff09","title":"3.1 \u88c5\u9970\u5668\u65b9\u5f0f"},{"location":"009-13--python\u63d0\u9ad8-2/#property_2","text":"# ############### \u5b9a\u4e49 ############### class Goods : @property def price ( self ): return \"laowang\" # ############### \u8c03\u7528 ############### obj = Goods () result = obj . price # \u81ea\u52a8\u6267\u884c @property \u4fee\u9970\u7684 price \u65b9\u6cd5\uff0c\u5e76\u83b7\u53d6\u65b9\u6cd5\u7684\u8fd4\u56de\u503c print ( result )","title":"\u7ecf\u5178\u7c7b\uff0c\u5177\u6709\u4e00\u79cd@property\u88c5\u9970\u5668"},{"location":"009-13--python\u63d0\u9ad8-2/#property_3","text":"#coding=utf-8 # ############### \u5b9a\u4e49 ############### class Goods : \"\"\"python3\u4e2d\u9ed8\u8ba4\u7ee7\u627fobject\u7c7b \u4ee5python2\u30013\u6267\u884c\u6b64\u7a0b\u5e8f\u7684\u7ed3\u679c\u4e0d\u540c\uff0c\u56e0\u4e3a\u53ea\u6709\u5728python3\u4e2d\u624d\u6709@xxx.setter @xxx.deleter \"\"\" @property def price ( self ): print ( '@property' ) @price.setter def price ( self , value ): print ( '@price.setter' ) @price.deleter def price ( self ): print ( '@price.deleter' ) # ############### \u8c03\u7528 ############### obj = Goods () obj . price # \u81ea\u52a8\u6267\u884c @property \u4fee\u9970\u7684 price \u65b9\u6cd5\uff0c\u5e76\u83b7\u53d6\u65b9\u6cd5\u7684\u8fd4\u56de\u503c obj . price = 123 # \u81ea\u52a8\u6267\u884c @price.setter \u4fee\u9970\u7684 price \u65b9\u6cd5\uff0c\u5e76\u5c06 123 \u8d4b\u503c\u7ed9\u65b9\u6cd5\u7684\u53c2\u6570 del obj . price # \u81ea\u52a8\u6267\u884c @price.deleter \u4fee\u9970\u7684 price \u65b9\u6cd5","title":"\u65b0\u5f0f\u7c7b\uff0c\u5177\u6709\u4e09\u79cd@property\u88c5\u9970\u5668"},{"location":"009-13--python\u63d0\u9ad8-2/#_8","text":"\u7ecf\u5178\u7c7b\u4e2d\u7684\u5c5e\u6027\u53ea\u6709\u4e00\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u5176\u5bf9\u5e94\u88ab @property \u4fee\u9970\u7684\u65b9\u6cd5 \u65b0\u5f0f\u7c7b\u4e2d\u7684\u5c5e\u6027\u6709\u4e09\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u5e76\u5206\u522b\u5bf9\u5e94\u4e86\u4e09\u4e2a\u88ab@property\u3001@\u65b9\u6cd5\u540d.setter\u3001@\u65b9\u6cd5\u540d.deleter\u4fee\u9970\u7684\u65b9\u6cd5 \u7531\u4e8e\u65b0\u5f0f\u7c7b\u4e2d\u5177\u6709\u4e09\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u51e0\u4e2a\u5c5e\u6027\u7684\u8bbf\u95ee\u7279\u70b9\uff0c\u5206\u522b\u5c06\u4e09\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5c5e\u6027\uff1a\u83b7\u53d6\u3001\u4fee\u6539\u3001\u5220\u9664(\u4e3b\u8981\u5c31\u662f\u4e3a\u4e86\u7528\u7684\u65f6\u5019\u7b80\u4ecb) class Goods ( object ): def __init__ ( self ): # \u539f\u4ef7 self . original_price = 100 # \u6298\u6263 self . discount = 0.8 @property def price ( self ): # \u5b9e\u9645\u4ef7\u683c = \u539f\u4ef7 * \u6298\u6263 new_price = self . original_price * self . discount return new_price @price.setter def price ( self , value ): self . original_price = value #\u53ef\u4ee5\u4f5c\u4e00\u4e9b\u4fee\u6539 @price.deleter def price ( self ): del self . original_price #\u5220\u9664\u5b9e\u4f8b\u5c5e\u6027 obj = Goods () obj . price # \u83b7\u53d6\u5546\u54c1\u4ef7\u683c obj . price = 200 # \u4fee\u6539\u5546\u54c1\u539f\u4ef7 del obj . price # \u5220\u9664\u5546\u54c1\u539f\u4ef7 \u4e00\u822c\u7528\u7684\u5c31\u662f\u83b7\u53d6\u6839\u8bbe\u7f6e\u7684\u5c5e\u6027 @property @price.setter(\u8bbe\u7f6e)","title":"\u6ce8\u610f"},{"location":"009-13--python\u63d0\u9ad8-2/#32-property","text":"\u5f53\u4f7f\u7528\u7c7b\u5c5e\u6027\u7684\u65b9\u5f0f\u521b\u5efaproperty\u5c5e\u6027\u65f6\uff0c \u7ecf\u5178\u7c7b \u548c \u65b0\u5f0f\u7c7b \u65e0\u533a\u522b class Foo : def get_bar ( self ): return 'laowang' BAR = property ( get_bar ) #\u76f8\u5f53\u4e8e\u7c7b\u5c5e\u6027,\u53ea\u4e0d\u8fc7\u662f\u5bf9\u8c61\u65b9\u6cd5\u7684\u8fd4\u56de\u503c obj = Foo () reuslt = obj . BAR # \u81ea\u52a8\u8c03\u7528get_bar\u65b9\u6cd5\uff0c\u5e76\u83b7\u53d6\u65b9\u6cd5\u7684\u8fd4\u56de\u503c print ( reuslt ) property\u65b9\u6cd5\u4e2d\u6709\u4e2a\u56db\u4e2a\u53c2\u6570 \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 \u5bf9\u8c61.\u5c5e\u6027 \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 \u5bf9\u8c61.\u5c5e\u6027 \uff1d XXX \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 del \u5bf9\u8c61.\u5c5e\u6027 \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u4e32\uff0c\u8c03\u7528 \u5bf9\u8c61.\u5c5e\u6027. doc \uff0c\u6b64\u53c2\u6570\u662f\u8be5\u5c5e\u6027\u7684\u63cf\u8ff0\u4fe1\u606f #coding=utf-8 class Foo ( object ): def get_bar ( self ): print ( \"getter...\" ) return 'laowang' def set_bar ( self , value ): \"\"\"\u5fc5\u987b\u4e24\u4e2a\u53c2\u6570\"\"\" print ( \"setter...\" ) return 'set value' + value def del_bar ( self ): print ( \"deleter...\" ) return 'laowang' BAR = property ( get_bar , set_bar , del_bar , \"description...\" ) obj = Foo () obj . BAR # \u81ea\u52a8\u8c03\u7528\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\uff1aget_bar obj . BAR = \"alex\" # \u81ea\u52a8\u8c03\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\uff1aset_bar\u65b9\u6cd5\uff0c\u5e76\u5c06\u201calex\u201d\u5f53\u4f5c\u53c2\u6570\u4f20\u5165 desc = Foo . BAR . __doc__ # \u81ea\u52a8\u83b7\u53d6\u7b2c\u56db\u4e2a\u53c2\u6570\u4e2d\u8bbe\u7f6e\u7684\u503c\uff1adescription... print ( desc ) del obj . BAR # \u81ea\u52a8\u8c03\u7528\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\uff1adel_bar\u65b9\u6cd5 \u7531\u4e8e \u7c7b\u5c5e\u6027\u65b9\u5f0f \u521b\u5efaproperty\u5c5e\u6027\u5177\u67093\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u51e0\u4e2a\u5c5e\u6027\u7684\u8bbf\u95ee\u7279\u70b9\uff0c\u5206\u522b\u5c06\u4e09\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5c5e\u6027\uff1a\u83b7\u53d6\u3001\u4fee\u6539\u3001\u5220\u9664 class Goods ( object ): def __init__ ( self ): # \u539f\u4ef7 self . original_price = 100 # \u6298\u6263 self . discount = 0.8 def get_price ( self ): # \u5b9e\u9645\u4ef7\u683c = \u539f\u4ef7 * \u6298\u6263 new_price = self . original_price * self . discount return new_price def set_price ( self , value ): self . original_price = value def del_price ( self ): del self . original_price PRICE = property ( get_price , set_price , del_price , '\u4ef7\u683c\u5c5e\u6027\u63cf\u8ff0...' ) obj = Goods () obj . PRICE # \u83b7\u53d6\u5546\u54c1\u4ef7\u683c obj . PRICE = 200 # \u4fee\u6539\u5546\u54c1\u539f\u4ef7 del obj . PRICE # \u5220\u9664\u5546\u54c1\u539f\u4ef7","title":"3.2 \u7c7b\u5c5e\u6027\u65b9\u5f0f\uff0c\u521b\u5efa\u503c\u4e3aproperty\u5bf9\u8c61\u7684\u7c7b\u5c5e\u6027"},{"location":"009-13--python\u63d0\u9ad8-2/#4-djangoproperty","text":"WEB\u6846\u67b6 Django \u7684\u89c6\u56fe\u4e2d request.POST \u5c31\u662f\u4f7f\u7528\u7684\u7c7b\u5c5e\u6027\u7684\u65b9\u5f0f\u521b\u5efa\u7684\u5c5e\u6027 class WSGIRequest ( http . HttpRequest ): def __init__ ( self , environ ): script_name = get_script_name ( environ ) path_info = get_path_info ( environ ) if not path_info : # Sometimes PATH_INFO exists, but is empty (e.g. accessing # the SCRIPT_NAME URL without a trailing slash). We really need to # operate as if they'd requested '/'. Not amazingly nice to force # the path like this, but should be harmless. path_info = '/' self . environ = environ self . path_info = path_info self . path = ' %s / %s ' % ( script_name . rstrip ( '/' ), path_info . lstrip ( '/' )) self . META = environ self . META [ 'PATH_INFO' ] = path_info self . META [ 'SCRIPT_NAME' ] = script_name self . method = environ [ 'REQUEST_METHOD' ] . upper () _ , content_params = cgi . parse_header ( environ . get ( 'CONTENT_TYPE' , '' )) if 'charset' in content_params : try : codecs . lookup ( content_params [ 'charset' ]) except LookupError : pass else : self . encoding = content_params [ 'charset' ] self . _post_parse_error = False try : content_length = int ( environ . get ( 'CONTENT_LENGTH' )) except ( ValueError , TypeError ): content_length = 0 self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ], content_length ) self . _read_started = False self . resolver_match = None def _get_scheme ( self ): return self . environ . get ( 'wsgi.url_scheme' ) def _get_request ( self ): warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or ' '`request.POST` instead.' , RemovedInDjango19Warning , 2 ) if not hasattr ( self , '_request' ): self . _request = datastructures . MergeDict ( self . POST , self . GET ) return self . _request @cached_property def GET ( self ): # The WSGI spec says 'QUERY_STRING' may be absent. raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' ) return http . QueryDict ( raw_query_string , encoding = self . _encoding ) # ############### \u770b\u8fd9\u91cc\u770b\u8fd9\u91cc ############### def _get_post ( self ): if not hasattr ( self , '_post' ): self . _load_post_and_files () return self . _post # ############### \u770b\u8fd9\u91cc\u770b\u8fd9\u91cc ############### def _set_post ( self , post ): self . _post = post @cached_property def COOKIES ( self ): raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' ) return http . parse_cookie ( raw_cookie ) def _get_files ( self ): if not hasattr ( self , '_files' ): self . _load_post_and_files () return self . _files # ############### \u770b\u8fd9\u91cc\u770b\u8fd9\u91cc ############### POST = property ( _get_post , _set_post ) FILES = property ( _get_files ) REQUEST = property ( _get_request )","title":"4. Django\u6846\u67b6\u4e2d\u5e94\u7528\u4e86property\u5c5e\u6027\uff08\u4e86\u89e3\uff09"},{"location":"009-13--python\u63d0\u9ad8-2/#_9","text":"\u5b9a\u4e49property\u5c5e\u6027\u5171\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u5206\u522b\u662f\u3010\u88c5\u9970\u5668\u3011\u548c\u3010\u7c7b\u5c5e\u6027\u3011\uff0c\u800c\u3010\u88c5\u9970\u5668\u3011\u65b9\u5f0f\u9488\u5bf9\u7ecf\u5178\u7c7b\u548c\u65b0\u5f0f\u7c7b\u53c8\u6709\u6240\u4e0d\u540c\u3002 \u901a\u8fc7\u4f7f\u7528property\u5c5e\u6027\uff0c\u80fd\u591f\u7b80\u5316\u8c03\u7528\u8005\u5728\u83b7\u53d6\u6570\u636e\u7684\u6d41\u7a0b","title":"\u7efc\u4e0a\u6240\u8ff0:"},{"location":"009-13--python\u63d0\u9ad8-2/#134property-","text":"","title":"13.4property\u5c5e\u6027-\u5e94\u7528"},{"location":"009-13--python\u63d0\u9ad8-2/#1-gettersetterpython","text":"class Money ( object ): def __init__ ( self ): self . __money = 0 #\u79c1\u6709\u5c5e\u6027 def getMoney ( self ): #get\u65b9\u6cd5 return self . __money def setMoney ( self , value ): #set\u65b9\u6cd5 if isinstance ( value , int ): self . __money = value else : print ( \"error:\u4e0d\u662f\u6574\u578b\u6570\u5b57\" )","title":"1. \u79c1\u6709\u5c5e\u6027\u6dfb\u52a0getter\u548csetter\u65b9\u6cd5(python\u4e00\u822c\u662f\u4e0d\u7528\u7684)"},{"location":"009-13--python\u63d0\u9ad8-2/#2-propertygettersetter","text":"class Money ( object ): def __init__ ( self ): self . __money = 0 def getMoney ( self ): return self . __money def setMoney ( self , value ): if isinstance ( value , int ): self . __money = value else : print ( \"error:\u4e0d\u662f\u6574\u578b\u6570\u5b57\" ) # \u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\uff0c\u5f53\u5bf9\u8fd9\u4e2amoney\u8bbe\u7f6e\u503c\u65f6\u8c03\u7528setMoney,\u5f53\u83b7\u53d6\u503c\u65f6\u8c03\u7528getMoney money = property ( getMoney , setMoney ) #\u7c7b\u5c5e\u6027 a = Money () a . money = 100 # \u8c03\u7528setMoney\u65b9\u6cd5 print ( a . money ) # \u8c03\u7528getMoney\u65b9\u6cd5 #100","title":"2. \u4f7f\u7528property\u5347\u7ea7getter\u548csetter\u65b9\u6cd5"},{"location":"009-13--python\u63d0\u9ad8-2/#3-propertygettersetter","text":"\u91cd\u65b0\u5b9e\u73b0\u4e00\u4e2a\u5c5e\u6027\u7684\u8bbe\u7f6e\u548c\u8bfb\u53d6\u65b9\u6cd5,\u53ef\u505a\u8fb9\u754c\u5224\u5b9a class Money ( object ): def __init__ ( self ): self . __money = 0 # \u4f7f\u7528\u88c5\u9970\u5668\u5bf9money\u8fdb\u884c\u88c5\u9970\uff0c\u90a3\u4e48\u4f1a\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a\u53ebmoney\u7684\u5c5e\u6027\uff0c\u5f53\u8c03\u7528\u83b7\u53d6money\u7684\u503c\u65f6\uff0c\u8c03\u7528\u88c5\u9970\u7684\u65b9\u6cd5 @property def money ( self ): return self . __money # \u4f7f\u7528\u88c5\u9970\u5668\u5bf9money\u8fdb\u884c\u88c5\u9970\uff0c\u5f53\u5bf9money\u8bbe\u7f6e\u503c\u65f6\uff0c\u8c03\u7528\u88c5\u9970\u7684\u65b9\u6cd5 @money.setter def money ( self , value ): if isinstance ( value , int ): self . __money = value else : print ( \"error:\u4e0d\u662f\u6574\u578b\u6570\u5b57\" ) a = Money () a . money = 100 print ( a . money )","title":"3. \u4f7f\u7528property\u53d6\u4ee3getter\u548csetter\u65b9\u6cd5"},{"location":"009-13--python\u63d0\u9ad8-2/#135","text":"\u65e0\u8bba\u4eba\u6216\u4e8b\u7269\u5f80\u5f80\u90fd\u6709\u4e0d\u6309\u5957\u8def\u51fa\u724c\u7684\u60c5\u51b5\uff0cPython\u7684\u7c7b\u5c5e\u6027\u4e5f\u662f\u5982\u6b64\uff0c\u5b58\u5728\u7740\u4e00\u4e9b\u5177\u6709\u7279\u6b8a\u542b\u4e49\u7684\u5c5e\u6027\uff0c\u8be6\u60c5\u5982\u4e0b\uff1a","title":"13.5 \u9b54\u6cd5\u5c5e\u6027"},{"location":"009-13--python\u63d0\u9ad8-2/#1-__doc__","text":"\u8868\u793a\u7c7b\u7684\u63cf\u8ff0\u4fe1\u606f class Foo : \"\"\" \u63cf\u8ff0\u7c7b\u4fe1\u606f\uff0c\u8fd9\u662f\u7528\u4e8e\u770b\u7247\u7684\u795e\u5947 \"\"\" #\u7c7b\u7684\u63cf\u8ff0\u4fe1\u606f def func ( self ): pass print ( Foo . __doc__ ) \u6267\u884c\u7ed3\u679c \u63cf\u8ff0\u7c7b\u4fe1\u606f\uff0c\u8fd9\u662f\u7528\u4e8e\u770b\u7247\u7684\u795e\u5947 \u4e5f\u53ef\u4ee5\u4f7f\u7528help\u51fd\u6570\u83b7\u5f97\u540c\u6837\u7684\u6548\u679c help ( Foo ) Help on class Foo in module __main__ : class Foo ( builtins . object ) | \u63cf\u8ff0\u7c7b\u4fe1\u606f\uff0c\u8fd9\u662f\u7528\u4e8e\u770b\u7247\u7684\u795e\u5947 | | Methods defined here : | | func ( self ) | | ---------------------------------------------------------------------- | Data descriptors defined here : | | __dict__ | dictionary for instance variables ( if defined ) | | __weakref__ | list of weak references to the object ( if defined )","title":"1. __doc__"},{"location":"009-13--python\u63d0\u9ad8-2/#2-__module__-__class__","text":"module \u8868\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u5bf9\u8c61\u5728\u90a3\u4e2a\u6a21\u5757 class \u8868\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u5bf9\u8c61\u7684\u7c7b\u662f\u4ec0\u4e48 test . py # -*- coding:utf-8 -*- class Person ( object ): def __init__ ( self ): self . name = 'laowang' main . py from test import Person obj = Person () print ( obj . __module__ ) # \u8f93\u51fa test \u5373\uff1a\u8f93\u51fa\u6a21\u5757 print ( obj . __class__ ) # \u8f93\u51fa test.Person \u5373\uff1a\u8f93\u51fa\u7c7b \u6267\u884cmain.py test < class ' test . Person '>","title":"2. __module__ \u548c __class__"},{"location":"009-13--python\u63d0\u9ad8-2/#3__init__","text":"\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u901a\u8fc7\u7c7b\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u81ea\u52a8\u89e6\u53d1\u6267\u884c class Person : def __init__ ( self , name ): self . name = name self . age = 18 obj = Person ( 'laowang' ) # \u81ea\u52a8\u6267\u884c\u7c7b\u4e2d\u7684 __init__ \u65b9\u6cd5","title":"3.__init__"},{"location":"009-13--python\u63d0\u9ad8-2/#4-__del__","text":"\u5f53\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u88ab\u91ca\u653e\u65f6\uff0c\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u3002 \u6ce8\uff1a\u6b64\u65b9\u6cd5\u4e00\u822c\u65e0\u987b\u5b9a\u4e49\uff0c\u56e0\u4e3aPython\u662f\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00\uff0c\u7a0b\u5e8f\u5458\u5728\u4f7f\u7528\u65f6\u65e0\u9700\u5173\u5fc3\u5185\u5b58\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u56e0\u4e3a\u6b64\u5de5\u4f5c\u90fd\u662f\u4ea4\u7ed9Python\u89e3\u91ca\u5668\u6765\u6267\u884c\uff0c\u6240\u4ee5\uff0c __del__ \u7684\u8c03\u7528\u662f\u7531\u89e3\u91ca\u5668\u5728\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u7684\u3002 class Foo : def __del__ ( self ): pass","title":"4. __del__"},{"location":"009-13--python\u63d0\u9ad8-2/#5-__call__","text":"\u5bf9\u8c61\u540e\u9762\u52a0\u62ec\u53f7\uff0c\u89e6\u53d1\u6267\u884c\u3002 \u6ce8\uff1a __init__ \u65b9\u6cd5\u7684\u6267\u884c\u662f\u7531\u521b\u5efa\u5bf9\u8c61\u89e6\u53d1\u7684\uff0c\u5373\uff1a \u5bf9\u8c61 = \u7c7b\u540d() \uff1b\u800c\u5bf9\u4e8e __call__ \u65b9\u6cd5\u7684\u6267\u884c\u662f\u7531\u5bf9\u8c61\u540e\u52a0\u62ec\u53f7\u89e6\u53d1\u7684\uff0c\u5373\uff1a \u5bf9\u8c61() \u6216\u8005 \u7c7b()() class Foo : def __init__ ( self ): pass def __call__ ( self , * args , ** kwargs ): print ( '__call__' ) print ( \"\u6211\u662fcall\u65b9\u6cd5\" ) obj = Foo () # \u6267\u884c __init__ obj () # \u6267\u884c __call__ \u6267\u884c\u7ed3\u679c __call__ \u6211\u662f call\u65b9\u6cd5","title":"5. __call__"},{"location":"009-13--python\u63d0\u9ad8-2/#6-__dict__","text":"\u7c7b\u6216\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5c5e\u6027 \u7c7b\u7684\u5b9e\u4f8b\u5c5e\u6027\u5c5e\u4e8e\u5bf9\u8c61\uff1b\u7c7b\u4e2d\u7684\u7c7b\u5c5e\u6027\u548c\u65b9\u6cd5\u7b49\u5c5e\u4e8e\u7c7b\uff0c\u5373\uff1a class Province ( object ): country = 'China' def __init__ ( self , name , count ): self . name = name self . count = count def func ( self , * args , ** kwargs ): print ( 'func' ) # \u83b7\u53d6\u7c7b\u7684\u5c5e\u6027\uff0c\u5373\uff1a\u7c7b\u5c5e\u6027\u3001\u65b9\u6cd5\u3001 print ( Province . __dict__ ) # \u8f93\u51fa\uff1a{'__dict__': <attribute '__dict__' of 'Province' objects>, '__module__': '__main__', 'country': 'China', '__doc__': None, '__weakref__': <attribute '__weakref__' of 'Province' objects>, 'func': <function Province.func at 0x101897950>, '__init__': <function Province.__init__ at 0x1018978c8>} obj1 = Province ( '\u5c71\u4e1c' , 10000 ) print ( obj1 . __dict__ ) # \u83b7\u53d6 \u5bf9\u8c61obj1 \u7684\u5c5e\u6027 # \u8f93\u51fa\uff1a{'count': 10000, 'name': '\u5c71\u4e1c'} obj2 = Province ( '\u5c71\u897f' , 20000 ) print ( obj2 . __dict__ ) # \u83b7\u53d6 \u5bf9\u8c61obj1 \u7684\u5c5e\u6027 # \u8f93\u51fa\uff1a{'count': 20000, 'name': '\u5c71\u897f'}","title":"6. __dict__"},{"location":"009-13--python\u63d0\u9ad8-2/#7__str__","text":"\u5982\u679c\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86 __str__ \u65b9\u6cd5\uff0c\u90a3\u4e48\u5728\u6253\u5370 \u5bf9\u8c61 \u65f6\uff0c\u9ed8\u8ba4\u8f93\u51fa\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u3002 obj = Foo () # -*- coding: utf-8 -*- #main.py class Foo : def __str__ ( self ): return 'laowang' obj = Foo () print ( obj ) #\u6839\u5bf9\u8c61()\u8fdb\u884c\u533a\u522b # \u8f93\u51fa\uff1alaowang print ( \"\u5bf9\u8c61\u7684\u63cf\u8ff0 % s \" % obj ) #\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e5f\u662f\u53ef\u4ee5\u5f97\u5230\u5bf9\u8c61\u7684str\u63cf\u8ff0\u7684 print ( obj ) #\u6839\u5bf9\u8c61()\u8fdb\u884c\u533a\u522b # \u8f93\u51fa\uff1alaowang \u6267\u884c laowang \u5bf9\u8c61\u7684\u63cf\u8ff0 laowang","title":"7.__str__"},{"location":"009-13--python\u63d0\u9ad8-2/#8__getitem____setitem____delitem__","text":"\u7528\u4e8e\u7d22\u5f15\u64cd\u4f5c\uff0c\u5982\u5b57\u5178\u3002\u4ee5\u4e0a\u5206\u522b\u8868\u793a\u83b7\u53d6\u3001\u8bbe\u7f6e\u3001\u5220\u9664\u6570\u636e # -*- coding:utf-8 -*- class Foo ( object ): def __getitem__ ( self , key ): print ( '__getitem__' , key ) def __setitem__ ( self , key , value ): print ( '__setitem__' , key , value ) def __delitem__ ( self , key ): print ( '__delitem__' , key ) obj = Foo () result = obj [ 'k1' ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __getitem__ obj [ 'k2' ] = 'laowang' # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __setitem__ del obj [ 'k1' ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __delitem__","title":"8\u3001__getitem__\u3001__setitem__\u3001__delitem__"},{"location":"009-13--python\u63d0\u9ad8-2/#9__getslice____setslice____delslice__","text":"\u8be5\u4e09\u4e2a\u65b9\u6cd5\u7528\u4e8e\u5206\u7247\u64cd\u4f5c\uff0c\u5982\uff1a\u5217\u8868 # -*- coding:utf-8 -*- class Foo ( object ): def __getslice__ ( self , i , j ): print ( '__getslice__' , i , j ) def __setslice__ ( self , i , j , sequence ): print ( '__setslice__' , i , j ) def __delslice__ ( self , i , j ): print ( '__delslice__' , i , j ) obj = Foo () obj [ - 1 : 1 ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __getslice__ obj [ 0 : 1 ] = [ 11 , 22 , 33 , 44 ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __setslice__ del obj [ 0 : 2 ] # \u81ea\u52a8\u89e6\u53d1\u6267\u884c __delslice__","title":"9\u3001__getslice__\u3001__setslice__\u3001__delslice__"},{"location":"009-13--python\u63d0\u9ad8-2/#136","text":"\u7ee7\u627f - \u662f\u57fa\u4e8ePython\u4e2d\u7684\u5c5e\u6027\u67e5\u627e(\u5982X.name) \u591a\u6001 - \u5728X.method\u65b9\u6cd5\u4e2d\uff0cmethod\u7684\u610f\u4e49\u53d6\u51b3\u4e8eX\u7684\u7c7b\u578b(\u5b50\u7c7b\u91cd\u5199\u4e86\u7528\u5b57\u7c7b\u7684,\u6ca1\u6709\u91cd\u5199\u7528\u7236\u7c7b\u7684.\u540c\u6837\u662f\u5f00\u8f66,\u7236\u4eb2\u5f00\u5927\u8d27\u8f66,\u513f\u5b50\u5f00\u5c0f\u8d27\u8f66.\u8fd9\u5c31\u662f\u591a\u6001) \u5c01\u88c5 - \u65b9\u6cd5\u548c\u8fd0\u7b97\u7b26\u5b9e\u73b0\u884c\u4e3a\uff0c\u6570\u636e\u9690\u85cf\u9ed8\u8ba4\u662f\u4e00\u79cd\u60ef\u4f8b","title":"13.6 \u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1"},{"location":"009-13--python\u63d0\u9ad8-2/#_10","text":"\u817e\u8baf\u5373\u65f6\u901a\u4fe1\u6a21\u5757,\u521d\u7ea7\u5c01\u88c5 #! /usr/bin/env python # coding: utf-8 import random import time class Message ( object ): def __init__ ( self , msgarr = [], toacc = '' ): self . msgbody = msgarr # \u6b64\u5904\u4e3aMsgDict\u5bf9\u8c61\u5b9e\u4f8b\u7684\u5217\u8868\u6216\u8005\u7a7a\u5217\u8868 self . toacc = toacc # toacc\u4e3a\u5b57\u7b26\u4e32(\u5355\u53d1)\u6216\u8005\u5217\u8868(\u6279\u91cf\u53d1) self . msgrandom = random . randint ( 1 , 1000000000 ) self . msgrequest = { 'To_Account' : toacc , # \u6d88\u606f\u63a5\u6536\u65b9\u8d26\u53f7 'MsgRandom' : self . msgrandom , # \u6d88\u606f\u968f\u673a\u6570\uff0c\u7531\u968f\u673a\u51fd\u6570\u4ea7\u751f 'MsgBody' : [ t . msg for t in msgarr ] } def del_option ( self , option ): if option in ( set ( self . msgrequest ) - set ([ 'To_Account' , 'MsgRandom' , 'MsgBody' ])): self . __dict__ . pop ( option ) self . msgrequest . pop ( option ) def append_msg ( self , msg ): self . msgbody . append ( msg ) self . msgrequest [ 'MsgBody' ] . append ( msg . msg ) def insert_msg ( self , index , msg ): self . msgbody . insert ( index , msg ) self . msgrequest [ 'MsgBody' ] . insert ( msg . msg ) def del_msg ( self , index ): if index in range ( len ( self . msgbody )): del self . msgbody [ index ] del sel . msgrequest [ 'MsgBody' ][ index ] def set_from ( self , fromacc ): # \u6307\u5b9a\u6d88\u606f\u7684\u53d1\u9001\u65b9\uff0c\u9ed8\u8ba4\u4e3a\u670d\u52a1\u5668\u53d1\u9001 self . fromacc = fromacc self . msgrequest [ 'From_Account' ] = fromacc def set_to ( self , toacc ): # \u6307\u5b9a\u6d88\u606f\u7684\u63a5\u6536\u65b9\uff0c\u53ef\u4ee5\u4e3aString(\u5355\u53d1),\u53ef\u4ee5\u4e3aList(\u6279\u91cf\u53d1\u9001) self . toacc = toacc self . msgrequest [ 'To_Account' ] = toacc def refresh_random ( self ): self . msgrandom = random . randint ( 1 , 1000000000 ) self . msgrequest [ 'MsgRandom' ] = self . msgrandom , # \u6d88\u606f\u968f\u673a\u6570\uff0c\u7531\u968f\u673a\u51fd\u6570\u4ea7\u751f def set_sync ( self , sync ): # \u540c\u6b65\u9009\u9879\uff1a1, \u628a\u6d88\u606f\u540c\u6b65\u5230From_Account\u5728\u7ebf\u7ec8\u7aef\u548c\u6f2b\u6e38\u4e0a # 2, \u6d88\u606f\u4e0d\u540c\u6b65\u81f3From_Account # \u82e5\u4e0d\u586b\u5199\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5c06\u6d88\u606f\u540c\u6b65 # \u4ec5\u5728\u5355\u53d1\u5355\u804a\u6d88\u606f\u4e2d\u53ef\u8c03\u7528 self . sync = sync self . msgrequest [ 'SyncOtherMachine' ] = sync def set_timestamp ( self ): # \u8bbe\u7f6e\u6d88\u606f\u65f6\u95f4\u6233\uff0cunix\u65f6\u95f4, \u4ec5\u5728\u5355\u53d1\u5355\u804a\u6d88\u606f\u4e2d\u53ef\u4ee5\u8c03\u7528 self . timestamp = int ( time . time ()) self . msgrequest [ 'MsgTimeStamp' ] = self . timestamp def set_offlinepush ( self , pushflag = 0 , desc = '' , ext = '' , sound = '' ): # \u4ec5\u9002\u7528\u4e8eAPNa\u63a8\u9001\uff0c\u4e0d\u9002\u7528\u4e8e\u5b89\u5353\u5382\u5546\u63a8\u9001 self . msgrequest [ 'OfflinePushInfo' ] = { 'PushFlag' : pushflag , 'Desc' : desc , 'Ext' : ext , 'Sound' : sound } class MsgDict ( object ): def __init__ ( self , msgtype = '' , msgcontent = {}): self . msgtype = msgtype self . msgcontent = msgcontent @property def msg ( self ): return { 'MsgType' : self . msgtype , 'MsgContent' : self . msgcontent } def set_content ( self , content ): self . msgcontent = content class TextMsg ( MsgDict ): def __init__ ( self , text = '' , msgtype = 'TIMTextElem' ): self . text = text content = { 'Text' : text } super ( TextMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_text ( self , text ): self . text = text self . msgcontent [ 'Text' ] = text class LocationMsg ( MsgDict ): def __init__ ( self , desc = '' , latitude = 0 , longitude = 0 , msgtype = 'TIMLocationElem' ): self . desc = desc self . latitude = latitude self . longitude = longitude content = { 'Desc' : desc , # \u5730\u7406\u4f4d\u7f6e\u63cf\u8ff0\u4fe1\u606f, String 'Latitude' : latitude , # \u7eac\u5ea6, Number 'Longitude' : longitude # \u7ecf\u5ea6, Number } super ( LocationMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_desc ( self , desc ): self . desc = desc self . msgcontent [ 'Desc' ] = desc def set_location ( self , latitude , longitude ): self . latitude = latitude self . longitude = longitude self . msgcontent [ 'Latitude' ] = latitude self . msgcontent [ 'Longitude' ] = longitude def set_latitude ( self , latitude ): self . latitude = latitude self . msgcontent [ 'Latitude' ] = latitude def set_longitude ( self , longitude ): self . longitude = longitude self . msgcontent [ 'Longitude' ] = longitude class FaceMsg ( MsgDict ): def __init__ ( self , index = 1 , data = '' , msgtype = 'TIMFaceElem' ): self . index = index self . data = data content = { 'Index' : index , # \u8868\u60c5\u7d22\u5f15\uff0c\u7528\u6237\u81ea\u5b9a\u4e49, Number 'Data' : data # \u989d\u5916\u6570\u636e, String } super ( TextMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_index ( self , index ): self . index = index self . msgcontent [ 'Index' ] = index def set_data ( self , data ): self . data = data self . msgcontent [ 'Data' ] = data class CustomMsg ( MsgDict ): def __init__ ( self , data = '' , desc = '' , ext = '' , sound = '' , msgtype = 'TIMCustomElem' ): self . data = data self . desc = desc self . ext = ext self . sound = sound content = { 'Data' : data , # \u81ea\u5b9a\u4e49\u6d88\u606f\u6570\u636e\u3002\u4e0d\u4f5c\u4e3aAPNS\u7684payload\u4e2d\u5b57\u6bb5\u4e0b\u53d1\uff0c\u6545\u4ecepayload\u4e2d\u65e0\u6cd5\u83b7\u53d6Data\u5b57\u6bb5, String 'Desc' : desc , # \u81ea\u5b9a\u4e49\u6d88\u606f\u63cf\u8ff0\uff0c\u5f53\u63a5\u6536\u65b9\u4e3aiphone\u540e\u53f0\u5728\u7ebf\u65f6\uff0c\u505aios\u79bb\u7ebfPush\u65f6\u6587\u672c\u5c55\u793a 'Ext' : ext , # \u6269\u5c55\u5b57\u6bb5\uff0c\u5f53\u63a5\u6536\u65b9\u4e3aios\u7cfb\u7edf\u4e14\u5e94\u7528\u5904\u5728\u540e\u53f0\u65f6\uff0c\u6b64\u5b57\u6bb5\u4f5c\u4e3aAPNS\u8bf7\u6c42\u5305Payloads\u4e2d\u7684ext\u952e\u503c\u4e0b\u53d1\uff0cExt\u7684\u534f\u8bae\u683c\u5f0f\u7531\u4e1a\u52a1\u65b9\u786e\u5b9a\uff0cAPNS\u53ea\u505a\u900f\u4f20 'Sound' : sound # \u81ea\u5b9a\u4e49APNS\u63a8\u9001\u94c3\u58f0 } super ( CustomMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_data ( self , data ): self . data = data self . msgcontent [ 'Data' ] = data def set_desc ( self , desc ): self . desc = desc self . msgcontent [ 'Desc' ] = desc def set_ext ( self , ext ): self . ext = ext self . msgcontent [ 'Ext' ] = ext def set_sound ( self , sound ): self . sound = sound self . msgcontent [ 'Sound' ] = sound class SoundMsg ( MsgDict ): def __init__ ( self , uuid = '' , size = 0 , second = 0 , msgtype = 'TIMSoundElem' ): self . uuid = uuid self . size = size self . second = second content = { 'UUID' : uuid , # \u8bed\u97f3\u5e8f\u5217\u53f7\uff0c\u540e\u53f0\u7528\u4e8e\u7d22\u5f15\u8bed\u97f3\u7684\u952e\u503c\uff0cString 'Size' : size , # \u8bed\u97f3\u6570\u636e\u5927\u5c0f, Number 'Second' : second # \u8bed\u97f3\u65f6\u957f\uff0c\u5355\u4f4d\u79d2 Number } super ( SoundMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_uuid ( self , uuid ): self . uuid = uuid self . msgcontent [ 'UUID' ] = uuid def set_size ( self , size ): self . size = size self . msgcontent [ 'Size' ] = size def set_second ( self , second ): self . second = second self . msgcontent [ 'Second' ] = second class ImageMsg ( MsgDict ): def __init__ ( self , uuid = '' , imgformat = 0 , imginfo = [], msgtype = 'TIMImageElem' ): self . uuid = uuid self . imgformat = imgformat self . imginfo = imginfo content = { 'UUID' : uuid , # \u56fe\u7247\u5e8f\u5217\u53f7\uff0c\u540e\u53f0\u7528\u4e8e\u7d22\u5f15\u8bed\u97f3\u7684\u952e\u503c\uff0cString 'ImageFormat' : imgformat , # \u56fe\u7247\u683c\u5f0f\uff0c BMP=1, JPG=2, GIF=3, \u5176\u4ed6=0, Number 'ImageInfoArray' : [ t . info for t in imginfo ] # \u539f\u56fe\uff0c\u7f29\u7565\u56fe\u6216\u8005\u5927\u56fe\u4e0b\u8f7d\u4fe1\u606f, Array } super ( ImageMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_uuid ( self , uuid ): self . uuid = uuid self . msgcontent [ 'UUID' ] = uuid def set_format ( self , imgformat ): self . imgformat = imgformat self . msgcontent [ 'ImageFormat' ] = imgformat def append_info ( self , info ): # info \u4e3aImageInfo\u5bf9\u8c61\u5b9e\u4f8b self . imginfo . append ( info ) self . msgcontnet [ 'ImageInfoArray' ] . append ( info . info ) def insert_info ( self , index , info ): self . imginfo . insert ( index , info ) self . msgcontent [ 'ImageInfoArray' ] . insert ( index , info . info ) def del_info ( self , index ): del self . imginfo [ index ] del self . msgcontent [ 'ImageInfoArray' ][ index ] class FileMsg ( MsgDict ): def __init__ ( self , uuid = '' , size = 0 , name = '' , msgtype = 'TIMFileElem' ): self . uuid = uuid self . size = size self . name = name content = { 'UUID' : uuid , # \u6587\u4ef6\u5e8f\u5217\u53f7\uff0c\u540e\u53f0\u7528\u4e8e\u7d22\u5f15\u8bed\u97f3\u7684\u952e\u503c\uff0cString 'FileSize' : size , # \u6587\u4ef6\u6570\u636e\u5927\u5c0f, Number 'FileName' : name # \u6587\u4ef6\u540d\u79f0/\u8def\u5f84\uff0c String } super ( FileMsg , self ) . __init__ ( msgtype = msgtype , msgcontent = content ) def set_uuid ( self , uuid ): self . uuid = uuid self . msgcontent [ 'UUID' ] = UUID def set_size ( self , size ): self . size = size self . msgcontent [ 'FileSize' ] = size def set_name ( self , name ): self . name = name self . msgcontent [ 'FileName' ] = name class ImageInfo ( object ): def __init__ ( self , itype = 1 , size = 0 , width = 0 , height = 0 , url = '' ): #\u56fe\u7247\u7c7b\u578b\uff0c 1-\u539f\u56fe\uff0c 2-\u5927\u56fe\uff0c 3-\u7f29\u7565\u56fe, 0-\u5176\u4ed6 self . itype = itype # \u56fe\u7247\u6570\u636e\u5927\u5c0f,Number self . size = size # \u56fe\u7247\u5bbd\u5ea6,Number self . width = width # \u56fe\u7247\u9ad8\u5ea6, Number self . height = height # \u56fe\u7247\u4e0b\u8f7d\u5730\u5740,String self . url = url @property def info ( self ): return { 'Type' : self . itype , 'Size' : self . size , 'Width' : self . width , 'Height' : self . height , 'URL' : self . url } def set_type ( self , itype ): self . itype = itype def set_size ( self , size ): self . size = size def set_width ( self , width ): self . width = width def set_height ( self , height ): self . height = height def set_url ( self , url ): self . url = url","title":"\u53c2\u8003\u5b9e\u4f8b"},{"location":"009-13--python\u63d0\u9ad8-2/#python-wechat_sdk","text":"http://wechat-python-sdk.com/ \u622a\u53d6\u90e8\u5206\u4ee3\u7801\uff0c\u5b66\u4e60\u7c7b\u7684\u8bbe\u8ba1 from __future__ import unicode_literals import time from wechat_sdk.lib.crypto import BasicCrypto from wechat_sdk.lib.request import WechatRequest from wechat_sdk.exceptions import NeedParamError from wechat_sdk.utils import disable_urllib3_warning class WechatConf ( object ): \"\"\" WechatConf \u914d\u7f6e\u7c7b \u8be5\u7c7b\u5c06\u4f1a\u5b58\u50a8\u6240\u6709\u548c\u5fae\u4fe1\u5f00\u53d1\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f, \u540c\u65f6\u4e5f\u4f1a\u7ef4\u62a4\u914d\u7f6e\u4fe1\u606f\u7684\u6709\u6548\u6027. \"\"\" def __init__ ( self , ** kwargs ): \"\"\" :param kwargs: \u914d\u7f6e\u4fe1\u606f\u5b57\u5178, \u53ef\u7528\u5b57\u5178 key \u503c\u53ca\u5bf9\u5e94\u89e3\u91ca\u5982\u4e0b: 'token': \u5fae\u4fe1 Token 'appid': App ID 'appsecret': App Secret 'encrypt_mode': \u52a0\u89e3\u5bc6\u6a21\u5f0f ('normal': \u660e\u6587\u6a21\u5f0f, 'compatible': \u517c\u5bb9\u6a21\u5f0f, 'safe': \u5b89\u5168\u6a21\u5f0f(\u9ed8\u8ba4)) 'encoding_aes_key': EncodingAESKey \u503c (\u4f20\u5165\u6b64\u503c\u5fc5\u987b\u4fdd\u8bc1\u540c\u65f6\u4f20\u5165 token, appid, \u5426\u5219\u629b\u51fa\u5f02\u5e38) 'access_token_getfunc': access token \u83b7\u53d6\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'access_token_setfunc': access token \u5199\u5165\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'access_token_refreshfunc': access token \u5237\u65b0\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'access_token': \u76f4\u63a5\u5bfc\u5165\u7684 access token \u503c, \u8be5\u503c\u9700\u8981\u5728\u4e0a\u4e00\u6b21\u8be5\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\u624b\u52a8\u8fdb\u884c\u7f13\u5b58\u5e76\u5728\u6b64\u5904\u4f20\u5165, \u5982\u679c\u4e0d \u4f20\u5165, \u5c06\u4f1a\u5728\u9700\u8981\u65f6\u81ea\u52a8\u91cd\u65b0\u83b7\u53d6 (\u4f20\u5165 access_token_getfunc \u548c access_token_setfunc \u51fd\u6570 \u540e\u5c06\u4f1a\u81ea\u52a8\u5ffd\u7565\u6b64\u5904\u7684\u4f20\u5165\u503c) 'access_token_expires_at': \u76f4\u63a5\u5bfc\u5165\u7684 access token \u7684\u8fc7\u671f\u65e5\u671f, \u8be5\u503c\u9700\u8981\u5728\u4e0a\u4e00\u6b21\u8be5\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\u624b\u52a8\u8fdb\u884c\u7f13\u5b58 \u5e76\u5728\u6b64\u5904\u4f20\u5165, \u5982\u679c\u4e0d\u4f20\u5165, \u5c06\u4f1a\u5728\u9700\u8981\u65f6\u81ea\u52a8\u91cd\u65b0\u83b7\u53d6 (\u4f20\u5165 access_token_getfunc \u548c access_token_setfunc \u51fd\u6570\u540e\u5c06\u4f1a\u81ea\u52a8\u5ffd\u7565\u6b64\u5904\u7684\u4f20\u5165\u503c) 'jsapi_ticket_getfunc': jsapi ticket \u83b7\u53d6\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'jsapi_ticket_setfunc': jsapi ticket \u5199\u5165\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'jsapi_ticket_refreshfunc': jsapi ticket \u5237\u65b0\u51fd\u6570 (\u7528\u4e8e\u5355\u673a\u53ca\u5206\u5e03\u5f0f\u73af\u5883\u4e0b, \u5177\u4f53\u683c\u5f0f\u53c2\u89c1\u6587\u6863) 'jsapi_ticket': \u76f4\u63a5\u5bfc\u5165\u7684 jsapi ticket \u503c, \u8be5\u503c\u9700\u8981\u5728\u4e0a\u4e00\u6b21\u8be5\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\u624b\u52a8\u8fdb\u884c\u7f13\u5b58\u5e76\u5728\u6b64\u5904\u4f20\u5165, \u5982\u679c\u4e0d \u4f20\u5165, \u5c06\u4f1a\u5728\u9700\u8981\u65f6\u81ea\u52a8\u91cd\u65b0\u83b7\u53d6 (\u4f20\u5165 jsapi_ticket_getfunc \u548c jsapi_ticket_setfunc \u51fd\u6570 \u540e\u5c06\u4f1a\u81ea\u52a8\u5ffd\u7565\u6b64\u5904\u7684\u4f20\u5165\u503c) 'jsapi_ticket_expires_at': \u76f4\u63a5\u5bfc\u5165\u7684 jsapi ticket \u7684\u8fc7\u671f\u65e5\u671f, \u8be5\u503c\u9700\u8981\u5728\u4e0a\u4e00\u6b21\u8be5\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\u624b\u52a8\u8fdb\u884c\u7f13\u5b58 \u5e76\u5728\u6b64\u5904\u4f20\u5165, \u5982\u679c\u4e0d\u4f20\u5165, \u5c06\u4f1a\u5728\u9700\u8981\u65f6\u81ea\u52a8\u91cd\u65b0\u83b7\u53d6 (\u4f20\u5165 jsapi_ticket_getfunc \u548c jsapi_ticket_setfunc \u51fd\u6570\u540e\u5c06\u4f1a\u81ea\u52a8\u5ffd\u7565\u6b64\u5904\u7684\u4f20\u5165\u503c) 'partnerid': \u8d22\u4ed8\u901a\u5546\u6237\u8eab\u4efd\u6807\u8bc6, \u652f\u4ed8\u6743\u9650\u4e13\u7528 'partnerkey': \u8d22\u4ed8\u901a\u5546\u6237\u6743\u9650\u5bc6\u94a5 Key, \u652f\u4ed8\u6743\u9650\u4e13\u7528 'paysignkey': \u5546\u6237\u7b7e\u540d\u5bc6\u94a5 Key, \u652f\u4ed8\u6743\u9650\u4e13\u7528 'checkssl': \u662f\u5426\u68c0\u67e5 SSL, \u9ed8\u8ba4\u4e0d\u68c0\u67e5 (False), \u53ef\u907f\u514d urllib3 \u7684 InsecurePlatformWarning \u8b66\u544a :return: \"\"\" self . __request = WechatRequest () if kwargs . get ( 'checkssl' ) is not True : disable_urllib3_warning () # \u53ef\u89e3\u51b3 InsecurePlatformWarning \u8b66\u544a self . __token = kwargs . get ( 'token' ) self . __appid = kwargs . get ( 'appid' ) self . __appsecret = kwargs . get ( 'appsecret' ) self . __encrypt_mode = kwargs . get ( 'encrypt_mode' , 'safe' ) self . __encoding_aes_key = kwargs . get ( 'encoding_aes_key' ) self . __crypto = None self . _update_crypto () self . __access_token_getfunc = kwargs . get ( 'access_token_getfunc' ) self . __access_token_setfunc = kwargs . get ( 'access_token_setfunc' ) self . __access_token_refreshfunc = kwargs . get ( 'access_token_refreshfunc' ) self . __access_token = kwargs . get ( 'access_token' ) self . __access_token_expires_at = kwargs . get ( 'access_token_expires_at' ) self . __jsapi_ticket_getfunc = kwargs . get ( 'jsapi_ticket_getfunc' ) self . __jsapi_ticket_setfunc = kwargs . get ( 'jsapi_ticket_setfunc' ) self . __jsapi_ticket_refreshfunc = kwargs . get ( 'jsapi_ticket_refreshfunc' ) self . __jsapi_ticket = kwargs . get ( 'jsapi_ticket' ) self . __jsapi_ticket_expires_at = kwargs . get ( 'jsapi_ticket_expires_at' ) self . __partnerid = kwargs . get ( 'partnerid' ) self . __partnerkey = kwargs . get ( 'partnerkey' ) self . __paysignkey = kwargs . get ( 'paysignkey' ) @property def token ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d Token \"\"\" self . _check_token () return self . __token @token.setter def token ( self , token ): \"\"\" \u8bbe\u7f6e\u5f53\u524d Token \"\"\" self . __token = token self . _update_crypto () # \u6539\u52a8 Token \u9700\u8981\u91cd\u65b0\u66f4\u65b0 Crypto @property def appid ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d App ID \"\"\" return self . __appid @property def appsecret ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d App Secret \"\"\" return self . __appsecret def set_appid_appsecret ( self , appid , appsecret ): \"\"\" \u8bbe\u7f6e\u5f53\u524d App ID \u53ca App Secret\"\"\" self . __appid = appid self . __appsecret = appsecret self . _update_crypto () # \u6539\u52a8 App ID \u540e\u9700\u8981\u91cd\u65b0\u66f4\u65b0 Crypto @property def encoding_aes_key ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d EncodingAESKey \"\"\" return self . __encoding_aes_key @encoding_aes_key.setter def encoding_aes_key ( self , encoding_aes_key ): \"\"\" \u8bbe\u7f6e\u5f53\u524d EncodingAESKey \"\"\" self . __encoding_aes_key = encoding_aes_key self . _update_crypto () # \u6539\u52a8 EncodingAESKey \u9700\u8981\u91cd\u65b0\u66f4\u65b0 Crypto @property def encrypt_mode ( self ): return self . __encrypt_mode @encrypt_mode.setter def encrypt_mode ( self , encrypt_mode ): \"\"\" \u8bbe\u7f6e\u5f53\u524d\u52a0\u5bc6\u6a21\u5f0f \"\"\" self . __encrypt_mode = encrypt_mode self . _update_crypto () @property def crypto ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d Crypto \u5b9e\u4f8b \"\"\" return self . __crypto @property def access_token ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d access token \u503c, \u672c\u65b9\u6cd5\u4f1a\u81ea\u884c\u7ef4\u62a4 access token \u6709\u6548\u6027 \"\"\" self . _check_appid_appsecret () if callable ( self . __access_token_getfunc ): self . __access_token , self . __access_token_expires_at = self . __access_token_getfunc () if self . __access_token : now = time . time () if self . __access_token_expires_at - now > 60 : return self . __access_token self . grant_access_token () # \u4ece\u817e\u8baf\u670d\u52a1\u5668\u83b7\u53d6 access token \u5e76\u66f4\u65b0 return self . __access_token @property def jsapi_ticket ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d jsapi ticket \u503c, \u672c\u65b9\u6cd5\u4f1a\u81ea\u884c\u7ef4\u62a4 jsapi ticket \u6709\u6548\u6027 \"\"\" self . _check_appid_appsecret () if callable ( self . __jsapi_ticket_getfunc ): self . __jsapi_ticket , self . __jsapi_ticket_expires_at = self . __jsapi_ticket_getfunc () if self . __jsapi_ticket : now = time . time () if self . __jsapi_ticket_expires_at - now > 60 : return self . __jsapi_ticket self . grant_jsapi_ticket () # \u4ece\u817e\u8baf\u670d\u52a1\u5668\u83b7\u53d6 jsapi ticket \u5e76\u66f4\u65b0 return self . __jsapi_ticket @property def partnerid ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d\u8d22\u4ed8\u901a\u5546\u6237\u8eab\u4efd\u6807\u8bc6 \"\"\" return self . __partnerid @property def partnerkey ( self ): \"\"\" \u83b7\u53d6\u5f53\u524d\u8d22\u4ed8\u901a\u5546\u6237\u6743\u9650\u5bc6\u94a5 Key \"\"\" return self . __partnerkey @property def paysignkey ( self ): \"\"\" \u83b7\u53d6\u5546\u6237\u7b7e\u540d\u5bc6\u94a5 Key \"\"\" return self . __paysignkey def grant_access_token ( self ): \"\"\" \u83b7\u53d6 access token \u5e76\u66f4\u65b0\u5f53\u524d\u914d\u7f6e :return: \u8fd4\u56de\u7684 JSON \u6570\u636e\u5305 (\u4f20\u5165 access_token_refreshfunc \u53c2\u6570\u540e\u8fd4\u56de None) \"\"\" self . _check_appid_appsecret () if callable ( self . __access_token_refreshfunc ): self . __access_token , self . __access_token_expires_at = self . __access_token_refreshfunc () return response_json = self . __request . get ( url = \"https://api.weixin.qq.com/cgi-bin/token\" , params = { \"grant_type\" : \"client_credential\" , \"appid\" : self . __appid , \"secret\" : self . __appsecret , }, access_token = self . __access_token ) self . __access_token = response_json [ 'access_token' ] self . __access_token_expires_at = int ( time . time ()) + response_json [ 'expires_in' ] if callable ( self . __access_token_setfunc ): self . __access_token_setfunc ( self . __access_token , self . __access_token_expires_at ) return response_json def grant_jsapi_ticket ( self ): \"\"\" \u83b7\u53d6 jsapi ticket \u5e76\u66f4\u65b0\u5f53\u524d\u914d\u7f6e :return: \u8fd4\u56de\u7684 JSON \u6570\u636e\u5305 (\u4f20\u5165 jsapi_ticket_refreshfunc \u53c2\u6570\u540e\u8fd4\u56de None) \"\"\" self . _check_appid_appsecret () if callable ( self . __jsapi_ticket_refreshfunc ): self . __jsapi_ticket , self . __jsapi_ticket_expires_at = self . __jsapi_ticket_refreshfunc () return response_json = self . __request . get ( url = \"https://api.weixin.qq.com/cgi-bin/ticket/getticket\" , params = { \"type\" : \"jsapi\" , }, access_token = self . access_token , ) self . __jsapi_ticket = response_json [ 'ticket' ] self . __jsapi_ticket_expires_at = int ( time . time ()) + response_json [ 'expires_in' ] if callable ( self . __jsapi_ticket_setfunc ): self . __jsapi_ticket_setfunc ( self . __jsapi_ticket , self . __jsapi_ticket_expires_at ) return response_json def get_access_token ( self ): \"\"\" \u83b7\u53d6 Access Token \u53ca Access Token \u8fc7\u671f\u65e5\u671f, \u4ec5\u4f9b\u7f13\u5b58\u4f7f\u7528, \u5982\u679c\u5e0c\u671b\u5f97\u5230\u539f\u751f\u7684 Access Token \u8bf7\u6c42\u6570\u636e\u8bf7\u4f7f\u7528 :func:`grant_token` **\u4ec5\u4e3a\u517c\u5bb9 v0.6.0 \u4ee5\u524d\u7248\u672c\u4f7f\u7528, \u81ea\u884c\u7ef4\u62a4 access_token \u8bf7\u4f7f\u7528 access_token_setfunc \u548c access_token_getfunc \u8fdb\u884c\u64cd\u4f5c** :return: dict \u5bf9\u8c61, key \u5305\u62ec `access_token` \u53ca `access_token_expires_at` \"\"\" self . _check_appid_appsecret () return { 'access_token' : self . access_token , 'access_token_expires_at' : self . __access_token_expires_at , } def get_jsapi_ticket ( self ): \"\"\" \u83b7\u53d6 Jsapi Ticket \u53ca Jsapi Ticket \u8fc7\u671f\u65e5\u671f, \u4ec5\u4f9b\u7f13\u5b58\u4f7f\u7528, \u5982\u679c\u5e0c\u671b\u5f97\u5230\u539f\u751f\u7684 Jsapi Ticket \u8bf7\u6c42\u6570\u636e\u8bf7\u4f7f\u7528 :func:`grant_jsapi_ticket` **\u4ec5\u4e3a\u517c\u5bb9 v0.6.0 \u4ee5\u524d\u7248\u672c\u4f7f\u7528, \u81ea\u884c\u7ef4\u62a4 jsapi_ticket \u8bf7\u4f7f\u7528 jsapi_ticket_setfunc \u548c jsapi_ticket_getfunc \u8fdb\u884c\u64cd\u4f5c** :return: dict \u5bf9\u8c61, key \u5305\u62ec `jsapi_ticket` \u53ca `jsapi_ticket_expires_at` \"\"\" self . _check_appid_appsecret () return { 'jsapi_ticket' : self . jsapi_ticket , 'jsapi_ticket_expires_at' : self . __jsapi_ticket_expires_at , } def _check_token ( self ): \"\"\" \u68c0\u67e5 Token \u662f\u5426\u5b58\u5728 :raises NeedParamError: Token \u53c2\u6570\u6ca1\u6709\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u63d0\u4f9b \"\"\" if not self . __token : raise NeedParamError ( 'Please provide Token parameter in the construction of class.' ) def _check_appid_appsecret ( self ): \"\"\" \u68c0\u67e5 AppID \u548c AppSecret \u662f\u5426\u5b58\u5728 :raises NeedParamError: AppID \u6216 AppSecret \u53c2\u6570\u6ca1\u6709\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u5b8c\u6574\u63d0\u4f9b \"\"\" if not self . __appid or not self . __appsecret : raise NeedParamError ( 'Please provide app_id and app_secret parameters in the construction of class.' ) def _update_crypto ( self ): \"\"\" \u6839\u636e\u5f53\u524d\u914d\u7f6e\u5185\u5bb9\u66f4\u65b0 Crypto \u7c7b \"\"\" if self . __encrypt_mode in [ 'compatible' , 'safe' ] and self . __encoding_aes_key is not None : if self . __token is None or self . __appid is None : raise NeedParamError ( 'Please provide token and appid parameters in the construction of class.' ) self . __crypto = BasicCrypto ( self . __token , self . __encoding_aes_key , self . __appid ) else : self . __crypto = None","title":"\u5fae\u4fe1\u5f00\u53d1\u5305\uff0cpython\u5b9e\u73b0, wechat_sdk\u5f00\u53d1"},{"location":"009-13--python\u63d0\u9ad8-2/#_11","text":"\u8bbe\u8ba1\u8bb2\u5e08\u548c\u5b66\u751f\u7c7b\uff0c\u8bb2\u5e08\u6709\u4e0a\u8bfe\uff0c\u5907\u8bfe\u7b49\u65b9\u6cd5\uff0c\u5b66\u751f\u6709\u542c\u8bfe\uff0c\u505a\u7ec3\u4e60\u7b49\u65b9\u6cd5\uff0c\u5747\u6709\u59d3\u540d\u3001\u6027\u522b\u3001\u5e74\u9f84\u7b49\u57fa\u672c\u5c5e\u6027 \u8bbe\u8ba1\u804a\u5929Message\u7c7b","title":"\u601d\u7ef4\u953b\u70bc"},{"location":"009-13--python\u63d0\u9ad8-2/#137-with","text":"\u5982\u679c\u4f60\u6709\u9605\u8bfb\u6e90\u7801\u7684\u4e60\u60ef\uff0c\u53ef\u80fd\u4f1a\u770b\u5230\u4e00\u4e9b\u4f18\u79c0\u7684\u4ee3\u7801\u7ecf\u5e38\u51fa\u73b0\u5e26\u6709 \u201cwith\u201d \u5173\u952e\u5b57\u7684\u8bed\u53e5\uff0c\u5b83\u901a\u5e38\u7528\u5728\u4ec0\u4e48\u573a\u666f\u5462\uff1f\u4eca \u5bf9\u4e8e\u7cfb\u7edf\u8d44\u6e90\u5982\u6587\u4ef6\u3001\u6570\u636e\u5e93\u8fde\u63a5\u3001socket \u800c\u8a00\uff0c\u5e94\u7528\u7a0b\u5e8f\u6253\u5f00\u8fd9\u4e9b\u8d44\u6e90\u5e76\u6267\u884c\u5b8c\u4e1a\u52a1\u903b\u8f91\u4e4b\u540e\uff0c\u5fc5\u987b\u505a\u7684\u4e00\u4ef6\u4e8b\u5c31\u662f\u8981\u5173\u95ed\uff08\u65ad\u5f00\uff09\u8be5\u8d44\u6e90\u3002 \u6bd4\u5982 Python \u7a0b\u5e8f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u5f80\u6587\u4ef6\u4e2d\u5199\u5185\u5bb9\uff0c\u5199\u5b8c\u4e4b\u540e\uff0c\u5c31\u8981\u5173\u95ed\u8be5\u6587\u4ef6\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4ec0\u4e48\u60c5\u51b5\u5462\uff1f\u6781\u7aef\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0 \"Too many open files\" \u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u7cfb\u7edf\u5141\u8bb8\u4f60\u6253\u5f00\u7684\u6700\u5927\u6587\u4ef6\u6570\u91cf\u662f\u6709\u9650\u7684\u3002 \u540c\u6837\uff0c\u5bf9\u4e8e\u6570\u636e\u5e93\uff0c\u5982\u679c\u8fde\u63a5\u6570\u8fc7\u591a\u800c\u6ca1\u6709\u53ca\u65f6\u5173\u95ed\u7684\u8bdd\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0 \"Can not connect to MySQL server Too many connections\"\uff0c\u56e0\u4e3a\u6570\u636e\u5e93\u8fde\u63a5\u662f\u4e00\u79cd\u975e\u5e38\u6602\u8d35\u7684\u8d44\u6e90\uff0c\u4e0d\u53ef\u80fd\u65e0\u9650\u5236\u7684\u88ab\u521b\u5efa\u3002 \u6765\u770b\u770b\u5982\u4f55\u6b63\u786e\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u3002","title":"13.7 with\u4e0e\u201c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u201d"},{"location":"009-13--python\u63d0\u9ad8-2/#_12","text":"def m1 (): f = open ( \"output.txt\" , \"w\" ) f . write ( \"python\u4e4b\u7985\" ) f . close () \u8fd9\u6837\u5199\u6709\u4e00\u4e2a\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u5982\u679c\u5728\u8c03\u7528 write \u7684\u8fc7\u7a0b\u4e2d\uff0c\u51fa\u73b0\u4e86\u5f02\u5e38\u8fdb\u800c\u5bfc\u81f4\u540e\u7eed\u4ee3\u7801\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\uff0cclose \u65b9\u6cd5\u65e0\u6cd5\u88ab\u6b63\u5e38\u8c03\u7528\uff0c\u56e0\u6b64\u8d44\u6e90\u5c31\u4f1a\u4e00\u76f4\u88ab\u8be5\u7a0b\u5e8f\u5360\u7528\u8005\u91ca\u653e\u3002\u90a3\u4e48\u8be5\u5982\u4f55\u6539\u8fdb\u4ee3\u7801\u5462\uff1f","title":"\u666e\u901a\u7248\uff1a"},{"location":"009-13--python\u63d0\u9ad8-2/#_13","text":"def m2 (): f = open ( \"output.txt\" , \"w\" ) try : f . write ( \"python\u4e4b\u7985\" ) except IOError : print ( \"oops error\" ) finally : f . close () \u6539\u826f\u7248\u672c\u7684\u7a0b\u5e8f\u662f\u5bf9\u53ef\u80fd\u53d1\u751f\u5f02\u5e38\u7684\u4ee3\u7801\u5904\u8fdb\u884c try \u6355\u83b7\uff0c\u4f7f\u7528 try/finally \u8bed\u53e5\uff0c\u8be5\u8bed\u53e5\u8868\u793a\u5982\u679c\u5728 try \u4ee3\u7801\u5757\u4e2d\u7a0b\u5e8f\u51fa\u73b0\u4e86\u5f02\u5e38\uff0c\u540e\u7eed\u4ee3\u7801\u5c31\u4e0d\u518d\u6267\u884c\uff0c\u800c\u76f4\u63a5\u8df3\u8f6c\u5230 except \u4ee3\u7801\u5757\u3002\u800c\u65e0\u8bba\u5982\u4f55\uff0cfinally \u5757\u7684\u4ee3\u7801\u6700\u7ec8\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u56e0\u6b64\uff0c\u53ea\u8981\u628a close \u653e\u5728 finally \u4ee3\u7801\u4e2d\uff0c\u6587\u4ef6\u5c31\u4e00\u5b9a\u4f1a\u5173\u95ed\u3002 else\u4ec0\u4e48\u65f6\u5019\u6267\u884c? \u53ea\u6709try\u4e2d\u7684\u4ee3\u7801\u6267\u884c\u5b8c\u6ca1\u6709\u4ea7\u751f\u4efb\u4f55\u7684\u5f02\u5e38\u7136\u540e\u6267\u884celse\u4e2d\u7684\u4ee3\u7801 Exception \u8fd9\u4e2a\u5f02\u5e38\u4ee3\u8868\u7684\u662f\u6240\u6709\u7684\u5f02\u5e38,\u5982\u679c\u524d\u9762\u7684\u5f02\u5e38\u90fd\u6ca1\u6709\u6355\u83b7\u5230\u7684\u8bdd\u5c31\u4f1a\u6267\u884c\u8fd9\u4e2a\u5f02\u5e38\u7684\u5904\u7406","title":"\u8fdb\u9636\u7248\uff1a"},{"location":"009-13--python\u63d0\u9ad8-2/#_14","text":"def m3 (): with open ( \"output.txt\" , \"r\" ) as f : f . write ( \"Python\u4e4b\u7985\" ) \u4e00\u79cd\u66f4\u52a0\u7b80\u6d01\u3001\u4f18\u96c5\u7684\u65b9\u5f0f\u5c31\u662f\u7528 with \u5173\u952e\u5b57\u3002open \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u8d4b\u503c\u7ed9\u53d8\u91cf f\uff0c\u5f53\u79bb\u5f00 with \u4ee3\u7801\u5757\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8c03\u7528 f.close() \u65b9\u6cd5\uff0c with \u7684\u4f5c\u7528\u548c\u4f7f\u7528 try/finally \u8bed\u53e5\u662f\u4e00\u6837\u7684\u3002\u90a3\u4e48\u5b83\u7684\u5b9e\u73b0\u539f\u7406\u662f\u4ec0\u4e48\uff1f\u5728\u8bb2 with \u7684\u539f\u7406\u524d\u8981\u6d89\u53ca\u5230\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\uff0c\u5c31\u662f\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff08Context Manager\uff09\u3002","title":"\u9ad8\u7ea7\u7248\uff1a"},{"location":"009-13--python\u63d0\u9ad8-2/#context","text":"\u4e0a\u4e0b\u6587\u5728\u4e0d\u540c\u7684\u5730\u65b9\u8868\u793a\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u8981\u611f\u6027\u7406\u89e3\u3002context\u5176\u5b9e\u8bf4\u767d\u4e86\uff0c\u548c\u6587\u7ae0\u7684\u4e0a\u4e0b\u6587\u662f\u4e00\u4e2a\u610f\u601d\uff0c\u5728\u901a\u4fd7\u4e00\u70b9\uff0c\u6211\u89c9\u5f97\u53eb\u73af\u5883\u66f4\u597d\u3002.... \u6797\u51b2\u5927\u53eb\u4e00\u58f0\u201c\u554a\u4e5f\uff01\u201d.... \u95ee:\u8fd9\u53e5\u8bdd\u6797\u51b2\u7684\u201c\u554a\u4e5f\u201d\u8868\u8fbe\u4e86\u6797\u51b2\u600e\u6837\u7684\u5fc3\u91cc\uff1f \u7b54:\u554a\u4f60\u5988\u4e2a\u5934\u554a\uff01 \u770b\uff0c\u4e00\u7bc7\u6587\u7ae0\uff0c\u7ed9\u4f60\u6458\u5f55\u4e00\u6bb5\uff0c\u6ca1\u524d\u6ca1\u540e\uff0c\u4f60\u8bfb\u4e0d\u61c2\uff0c\u56e0\u4e3a\u6709\u8bed\u5883\uff0c\u5c31\u662f\u8bed\u8a00\u73af\u5883\u5b58\u5728\uff0c\u4e00\u6bb5\u8bdd\u8bf4\u4e86\u4ec0\u4e48\uff0c\u8981\u901a\u8fc7\u4e0a\u4e0b\u6587(\u6587\u7ae0\u7684\u4e0a\u4e0b\u6587)\u6765\u63a8\u65ad\u3002 app\u70b9\u51fb\u4e00\u4e2a\u6309\u94ae\u8fdb\u5165\u4e00\u4e2a\u65b0\u7684\u754c\u9762\uff0c\u4e5f\u8981\u4fdd\u5b58\u4f60\u662f\u5728\u54ea\u4e2a\u5c4f\u5e55\u8df3\u8fc7\u6765\u7684\u7b49\u7b49\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4f60\u70b9\u51fb\u8fd4\u56de\u7684\u65f6\u5019\u80fd\u6b63\u786e\u8df3\u56de\uff0c\u5982\u679c\u4e0d\u5b58\u80af\u5b9a\u5c31\u65e0\u6cd5\u6b63\u786e\u8df3\u56de\u4e86\u3002 \u770b\u8fd9\u4e9b\u90fd\u662f\u4e0a\u4e0b\u6587\u7684\u5178\u578b\u4f8b\u5b50\uff0c\u7406\u89e3\u6210\u73af\u5883\u5c31\u53ef\u4ee5\uff0c(\u800c\u4e14\u4e0a\u4e0b\u6587\u867d\u7136\u53eb\u4e0a\u4e0b\u6587\uff0c\u4f46\u662f\u7a0b\u5e8f\u91cc\u9762\u4e00\u822c\u90fd\u53ea\u6709\u4e0a\u6587\u800c\u5df2\uff0c\u53ea\u662f\u53eb\u7684\u597d\u542c\u53eb\u4e0a\u4e0b\u6587\u3002\u3002\u8fdb\u7a0b\u4e2d\u65ad\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u6709\u4e0a\u6709\u4e0b\u7684\uff0c\u4e0d\u8fc7\u4e0d\u8fd9\u4e2a\u9ad8\u6df1\u7684\u95ee\u9898\u5c31\u4e0d\u8981\u6df1\u7a76\u4e86\u3002\u3002\u3002)","title":"\u4ec0\u4e48\u662f\u4e0a\u4e0b\u6587(context)"},{"location":"009-13--python\u63d0\u9ad8-2/#_15","text":"\u4efb\u4f55\u5b9e\u73b0\u4e86 enter () \u548c exit () \u65b9\u6cd5\u7684\u5bf9\u8c61\u90fd\u53ef\u79f0\u4e4b\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 with \u5173\u952e\u5b57\u3002\u663e\u7136\uff0c\u6587\u4ef6\uff08file\uff09\u5bf9\u8c61\u4e5f\u5b9e\u73b0\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u90a3\u4e48\u6587\u4ef6\u5bf9\u8c61\u662f\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6a21\u62df\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5df1\u7684\u6587\u4ef6\u7c7b\uff0c\u8ba9\u8be5\u7c7b\u5b9e\u73b0 enter () \u548c exit () \u65b9\u6cd5\u3002 class File (): def __init__ ( self , filename , mode ): self . filename = filename self . mode = mode def __enter__ ( self ): print ( \"entering\" ) self . f = open ( self . filename , self . mode ) return self . f def __exit__ ( self , * args ): print ( \"will exit\" ) self . f . close () enter () \u65b9\u6cd5\u8fd4\u56de\u8d44\u6e90\u5bf9\u8c61\uff0c\u8fd9\u91cc\u5c31\u662f\u4f60\u5c06\u8981\u6253\u5f00\u7684\u90a3\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c exit () \u65b9\u6cd5\u5904\u7406\u4e00\u4e9b\u6e05\u9664\u5de5\u4f5c\u3002 \u56e0\u4e3a File \u7c7b\u5b9e\u73b0\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u4f7f\u7528 with \u8bed\u53e5\u4e86\u3002 with File ( 'out.txt' , 'w' ) as f : print ( \"writing\" ) f . write ( 'hello, python' ) \u8fd9\u6837\uff0c\u4f60\u5c31\u65e0\u9700\u663e\u793a\u5730\u8c03\u7528 close \u65b9\u6cd5\u4e86\uff0c\u7531\u7cfb\u7edf\u81ea\u52a8\u53bb\u8c03\u7528\uff0c\u54ea\u6015\u4e2d\u95f4\u9047\u5230\u5f02\u5e38 close \u65b9\u6cd5\u4e5f\u4f1a\u88ab\u8c03\u7528\u3002","title":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"},{"location":"009-13--python\u63d0\u9ad8-2/#_16","text":"Python \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a contextmanager \u7684\u88c5\u9970\u5668\uff0c\u66f4\u8fdb\u4e00\u6b65\u7b80\u5316\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u901a\u8fc7 yield \u5c06\u51fd\u6570\u5206\u5272\u6210\u4e24\u90e8\u5206\uff0cyield \u4e4b\u524d\u7684\u8bed\u53e5\u5728 enter \u65b9\u6cd5\u4e2d\u6267\u884c\uff0cyield \u4e4b\u540e\u7684\u8bed\u53e5\u5728 exit \u65b9\u6cd5\u4e2d\u6267\u884c\u3002\u7d27\u8ddf\u5728 yield \u540e\u9762\u7684\u503c\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 from contextlib import contextmanager @contextmanager def my_open ( path , mode ): f = open ( path , mode ) yield f f . close () \u8c03\u7528 with my_open('out.txt', 'w') as f: f.write(\"hello , the simplest context manager\")","title":"\u5b9e\u73b0\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u53e6\u5916\u65b9\u5f0f"},{"location":"009-13--python\u63d0\u9ad8-2/#_17","text":"Python \u63d0\u4f9b\u4e86 with \u8bed\u6cd5\u7528\u4e8e\u7b80\u5316\u8d44\u6e90\u64cd\u4f5c\u7684\u540e\u7eed\u6e05\u9664\u64cd\u4f5c\uff0c\u662f try/finally \u7684\u66ff\u4ee3\u65b9\u6cd5\uff0c\u5b9e\u73b0\u539f\u7406\u5efa\u7acb\u5728\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e4b\u4e0a\u3002\u6b64\u5916\uff0cPython \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a contextmanager \u88c5\u9970\u5668\uff0c\u66f4\u8fdb\u4e00\u6b65\u7b80\u5316\u4e0a\u4e0b\u7ba1\u7406\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002","title":"\u603b\u7ed3"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/","text":"\u7f51\u7edc\u77e5\u8bc6\u8865\u5145 \u00b6 \u8f6c\u8f7d \u4e3b\u8981\u8bb0\u5f55 \u4e3b\u673a\u4f20\u8f93\u6570\u636e\u5c01\u88c5\u4e0e\u89e3\u5c01\u88c5\u7684\u8fc7\u7a0b TCP\u7684\u4e09\u6b21\u63e1\u624b\u548c\u56db\u6b21\u6325\u624b \u5b50\u7f51\u63a9\u7801\u7684\u5212\u5206 DNS\u534f\u8bae\u539f\u7406 \u7b2c\u4e00\u90e8\u5206 \u6570\u636e\u7684\u5c01\u88c5\u4e0e\u89e3\u5c01\u88c5 \u00b6 \u5e94\u7528\u5c42 \u8868\u793a\u5c42 --- data \u4f1a\u8bdd\u5c42 \u4f20\u8f93\u5c42 --- TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u7f51\u7edc\u5c42 --- IP\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807IP \u6e90IP\uff09 + TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u94fe\u8def\u5c42 --- MAC\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807mac \u6e90mac\uff09+ IP\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807IP \u6e90IP\uff09 + TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u7269\u7406\u5c42 --- bit\u6d41 0101010101010101010101 \u7f51\u5361 --- \u8c03\u7f6e bit\u6d41---\u9ad8\u4f4e\u7535\u538b \u7f51\u5361 --- \u89e3\u8c03 \u9ad8\u4f4e\u7535\u538b---bit\u6d41 \u7269\u7406\u5c42 --- bit\u6d41 0101010101010101010101 \u94fe\u8def\u5c42 --- MAC\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807mac \u6e90mac\uff09+ IP\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807IP \u6e90IP\uff09 + TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u7f51\u7edc\u5c42 --- IP\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807IP \u6e90IP\uff09 + TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u4f20\u8f93\u5c42 --- TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data netstat -lntup|grep \u76ee\u6807\u7aef\u53e3 \u5e94\u7528\u5c42 --- data 2.\u5f53A\u4e3b\u673a\u8bbf\u95eeB\u4e3b\u673a\u7684\u670d\u52a1\uff0c\u5c01\u88c5\u4e0e\u89e3\u5c01\u88c5\u7684\u8be6\u7ec6\u8fc7\u7a0b \u00b6 \u5c01\u88c5\u8fc7\u7a0b \u8bf4\u660e\uff1a 1.\u5f53PC01\u8981\u8bbf\u95eePC02\u768422\u7aef\u53e3\u65f6\uff0c\u5e94\u7528\u5c42\u7684\u6570\u636e\u6309\u7167TCP/IP\u6a21\u578b\u5728\u4f20\u8f93\u5c42\u5c01\u88c5=TCP\u7684\u5934\u90e8+\u6e90\u7aef\u53e3\uff081000\uff0c\u968f\u673a\uff09+\u76ee\u7684\u7aef\u53e3\uff0822\uff09\u3002 2.\u5230\u8fbe\u7f51\u7edc\u5c42\u8fdb\u884c\u5c01\u88c5\uff0c\u6e90ip\uff08\u81ea\u8eabIP\uff09+\u76ee\u7684IP\uff0802.02\uff0c\u5bf9\u7aefIP)\u3002 3.\u5230\u8fbe\u6570\u636e\u94fe\u8def\u5c42\u8fdb\u884c\u5c01\u88c5\uff0c\u6e90MAC(\u81ea\u8eabMAC)\uff0c\u76ee\u7684MAC(##\u4e3a\u7f51\u5173\u7684MAC\u5730\u5740\uff0c\u56e0\u4e3a\u5230\u8fbe\u4e0d\u540c\u7f51\u6bb5\u8981\u901a\u8fc7\u7f51\u5173\uff0c\u6240\u4ee5\u5c01\u88c5\u7684\u662f\u7f51\u5173\u7684MAC##)\u3002 4.\u6700\u7ec8\u5230\u8fbe\u7269\u7406\u5c42\u53d8\u4e3a\u9ad8\u4f4e\u7535\u538b\uff0c\u901a\u8fc7\u7f51\u7ebf\u8fdb\u884c\u4f20\u8f93\u3002 \u89e3\u5c01\u88c5\u8fc7\u7a0b \u8bf4\u660e\uff1a\u5230\u8fbe\u8def\u7531\u5668\u4e4b\u540e 1.\u8def\u7531\u5668\u8fdb\u884c\u8fdb\u884c\u62c6\u5305\uff0c\u62c6\u5230\u4e8c\u5c42\u7684\u65f6\u5019\u770b\u6e90\u76eeMAC\u5730\u5740 \u53ef\u4ee5\u770b\u5230\u76ee\u7684MAC\u662f\u8bbf\u95ee\u8def\u7531\u5668\u7684eth0\u7684\u63a5\u53e3\u3002 2.\u7ee7\u7eed\u62c6\u5305\uff0c\u62c6\u5230\u7f51\u7edc\u5c42\u770b\u8bbf\u95ee\u7684IP\u662f02.02\uff0c\u5728\u8def\u7531\u5668\u7684\u8def\u7531\u8868\u4e2d\u3002\u53ef\u4ee5\u8fdb\u884c\u8f6c\u53d1\u3002 3.\u8f6c\u53d1\u4e4b\u524d\u5148\u8fdb\u884c\u5c01\u88c5\uff0c\u6570\u636e\u94fe\u8def\u5c42\u5c06\u6e90MAC\u53d8\u4e3aeth1\u7684mac\u5730\u5740,\u76ee\u7684mac\u56e0\u4e3a\u4e0d\u77e5\u9053\u5148\u8fdb\u884c\u5168F\u5c01\u88c5\u3002 4.\u4eceEth1\u53e3\u51fa\u53bb\u4ee5\u540e\u53d8\u4e3a\u9ad8\u4f4e\u7535\u538b\u7684\u6a21\u5f0f\u3002 5.\u56e0\u4e3aEth1\u7684\u76ee\u7684mac\u4e3a\u5e7f\u64ad\u7684\u5f62\u5f0f\uff0c\u5728\u540c\u4e00\u7f51\u6bb5\u7684\u8fdb\u884c\u5e7f\u64ad\uff0c\u6536\u5230\u5e7f\u64ad\u7684\u4e3b\u673a\u8fdb\u884c\u62c6\u5305\u3002 \u5f53\u62c6\u5230\u7f51\u7edc\u5c42\u7684\u65f6\u5019\u770b\u5230\u76ee\u7684IP\u4e3a\u81ea\u5df1\u7684IP\u65f6\uff0c\u8fdb\u884c\u5b8c\u6210\u4e0a\u4e00\u5c42\u7684\u89e3\u5c01\u88c5\u3002\u5b8c\u6210\u8bbf\u95ee\u3002 \u4ecePC02\u5230PC01\u56de\u5305\u7684\u8fc7\u7a0b \u00b6 \u8bf4\u660e\uff1a 1.\u4f20\u8f93\u5c42\uff1aTCP\u5305\u5934+\u6e90\u7aef\u53e3\uff08\u81ea\u5df1\uff09+\u76ee\u7684\u7aef\u53e3\uff081000\uff09+date 2.\u7f51\u7edc\u5c42\uff1a\u6e90IP\uff08\u81ea\u5df1\uff09+\u76ee\u7684IP\uff08pc01\uff09+date 3.\u6570\u636e\u94fe\u8def\u5c42\uff1a\u6e90MAC(\u81ea\u5df1)+\u76ee\u7684\uff08\u7f51\u5173\u7684MAC\uff09 4.\u53d8\u4e3a\u9ad8\u4f4e\u7535\u538b\u4ece\u7f51\u7ebf\u4f20\u8f93\u51fa\u53bb \u5230\u8fbe\u8def\u7531\u5668\uff1a 1.\u8fdb\u884c\u62c6\u5305\uff0c\u5230\u8fbe\u6570\u636e\u94fe\u8def\u5c42\uff0c\u67e5\u770b\u76ee\u7684MAC\u4e3a\u81ea\u5df1\u7684eth1\u53e3\uff0c\u662f\u8bbf\u95ee\u81ea\u5df1\u3002 2.\u7ee7\u7eed\u8fdb\u884c\u62c6\u5305\uff0c\u5230\u8fbe\u7f51\u7edc\u5c42\uff0c\u67e5\u770b\u8bbf\u95ee\u7684IP\u4e3a\u8def\u7531\u5668\u8def\u7531\u8868\u4e2d\u7684\u7f51\u6bb5\uff0c\u53ef\u4ee5\u8fdb\u884c\u8f6c\u53d1\u3002 3.\u8def\u7531\u5668\u8fdb\u884c\u5c01\u88c5\uff0c\u5c06\u6e90MAC\u53d8\u4e3aeth0\u7684mac\u5730\u5740\uff0c\u76ee\u7684MAC\u4e3apc01\u7684mac,(\u56e0\u4e3a\u4e4b\u524dPC01\u5df2\u7ecf\u53d1\u5305\u5230\u8fbePC02,\u6240\u4ee5\u77e5\u9053PC01\u7684mac,\u6240\u4ee5\u4e0d\u9700\u8981\u8fdb\u884c\u5e7f\u64ad\u4e86) 4.pc01\u6536\u5230\u56de\u5305\u4e4b\u540e\u9010\u6e10\u8fdb\u884c\u89e3\u5c01\u88c5\uff0c\u81f3\u6b64\uff0c\u53cc\u65b9\u5b8c\u6210\u901a\u4fe1\u3002 \u7b2c\u4e8c\u90e8\u5206 ARP\u534f\u8bae \u00b6 \u00b6 1.\u5f53\u4e24\u53f0\u4e3b\u673a\u901a\u4fe1\u65f6\uff0c\u5728\u4e8c\u5c42\u5c01\u88c5\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u5f97\u77e5\u5bf9\u7aef\u7684mac\u5730\u5740\uff0c\u8fd9\u65f6\u9700\u8981\u901a\u8fc7arp\u5730\u5740\u89e3\u6790\u534f\u8bae\u53bb\u5f97\u77e5\u5bf9\u7aef\u7684mac\u5730\u5740\uff0c\u5f53\u5bf9\u7aef\u7684\u4e3b\u673a\u8fdb\u884cARP\u56de\u5305\u7684\u65f6\u5019\uff0c\u6765\u5b8c\u6210\u4e8c\u5c42mac\u7684\u5c01\u88c5\u3002 2.\u5f53\u4e3b\u673a\u8fde\u63a5\u4ea4\u6362\u673a\u7684\u65f6\u5019\uff0c\u5f53PC01\u5c01\u88c5\u6210ARP\u7684\u5305\uff0c\u6e90\u76ee\u5730\u5740\u4e3a\u5df2\u77e5\uff0c\u6e90MAC\u4e3a\u81ea\u5df1\uff0c\u76ee\u7684MAC\u4e3a\u4ea4\u6362\u673a\u8fde\u63a5\u7684\u63a5\u53e3\u3002 3.\u5230\u8fbe\u4ea4\u6362\u673a\u7684\u65f6\u5019\uff0c\u4ea4\u6362\u673a\u62c6\u5305\u540e\u8fdb\u884carp\u5e7f\u64ad\uff0c\u6bcf\u53f0\u4e3b\u673a\u90fd\u6536\u5230\u4e86ARP\u7684\u5e7f\u64ad\u540e\uff0c\u6b63\u786e\u7684\u4e3b\u673a\u62c6\u5305\u540e\u5f97\u5230ARP\u7684\u8bf7\u6c42\u5305\u3002 4.\u6b63\u786e\u7684\u4e3b\u673a\u4f1a\u56de\u590dARP\u7684\u54cd\u5e94\u5305\u3002arp+\u6e90\u76eeIP+\u6e90\u76eeMAC\uff08\u6ce8\u4e0d\u662f\u4ea4\u6362\u673a\u63a5\u53e3\u7684MAC\uff0c\u800c\u662fARP\u4e3b\u673a\u8bf7\u6c42\u7684MAC\uff09\u3002\u4e3b\u673a\u4e14\u4f1a\u751f\u6210\u4e00\u4e2aARP\u8868\u3002 5.\u6b64\u65f6\u4ea4\u6362\u673a\u4e5f\u4f1a\u751f\u6210\u4e00\u4e2aMAC\u8868\u3002\uff08\u4e3b\u673a1\u7684IP\u548c\u4e3b\u673a1MAC\uff0c\u4e3b\u673a2\u7684IP\u548c\u4e3b\u673a2\u7684MAC\uff09\u7ecf\u8fc7\u51e0\u6b21\u5e7f\u64ad\u4ee5\u540e\uff0c\u4ea4\u6362\u673a\u7684MAC\u8868\u4f1a\u5b8c\u5584\u8d77\u6765\u3002 6.\u4ea4\u6362\u673a\u56de\u5305\u56de\u5230\u4e3b\u673a01\u540e\uff0c\u4e3b\u673a\u4e5f\u4f1a\u8bb0\u5f55\u4e00\u4e2aarp\u7684\u8868\u3002\uff08\u6700\u540e\u6240\u6709\u7684\u4e3b\u673a\u90fd\u4f1a\u5b8c\u5584\u81ea\u5df1\u548c\u5176\u4ed6\u4e3b\u673a\u901a\u8baf\u8fc7\u7684ARP\u8868\u3002\uff09 7.\u6ca1\u901a\u4fe1\u8fc7\u7684\u4e3b\u673a\u4e5f\u4f1a\u8bb0\u5f55\u4e4b\u524d\u5176\u4ed6\u4e3b\u673a\u7684MAC\u5730\u5740\u3002 ARP\u534f\u8bae\u539f\u7406\uff1a 1. \u53d1\u9001arp\u8bf7\u6c42\u5305 \u83b7\u5f97arp\u54cd\u5e94\u5305 --- \u83b7\u5f97\u4e3b\u673amac\u5730\u5740 2. \u5efa\u7acbarp\u8868 \u5efa\u7acb\u4e3b\u673aip\u5730\u5740\u548cmac\u5730\u5740\u5bf9\u5e94\u5173\u7cfb 3. \u51cf\u5c11\u4ea4\u6362\u7f51\u7edc\u4e2d\u5e7f\u64ad\u5305\u4ea7\u751f ARP\u8868\u751f\u6210\u65b9\u5f0f\uff1a \u52a8\u6001\u751f\u6210\uff1a 1\u4e2a\u5c0f\u65f6 \u6e05\u7a7a 2\u4e2a\u5c0f\u65f6 \u81ea\u52a8\u53d1\u9001\u5e7f\u64ad\u5305\uff0c\u52a8\u6001\u5b8c\u5584arp\u8868 \u7f3a\u70b9\uff1a\u4f1a\u91cd\u65b0\u53d1\u9001\u5e7f\u64ad\u5305 \u4f18\u70b9\uff1a\u53ef\u4ee5\u5b9e\u65f6\u66f4\u65b0arp\u4fe1\u606f \u5e94\u7528\u573a\u666f\uff1a\u529e\u516c\u5ba4 \u6559\u5ba4 \u9759\u6001\u914d\u7f6e\uff1a \u6dfb\u52a0 \u5220\u9664 \u624b\u5de5\u6dfb\u52a0 \u7f3a\u70b9\uff1a \u4e0d\u80fd\u5b9e\u65f6\u66f4\u65b0arp\u4fe1\u606f\uff0c\u5f71\u54cd\u901a\u8baf \u4f18\u70b9\uff1a \u57fa\u672c\u4e0a\u675c\u7edd\u4e86\u5e7f\u64ad\u5305\u7684\u4ea7\u751f \u5e94\u7528\u573a\u666f\uff1a\u673a\u623fIDC \u8bbe\u5907\u4e0d\u4f1a\u7ecf\u5e38\u53d8\u5316 \u7b2c\u4e09\u90e8\u5206 TCP\u7684\u4e09\u6b21\u63e1\u624b\u548c\u56db\u6b21\u6325\u624b \u00b6 TCP\u534f\u8bae\uff1a\u4f20\u8f93\u63a7\u5236\u534f\u8bae \u9762\u5411\u8fde\u63a5\u7f51\u7edc\u534f\u8bae \u53ef\u9760\u4f20\u8f93 UDP\u534f\u8bae\uff1a\u7528\u6237\u62a5\u6587\u534f\u8bae \u65e0\u8fde\u63a5\u7f51\u7edc\u534f\u8bae \u4e0d\u53ef\u9760(\u6ce8\u91cd\u4f20\u8f93\u6548\u7387) 1.TCP\u7684\u62a5\u6587\u7ed3\u6784 \u00b6 \u6ce8\u610f\uff1a\u4e3b\u8981\u4e86\u89e3\u6e90\u76ee\u7aef\u53e3\uff0cACK\uff0cSYN\uff0cFIN\u3002 \u63a7\u5236\u4f4d\uff1a syn =1 \u8bf7\u6c42\u5efa\u7acb\u8fde\u63a5 fin =1 \u8bf7\u6c42\u65ad\u5f00\u8fde\u63a5 ack =1 \u53d1\u9001\u786e\u8ba4\u4fe1\u606f 2.\u4e3a\u4ec0\u4e48\u7aef\u53e3\u53f7\u662f1-65535 \u00b6 \u56e0\u4e3a\u7aef\u53e3\u5360\u7528\u7684bit\u4f4d\u662f0-15 \u6240\u4ee56\u662f2\u768416\u7684\u6b21\u65b9\u300265536 \u4f46\u662f0\u662fTCP\u548cUDP\u4e0d\u8bc6\u522b\u7684\u7aef\u53e3\u53f7\u6240\u4ee5\u4e3a65535\u3002 3.TCP\u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b \u00b6 \u4e09\u6b21\u63e1\u624b\u8fc7\u7a0b\uff1a \u7b2c\u4e00\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef \u53d1\u9001TCP\u62a5\u6587 \uff08syn seq=X\uff09 \u7b2c\u4e8c\u6b21\u63e1\u624b\uff1a\u670d\u52a1\u7aef \u63a5\u6536TCP\u62a5\u6587 \u53d1\u9001TCP\u62a5\u6587\uff08syn ack ACK=X+1 seq=Y\uff09 \u7b2c\u4e09\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef \u63a5\u6536TCP\u62a5\u6587 \u53d1\u9001TCP\u62a5\u6587\uff08ack seq=X+1 ACK=Y+1\uff09 4.\u56db\u6b21\u6325\u624b\u7684\u8fc7\u7a0b \u00b6 \u6ce8\uff1a\u56db\u6b21\u6325\u624b\u4e0d\u4e00\u5b9a\u662f\u5ba2\u6237\u7aef\u5148\u53d1\u8d77\u7684 \u56db\u6b21\u6325\u624b\u8fc7\u7a0b\uff08\u4e5f\u6709\u4e09\u6b21\u6325\u624b\u7684\u72b6\u6001\uff0c\u672a\u7b49\u5230\u670d\u52a1\u7aef\u7684ACK\u72b6\u6001\uff0c\u76f4\u63a5\u7b49\u5230\u4e86\u670d\u52a1\u7aef\u7684fin\u72b6\u6001\u3002\uff09\uff1a \u7b2c\u4e00\u6b21\u6325\u624b\uff1a\u5ba2\u6237\u7aef \u53d1\u9001TCP\u62a5\u6587\uff08fin ack\uff09 \u6ce8:ack \u4e3a\u4e4b\u524d\u8fde\u63a5\u7684ack\u786e\u8ba4\u3002 \u7b2c\u4e8c\u6b21\u6325\u624b\uff1a\u670d\u52a1\u7aef \u63a5\u6536TCP\u62a5\u6587 \u53d1\u9001TCP\u62a5\u6587\uff08ack\uff09 \u7b2c\u4e09\u6b21\u6325\u624b\uff1a\u670d\u52a1\u7aef \u53d1\u9001TCP\u62a5\u6587\uff08fin \u518d\u786e\u5b9a\u65ad\u5f00 ack \u8fc7\u7a0b\u786e\u8ba4\uff09 \u7b2c\u56db\u6b21\u6325\u624b\uff1a\u5ba2\u6237\u7aef \u53d1\u9001TCP\u62a5\u6587\uff08ack\uff09 5.TCP\u768411\u79cd\u72b6\u6001 \u00b6 1.\u5f53\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5f00\u59cb\u90fd\u4e3a\u5173\u95ed\u7684\u65f6\u5019\u4e3aCLOSED(1)\u72b6\u6001 2.\u5f53\u670d\u52a1\u7aef\u542f\u52a8\u597d\u670d\u52a1\u4ee5\u540e\u4e3aLISTENING(2)\u72b6\u6001\uff0c\u522b\u4eba\u8bbf\u95ee\u624d\u80fd\u63a5\u6536\u3002 3.\u5f53\u5ba2\u6237\u7aef\u53d1\u9001\u5b8cSYN\u540e\u53d8\u4e3aSYN_SENT(3)\u72b6\u6001\u3002 4.\u670d\u52a1\u7aef\u6536\u5230syn\u4f1a\u5b8c\u6210\u7b2c\u4e8c\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b \u53d8\u4e3a(4)SYN_RCVD\u72b6\u6001 5.\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u670d\u52a1\u7aef\u53d1\u9001\u7684SYN ack\u540e\uff0c\u518d\u53d1\u4e2aACK\u7684\u786e\u8ba4\uff0c\u53d8\u4e3a(5)ESTABLISHED\u7684\u72b6\u6001\u3002 6.\u5f53\u6536\u5230\u5ba2\u6237\u7aef\u7684fin\u540e\uff0c\u670d\u52a1\u7aef\u7531\u539f\u6765\u7684ESTABLISHED\u7684\u72b6\u6001\u53d8\u4e3aCLOSE_WAIT(6) 7.\u5ba2\u6237\u7aef\u53d1\u5b8cFIN\u540e\u53d8\u4e3aFIN_WAIT1\uff087\uff09\u7684\u72b6\u6001\uff0c\u7b49\u5f85\u63a5\u6536\u670d\u52a1\u7aef\u7684ACK\u72b6\u6001\u3002 8.\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u670d\u52a1\u7aef\u7684ACK\u4ee5\u540e\uff0c\u4f1a\u53d8\u4e3aFIN_WAIT2\uff088\uff09\u7684\u72b6\u6001\u3002 9.\u5f53\u5ba2\u6237\u7aef\u6536\u5230FIN\u7b2c\u4e09\u6b21\u6325\u624b\u7684\u8fc7\u7a0b\u540e\uff0c\u5ba2\u6237\u7aef\u4f1a\u53d1\u9001ACK\uff0c\u53d8\u4e3aTIME_WAIT\uff089\uff09\u7684\u72b6\u6001\u3002 10.\u670d\u52a1\u7aef\u53d1\u5b8cFIN\u540e\u4f1a\u53d8\u4e3aCLOSE_WAIT\uff0810\uff09\u7684\u72b6\u6001 11.\u5f53\u6536\u5230\u5ba2\u6237\u7aef\u7684ACK\u4e4b\u540e\uff0c\u670d\u52a1\u7aef\u4f1a\u53d8\u4e3aLAST_ACK(11)\u7684\u72b6\u6001\u3002 \u7b2c\u56db\u90e8\u5206 IP\u5730\u5740\u7684\u5b50\u7f51\u5212\u5206 \u00b6 \u4e3e\u4f8b\uff1a192.16.4.0/27 \u95ee\u9898\uff1a\u53ef\u4ee5\u6709\u51e0\u4e2a\u5b50\u7f51 \u5b50\u7f51\u63a9\u7801 \u6bcf\u4e2a\u5b50\u7f51\u4e3b\u673a\u8303\u56f4 1\\. \u5b50\u7f51\u4e2a\u6570\uff1a2\u7684n\u6b21\u65b9 n\u8868\u793a\u501f\u7528\u591a\u5c11\u4e2a\u4e3b\u673a\u4f4d\u53d8\u4e3a\u5b50\u7f51\u4f4d 2\\. \u7f51\u7edc\u5730\u5740\uff1a\u4e3b\u673a\u4f4d\u5168\u4e3a0\u7684\u5730\u5740 3\\. \u5e7f\u64ad\u5730\u5740\uff1a\u4e3b\u673a\u4f4d\u5168\u4e3a1\u7684\u5730\u5740 \u5206\u6790\uff1a\u5360\u7528\u4e863\u4e2a\u4e3b\u673a\u4f4d \u6240\u4ee5\u5b50\u7f51\u7684\u4e2a\u6570\u4e3a2\u76843\u6b21\u65b9 8\u4e2a\u5b50\u7f51 \u6bcf\u4e2a\u5b50\u7f51\u7684\u8303\u56f4\u7684\u5757\u5927\u5c0f\u662f 256-224=32 \u6240\u4ee5\u6bcf\u4e2a\u5b50\u7f51\u7684\u8303\u56f4 \u6bcf\u4e2a\u5b50\u7f51\u7684\u4e3b\u673a\u8303\u56f4 192.168.4.0-192.168.4.32 192.168.4.1-192.168.4.31 192.168.4.32-192.168.4.64 192.168.4.32-192.168.4.63 192.168.4.64-192.168.4.96 192.168.4.64-192.168.4.95 192.168.4.96-192.168.4.128 192.168.4.96-192.168.4.127 192.168.4.128-192.168.4.160 192.168.4.127-192.168.4.159 192.168.4.160-192.168.4.192 192.168.4.160-192.168.4.191 192.168.4.192-192.168.4.224 192.168.4.191-192.168.4.223 192.168.4.224-192.168.4.255 192.168.4.224-192.168.4.254 \u7b2c\u4e94\u90e8\u5206 DNS\u534f\u8bae\u7684\u539f\u7406 \u00b6 DNS domain name system \u57df\u540d\u89e3\u6790\u7cfb\u7edf \u5e2e\u52a9\u4eba\u7c7b\u5c06\u57df\u540d\u89e3\u6790\u4e3aIP IP\u5730\u5740\u662f\u7f51\u7edc\u901a\u8baf\u65f6\u8981\u4f7f\u7528\u7684\u5730\u5740 \u57df\u540d\u8bbf\u95ee\u7f51\u7ad9\u8bb0\u5f55\u7f51\u7ad9\u670d\u52a1\u5668\u540d\u79f0 \u89e3\u6790\u539f\u7406\uff1a\u5f53\u4e00\u53f0\u4e3b\u673a\u8981\u8bbf\u95ee\u4e00\u4e2a\u7f51\u7ad9\u65f6\uff08jd.com),\u672c\u5730\u67e5\u8be2\u89e3\u6790\u5173\u7cfb\uff0c\u662f\u5426\u6709\u5bf9\u5e94\u7684\u89e3\u6790\u5173\u7cfb\u3002\u53bb\u67e5DNS\u7f13\u5b58\uff08\u4e4b\u524d\u4e4b\u524d\u6709\u8bb0\u5f55\uff09\u3002 #ipconfig/displaydns \u53bb\u67e5\u770b 2.\u5982\u679c\u6ca1\u6709\u8fd8\u4f1a\u53bb\u672c\u5730\u7684hosts\u53bb\u627e C:\\Windows\\System32\\drivers\\etc #linux /etc/hosts \u67e5\u627e 3.\u53bb\u672c\u5730localdns\u670d\u52a1\u5668\uff08\u7f51\u5361\u91cc\u90fd\u5df2\u7ecf\u914d\u7f6e\u5b8c\u6bd5\uff09114.114.114.114\uff08\u6c5f\u82cf\u7535\u4fe1\uff09 223.5.5.5\uff08\u963f\u91cc\uff09 180.76.76.76\uff08\u767e\u5ea6\uff09\u3002 \u5982\u679cDNS\u670d\u52a1\u5668\u6709\u89e3\u6790\u8bb0\u5f55\u7684\u8bdd\u5c31\u8fd4\u56de\u7ed9\u4e3b\u673a\uff0c\u89e3\u6790\u5b8c\u6210\u3002 4.\u5982\u679c\u6ca1\u6709localdns\u670d\u52a1\u5668\u4f1a\u7ee7\u7eed\u5f80\u4e0a\u8d70\uff0c\u53bb\u8bf7\u6c42\u6839\u57df\u540d\u670d\u52a1\u5668\u3002\uff08\u5168\u7403\u53ea\u670913\u53f0\uff09\u3002 #\u57df\u540d\u7ed3\u6784\uff1awww.oldboy. #.\u4ee3\u8868\u6839\u57df\u540d\u670d\u52a1\u5668 .com .cn \u4e00\u7ea7\u57df\u540d\u7533\u8bf7\u7684\u57df\u540d #.jd.com .baidu.com \u4e8c\u7ea7\u57df\u540d\u670d\u52a1\u5668 5.\u672c\u5730\u57df\u540d\u670d\u52a1\u5668\u8bf7\u6c42\u6839\u57df\u540d\u670d\u52a1\u5668\u662f\u5426\u77e5\u9053jd.com\u7684\u5bf9\u5e94IP\u5730\u5740\u662f\u4ec0\u4e48 6.\u6839\u57df\u540d\u670d\u52a1\u5668\u4e0d\u77e5\u9053\uff0c\u53ef\u4ee5\u53bb\u8bf7\u6c42\u4e00\u7ea7\u57df\u540d\u670d\u52a1\u5668\u662f\u5426\u77e5\u9053\u3002\u4e00\u7ea7\u57df\u540d\u4e0d\u77e5\u9053\u7684\u65f6\u5019\u53bb\u8bf7\u6c42\u4e8c\u7ea7\u57df\u540d\u670d\u52a1\u5668\u3002 7.\u4e8c\u7ea7\u57df\u540d\u77e5\u9053\u53ef\u4ee5\u67e5\u5230jd.com\uff0c\u5e76\u80fd\u5bf9\u5e94\u89e3\u6790IP\u5730\u5740\u3002 #\u4e00\u4e2a\u57df\u540d\u548c\u4e00\u4e2aip\u5730\u5740\u7684\u8bb0\u5f55\uff0c\u53eb\u505aA\u8bb0\u5f55\u3002 8.\u628a\u8bb0\u5f55\u4fe1\u606f\u544a\u77e5\u7ed9localdns\u670d\u52a1\u5668\uff0clocaldns\u4f1a\u5728\u672c\u5730\u7f13\u5b58\u4e00\u4efd\uff0c\u4ee5\u514d\u4e0b\u6b21\u8fd8\u8981\u8fdb\u884c\u540c\u6837\u7684\u89e3\u6790\u3002 9.\u518d\u5c06A\u8bb0\u5f55\u53d1\u9001\u7ed9\u4e3b\u673a\uff0c\u4e3b\u673a\u4e5f\u4f1a\u7f13\u5b58\u4e00\u4efd\u3002\u4ee5\u514d\u4e0b\u6b21\u518d\u8fdb\u884c\u67e5\u8be2\u3002 10.\u4e3b\u673a\u5f97\u5230IP\u5730\u5740\uff0c\u7136\u540e\u8fdb\u884c\u5c01\u88c5\uff0c\u628a\u6570\u636e\u5305\u53d1\u9001\u7ed9\u672c\u5730\u7684\u8def\u7531\u5668\uff0c\u8def\u7531\u5668\u548c\u4e92\u8054\u7f51\u8fde\u63a5\u3002 11.\u6700\u7ec8\u4f1a\u53d1\u9001\u5230\u4eac\u4e1c\u7684\u7f51\u7ad9\u4e0a\uff0c\u4eac\u4e1c\u7f51\u7ad9\u518d\u8fdb\u884c\u56de\u590d\uff0c\u6700\u7ec8\u4f1a\u8bbf\u95ee\u5230\u4eac\u4e1c\u3002 #\u9012\u5f52\u67e5\u8be2\uff1a\u76f4\u63a5\u627elocaldns\u8fdb\u884c\u67e5\u8be2 #\u8fed\u4ee3\u67e5\u8be2\uff1a\u4e2d\u95f4\u4f1a\u7ecf\u8fc7\u5f88\u591a\u670d\u52a1\u5668\u8fdb\u884c\u67e5\u8be2\u3002 \u5c0f\u793c\u7269\u8d70\u4e00\u8d70\uff0c\u6765\u7b80\u4e66\u5173\u6ce8\u6211","title":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#_1","text":"\u8f6c\u8f7d \u4e3b\u8981\u8bb0\u5f55 \u4e3b\u673a\u4f20\u8f93\u6570\u636e\u5c01\u88c5\u4e0e\u89e3\u5c01\u88c5\u7684\u8fc7\u7a0b TCP\u7684\u4e09\u6b21\u63e1\u624b\u548c\u56db\u6b21\u6325\u624b \u5b50\u7f51\u63a9\u7801\u7684\u5212\u5206 DNS\u534f\u8bae\u539f\u7406","title":"\u7f51\u7edc\u77e5\u8bc6\u8865\u5145"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#_2","text":"\u5e94\u7528\u5c42 \u8868\u793a\u5c42 --- data \u4f1a\u8bdd\u5c42 \u4f20\u8f93\u5c42 --- TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u7f51\u7edc\u5c42 --- IP\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807IP \u6e90IP\uff09 + TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u94fe\u8def\u5c42 --- MAC\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807mac \u6e90mac\uff09+ IP\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807IP \u6e90IP\uff09 + TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u7269\u7406\u5c42 --- bit\u6d41 0101010101010101010101 \u7f51\u5361 --- \u8c03\u7f6e bit\u6d41---\u9ad8\u4f4e\u7535\u538b \u7f51\u5361 --- \u89e3\u8c03 \u9ad8\u4f4e\u7535\u538b---bit\u6d41 \u7269\u7406\u5c42 --- bit\u6d41 0101010101010101010101 \u94fe\u8def\u5c42 --- MAC\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807mac \u6e90mac\uff09+ IP\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807IP \u6e90IP\uff09 + TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u7f51\u7edc\u5c42 --- IP\u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807IP \u6e90IP\uff09 + TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data \u4f20\u8f93\u5c42 --- TCP/UDP \u5934\u90e8\u4fe1\u606f\uff08\u76ee\u6807\u7aef\u53e3 \u6e90\u7aef\u53e3\uff09 + data netstat -lntup|grep \u76ee\u6807\u7aef\u53e3 \u5e94\u7528\u5c42 --- data","title":"\u7b2c\u4e00\u90e8\u5206 \u6570\u636e\u7684\u5c01\u88c5\u4e0e\u89e3\u5c01\u88c5"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#2ab","text":"\u5c01\u88c5\u8fc7\u7a0b \u8bf4\u660e\uff1a 1.\u5f53PC01\u8981\u8bbf\u95eePC02\u768422\u7aef\u53e3\u65f6\uff0c\u5e94\u7528\u5c42\u7684\u6570\u636e\u6309\u7167TCP/IP\u6a21\u578b\u5728\u4f20\u8f93\u5c42\u5c01\u88c5=TCP\u7684\u5934\u90e8+\u6e90\u7aef\u53e3\uff081000\uff0c\u968f\u673a\uff09+\u76ee\u7684\u7aef\u53e3\uff0822\uff09\u3002 2.\u5230\u8fbe\u7f51\u7edc\u5c42\u8fdb\u884c\u5c01\u88c5\uff0c\u6e90ip\uff08\u81ea\u8eabIP\uff09+\u76ee\u7684IP\uff0802.02\uff0c\u5bf9\u7aefIP)\u3002 3.\u5230\u8fbe\u6570\u636e\u94fe\u8def\u5c42\u8fdb\u884c\u5c01\u88c5\uff0c\u6e90MAC(\u81ea\u8eabMAC)\uff0c\u76ee\u7684MAC(##\u4e3a\u7f51\u5173\u7684MAC\u5730\u5740\uff0c\u56e0\u4e3a\u5230\u8fbe\u4e0d\u540c\u7f51\u6bb5\u8981\u901a\u8fc7\u7f51\u5173\uff0c\u6240\u4ee5\u5c01\u88c5\u7684\u662f\u7f51\u5173\u7684MAC##)\u3002 4.\u6700\u7ec8\u5230\u8fbe\u7269\u7406\u5c42\u53d8\u4e3a\u9ad8\u4f4e\u7535\u538b\uff0c\u901a\u8fc7\u7f51\u7ebf\u8fdb\u884c\u4f20\u8f93\u3002 \u89e3\u5c01\u88c5\u8fc7\u7a0b \u8bf4\u660e\uff1a\u5230\u8fbe\u8def\u7531\u5668\u4e4b\u540e 1.\u8def\u7531\u5668\u8fdb\u884c\u8fdb\u884c\u62c6\u5305\uff0c\u62c6\u5230\u4e8c\u5c42\u7684\u65f6\u5019\u770b\u6e90\u76eeMAC\u5730\u5740 \u53ef\u4ee5\u770b\u5230\u76ee\u7684MAC\u662f\u8bbf\u95ee\u8def\u7531\u5668\u7684eth0\u7684\u63a5\u53e3\u3002 2.\u7ee7\u7eed\u62c6\u5305\uff0c\u62c6\u5230\u7f51\u7edc\u5c42\u770b\u8bbf\u95ee\u7684IP\u662f02.02\uff0c\u5728\u8def\u7531\u5668\u7684\u8def\u7531\u8868\u4e2d\u3002\u53ef\u4ee5\u8fdb\u884c\u8f6c\u53d1\u3002 3.\u8f6c\u53d1\u4e4b\u524d\u5148\u8fdb\u884c\u5c01\u88c5\uff0c\u6570\u636e\u94fe\u8def\u5c42\u5c06\u6e90MAC\u53d8\u4e3aeth1\u7684mac\u5730\u5740,\u76ee\u7684mac\u56e0\u4e3a\u4e0d\u77e5\u9053\u5148\u8fdb\u884c\u5168F\u5c01\u88c5\u3002 4.\u4eceEth1\u53e3\u51fa\u53bb\u4ee5\u540e\u53d8\u4e3a\u9ad8\u4f4e\u7535\u538b\u7684\u6a21\u5f0f\u3002 5.\u56e0\u4e3aEth1\u7684\u76ee\u7684mac\u4e3a\u5e7f\u64ad\u7684\u5f62\u5f0f\uff0c\u5728\u540c\u4e00\u7f51\u6bb5\u7684\u8fdb\u884c\u5e7f\u64ad\uff0c\u6536\u5230\u5e7f\u64ad\u7684\u4e3b\u673a\u8fdb\u884c\u62c6\u5305\u3002 \u5f53\u62c6\u5230\u7f51\u7edc\u5c42\u7684\u65f6\u5019\u770b\u5230\u76ee\u7684IP\u4e3a\u81ea\u5df1\u7684IP\u65f6\uff0c\u8fdb\u884c\u5b8c\u6210\u4e0a\u4e00\u5c42\u7684\u89e3\u5c01\u88c5\u3002\u5b8c\u6210\u8bbf\u95ee\u3002","title":"2.\u5f53A\u4e3b\u673a\u8bbf\u95eeB\u4e3b\u673a\u7684\u670d\u52a1\uff0c\u5c01\u88c5\u4e0e\u89e3\u5c01\u88c5\u7684\u8be6\u7ec6\u8fc7\u7a0b"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#pc02pc01","text":"\u8bf4\u660e\uff1a 1.\u4f20\u8f93\u5c42\uff1aTCP\u5305\u5934+\u6e90\u7aef\u53e3\uff08\u81ea\u5df1\uff09+\u76ee\u7684\u7aef\u53e3\uff081000\uff09+date 2.\u7f51\u7edc\u5c42\uff1a\u6e90IP\uff08\u81ea\u5df1\uff09+\u76ee\u7684IP\uff08pc01\uff09+date 3.\u6570\u636e\u94fe\u8def\u5c42\uff1a\u6e90MAC(\u81ea\u5df1)+\u76ee\u7684\uff08\u7f51\u5173\u7684MAC\uff09 4.\u53d8\u4e3a\u9ad8\u4f4e\u7535\u538b\u4ece\u7f51\u7ebf\u4f20\u8f93\u51fa\u53bb \u5230\u8fbe\u8def\u7531\u5668\uff1a 1.\u8fdb\u884c\u62c6\u5305\uff0c\u5230\u8fbe\u6570\u636e\u94fe\u8def\u5c42\uff0c\u67e5\u770b\u76ee\u7684MAC\u4e3a\u81ea\u5df1\u7684eth1\u53e3\uff0c\u662f\u8bbf\u95ee\u81ea\u5df1\u3002 2.\u7ee7\u7eed\u8fdb\u884c\u62c6\u5305\uff0c\u5230\u8fbe\u7f51\u7edc\u5c42\uff0c\u67e5\u770b\u8bbf\u95ee\u7684IP\u4e3a\u8def\u7531\u5668\u8def\u7531\u8868\u4e2d\u7684\u7f51\u6bb5\uff0c\u53ef\u4ee5\u8fdb\u884c\u8f6c\u53d1\u3002 3.\u8def\u7531\u5668\u8fdb\u884c\u5c01\u88c5\uff0c\u5c06\u6e90MAC\u53d8\u4e3aeth0\u7684mac\u5730\u5740\uff0c\u76ee\u7684MAC\u4e3apc01\u7684mac,(\u56e0\u4e3a\u4e4b\u524dPC01\u5df2\u7ecf\u53d1\u5305\u5230\u8fbePC02,\u6240\u4ee5\u77e5\u9053PC01\u7684mac,\u6240\u4ee5\u4e0d\u9700\u8981\u8fdb\u884c\u5e7f\u64ad\u4e86) 4.pc01\u6536\u5230\u56de\u5305\u4e4b\u540e\u9010\u6e10\u8fdb\u884c\u89e3\u5c01\u88c5\uff0c\u81f3\u6b64\uff0c\u53cc\u65b9\u5b8c\u6210\u901a\u4fe1\u3002","title":"\u4ecePC02\u5230PC01\u56de\u5305\u7684\u8fc7\u7a0b"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#arp","text":"","title":"\u7b2c\u4e8c\u90e8\u5206 ARP\u534f\u8bae"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#tcp","text":"TCP\u534f\u8bae\uff1a\u4f20\u8f93\u63a7\u5236\u534f\u8bae \u9762\u5411\u8fde\u63a5\u7f51\u7edc\u534f\u8bae \u53ef\u9760\u4f20\u8f93 UDP\u534f\u8bae\uff1a\u7528\u6237\u62a5\u6587\u534f\u8bae \u65e0\u8fde\u63a5\u7f51\u7edc\u534f\u8bae \u4e0d\u53ef\u9760(\u6ce8\u91cd\u4f20\u8f93\u6548\u7387)","title":"\u7b2c\u4e09\u90e8\u5206 TCP\u7684\u4e09\u6b21\u63e1\u624b\u548c\u56db\u6b21\u6325\u624b"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#1tcp","text":"\u6ce8\u610f\uff1a\u4e3b\u8981\u4e86\u89e3\u6e90\u76ee\u7aef\u53e3\uff0cACK\uff0cSYN\uff0cFIN\u3002 \u63a7\u5236\u4f4d\uff1a syn =1 \u8bf7\u6c42\u5efa\u7acb\u8fde\u63a5 fin =1 \u8bf7\u6c42\u65ad\u5f00\u8fde\u63a5 ack =1 \u53d1\u9001\u786e\u8ba4\u4fe1\u606f","title":"1.TCP\u7684\u62a5\u6587\u7ed3\u6784"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#21-65535","text":"\u56e0\u4e3a\u7aef\u53e3\u5360\u7528\u7684bit\u4f4d\u662f0-15 \u6240\u4ee56\u662f2\u768416\u7684\u6b21\u65b9\u300265536 \u4f46\u662f0\u662fTCP\u548cUDP\u4e0d\u8bc6\u522b\u7684\u7aef\u53e3\u53f7\u6240\u4ee5\u4e3a65535\u3002","title":"2.\u4e3a\u4ec0\u4e48\u7aef\u53e3\u53f7\u662f1-65535"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#3tcp","text":"\u4e09\u6b21\u63e1\u624b\u8fc7\u7a0b\uff1a \u7b2c\u4e00\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef \u53d1\u9001TCP\u62a5\u6587 \uff08syn seq=X\uff09 \u7b2c\u4e8c\u6b21\u63e1\u624b\uff1a\u670d\u52a1\u7aef \u63a5\u6536TCP\u62a5\u6587 \u53d1\u9001TCP\u62a5\u6587\uff08syn ack ACK=X+1 seq=Y\uff09 \u7b2c\u4e09\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef \u63a5\u6536TCP\u62a5\u6587 \u53d1\u9001TCP\u62a5\u6587\uff08ack seq=X+1 ACK=Y+1\uff09","title":"3.TCP\u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#4","text":"\u6ce8\uff1a\u56db\u6b21\u6325\u624b\u4e0d\u4e00\u5b9a\u662f\u5ba2\u6237\u7aef\u5148\u53d1\u8d77\u7684 \u56db\u6b21\u6325\u624b\u8fc7\u7a0b\uff08\u4e5f\u6709\u4e09\u6b21\u6325\u624b\u7684\u72b6\u6001\uff0c\u672a\u7b49\u5230\u670d\u52a1\u7aef\u7684ACK\u72b6\u6001\uff0c\u76f4\u63a5\u7b49\u5230\u4e86\u670d\u52a1\u7aef\u7684fin\u72b6\u6001\u3002\uff09\uff1a \u7b2c\u4e00\u6b21\u6325\u624b\uff1a\u5ba2\u6237\u7aef \u53d1\u9001TCP\u62a5\u6587\uff08fin ack\uff09 \u6ce8:ack \u4e3a\u4e4b\u524d\u8fde\u63a5\u7684ack\u786e\u8ba4\u3002 \u7b2c\u4e8c\u6b21\u6325\u624b\uff1a\u670d\u52a1\u7aef \u63a5\u6536TCP\u62a5\u6587 \u53d1\u9001TCP\u62a5\u6587\uff08ack\uff09 \u7b2c\u4e09\u6b21\u6325\u624b\uff1a\u670d\u52a1\u7aef \u53d1\u9001TCP\u62a5\u6587\uff08fin \u518d\u786e\u5b9a\u65ad\u5f00 ack \u8fc7\u7a0b\u786e\u8ba4\uff09 \u7b2c\u56db\u6b21\u6325\u624b\uff1a\u5ba2\u6237\u7aef \u53d1\u9001TCP\u62a5\u6587\uff08ack\uff09","title":"4.\u56db\u6b21\u6325\u624b\u7684\u8fc7\u7a0b"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#5tcp11","text":"1.\u5f53\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5f00\u59cb\u90fd\u4e3a\u5173\u95ed\u7684\u65f6\u5019\u4e3aCLOSED(1)\u72b6\u6001 2.\u5f53\u670d\u52a1\u7aef\u542f\u52a8\u597d\u670d\u52a1\u4ee5\u540e\u4e3aLISTENING(2)\u72b6\u6001\uff0c\u522b\u4eba\u8bbf\u95ee\u624d\u80fd\u63a5\u6536\u3002 3.\u5f53\u5ba2\u6237\u7aef\u53d1\u9001\u5b8cSYN\u540e\u53d8\u4e3aSYN_SENT(3)\u72b6\u6001\u3002 4.\u670d\u52a1\u7aef\u6536\u5230syn\u4f1a\u5b8c\u6210\u7b2c\u4e8c\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b \u53d8\u4e3a(4)SYN_RCVD\u72b6\u6001 5.\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u670d\u52a1\u7aef\u53d1\u9001\u7684SYN ack\u540e\uff0c\u518d\u53d1\u4e2aACK\u7684\u786e\u8ba4\uff0c\u53d8\u4e3a(5)ESTABLISHED\u7684\u72b6\u6001\u3002 6.\u5f53\u6536\u5230\u5ba2\u6237\u7aef\u7684fin\u540e\uff0c\u670d\u52a1\u7aef\u7531\u539f\u6765\u7684ESTABLISHED\u7684\u72b6\u6001\u53d8\u4e3aCLOSE_WAIT(6) 7.\u5ba2\u6237\u7aef\u53d1\u5b8cFIN\u540e\u53d8\u4e3aFIN_WAIT1\uff087\uff09\u7684\u72b6\u6001\uff0c\u7b49\u5f85\u63a5\u6536\u670d\u52a1\u7aef\u7684ACK\u72b6\u6001\u3002 8.\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u670d\u52a1\u7aef\u7684ACK\u4ee5\u540e\uff0c\u4f1a\u53d8\u4e3aFIN_WAIT2\uff088\uff09\u7684\u72b6\u6001\u3002 9.\u5f53\u5ba2\u6237\u7aef\u6536\u5230FIN\u7b2c\u4e09\u6b21\u6325\u624b\u7684\u8fc7\u7a0b\u540e\uff0c\u5ba2\u6237\u7aef\u4f1a\u53d1\u9001ACK\uff0c\u53d8\u4e3aTIME_WAIT\uff089\uff09\u7684\u72b6\u6001\u3002 10.\u670d\u52a1\u7aef\u53d1\u5b8cFIN\u540e\u4f1a\u53d8\u4e3aCLOSE_WAIT\uff0810\uff09\u7684\u72b6\u6001 11.\u5f53\u6536\u5230\u5ba2\u6237\u7aef\u7684ACK\u4e4b\u540e\uff0c\u670d\u52a1\u7aef\u4f1a\u53d8\u4e3aLAST_ACK(11)\u7684\u72b6\u6001\u3002","title":"5.TCP\u768411\u79cd\u72b6\u6001"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#ip","text":"\u4e3e\u4f8b\uff1a192.16.4.0/27 \u95ee\u9898\uff1a\u53ef\u4ee5\u6709\u51e0\u4e2a\u5b50\u7f51 \u5b50\u7f51\u63a9\u7801 \u6bcf\u4e2a\u5b50\u7f51\u4e3b\u673a\u8303\u56f4 1\\. \u5b50\u7f51\u4e2a\u6570\uff1a2\u7684n\u6b21\u65b9 n\u8868\u793a\u501f\u7528\u591a\u5c11\u4e2a\u4e3b\u673a\u4f4d\u53d8\u4e3a\u5b50\u7f51\u4f4d 2\\. \u7f51\u7edc\u5730\u5740\uff1a\u4e3b\u673a\u4f4d\u5168\u4e3a0\u7684\u5730\u5740 3\\. \u5e7f\u64ad\u5730\u5740\uff1a\u4e3b\u673a\u4f4d\u5168\u4e3a1\u7684\u5730\u5740 \u5206\u6790\uff1a\u5360\u7528\u4e863\u4e2a\u4e3b\u673a\u4f4d \u6240\u4ee5\u5b50\u7f51\u7684\u4e2a\u6570\u4e3a2\u76843\u6b21\u65b9 8\u4e2a\u5b50\u7f51 \u6bcf\u4e2a\u5b50\u7f51\u7684\u8303\u56f4\u7684\u5757\u5927\u5c0f\u662f 256-224=32 \u6240\u4ee5\u6bcf\u4e2a\u5b50\u7f51\u7684\u8303\u56f4 \u6bcf\u4e2a\u5b50\u7f51\u7684\u4e3b\u673a\u8303\u56f4 192.168.4.0-192.168.4.32 192.168.4.1-192.168.4.31 192.168.4.32-192.168.4.64 192.168.4.32-192.168.4.63 192.168.4.64-192.168.4.96 192.168.4.64-192.168.4.95 192.168.4.96-192.168.4.128 192.168.4.96-192.168.4.127 192.168.4.128-192.168.4.160 192.168.4.127-192.168.4.159 192.168.4.160-192.168.4.192 192.168.4.160-192.168.4.191 192.168.4.192-192.168.4.224 192.168.4.191-192.168.4.223 192.168.4.224-192.168.4.255 192.168.4.224-192.168.4.254","title":"\u7b2c\u56db\u90e8\u5206 IP\u5730\u5740\u7684\u5b50\u7f51\u5212\u5206"},{"location":"010 \u7f51\u7edc\u77e5\u8bc6\u8865\u5145/#dns","text":"DNS domain name system \u57df\u540d\u89e3\u6790\u7cfb\u7edf \u5e2e\u52a9\u4eba\u7c7b\u5c06\u57df\u540d\u89e3\u6790\u4e3aIP IP\u5730\u5740\u662f\u7f51\u7edc\u901a\u8baf\u65f6\u8981\u4f7f\u7528\u7684\u5730\u5740 \u57df\u540d\u8bbf\u95ee\u7f51\u7ad9\u8bb0\u5f55\u7f51\u7ad9\u670d\u52a1\u5668\u540d\u79f0 \u89e3\u6790\u539f\u7406\uff1a\u5f53\u4e00\u53f0\u4e3b\u673a\u8981\u8bbf\u95ee\u4e00\u4e2a\u7f51\u7ad9\u65f6\uff08jd.com),\u672c\u5730\u67e5\u8be2\u89e3\u6790\u5173\u7cfb\uff0c\u662f\u5426\u6709\u5bf9\u5e94\u7684\u89e3\u6790\u5173\u7cfb\u3002\u53bb\u67e5DNS\u7f13\u5b58\uff08\u4e4b\u524d\u4e4b\u524d\u6709\u8bb0\u5f55\uff09\u3002 #ipconfig/displaydns \u53bb\u67e5\u770b 2.\u5982\u679c\u6ca1\u6709\u8fd8\u4f1a\u53bb\u672c\u5730\u7684hosts\u53bb\u627e C:\\Windows\\System32\\drivers\\etc #linux /etc/hosts \u67e5\u627e 3.\u53bb\u672c\u5730localdns\u670d\u52a1\u5668\uff08\u7f51\u5361\u91cc\u90fd\u5df2\u7ecf\u914d\u7f6e\u5b8c\u6bd5\uff09114.114.114.114\uff08\u6c5f\u82cf\u7535\u4fe1\uff09 223.5.5.5\uff08\u963f\u91cc\uff09 180.76.76.76\uff08\u767e\u5ea6\uff09\u3002 \u5982\u679cDNS\u670d\u52a1\u5668\u6709\u89e3\u6790\u8bb0\u5f55\u7684\u8bdd\u5c31\u8fd4\u56de\u7ed9\u4e3b\u673a\uff0c\u89e3\u6790\u5b8c\u6210\u3002 4.\u5982\u679c\u6ca1\u6709localdns\u670d\u52a1\u5668\u4f1a\u7ee7\u7eed\u5f80\u4e0a\u8d70\uff0c\u53bb\u8bf7\u6c42\u6839\u57df\u540d\u670d\u52a1\u5668\u3002\uff08\u5168\u7403\u53ea\u670913\u53f0\uff09\u3002 #\u57df\u540d\u7ed3\u6784\uff1awww.oldboy. #.\u4ee3\u8868\u6839\u57df\u540d\u670d\u52a1\u5668 .com .cn \u4e00\u7ea7\u57df\u540d\u7533\u8bf7\u7684\u57df\u540d #.jd.com .baidu.com \u4e8c\u7ea7\u57df\u540d\u670d\u52a1\u5668 5.\u672c\u5730\u57df\u540d\u670d\u52a1\u5668\u8bf7\u6c42\u6839\u57df\u540d\u670d\u52a1\u5668\u662f\u5426\u77e5\u9053jd.com\u7684\u5bf9\u5e94IP\u5730\u5740\u662f\u4ec0\u4e48 6.\u6839\u57df\u540d\u670d\u52a1\u5668\u4e0d\u77e5\u9053\uff0c\u53ef\u4ee5\u53bb\u8bf7\u6c42\u4e00\u7ea7\u57df\u540d\u670d\u52a1\u5668\u662f\u5426\u77e5\u9053\u3002\u4e00\u7ea7\u57df\u540d\u4e0d\u77e5\u9053\u7684\u65f6\u5019\u53bb\u8bf7\u6c42\u4e8c\u7ea7\u57df\u540d\u670d\u52a1\u5668\u3002 7.\u4e8c\u7ea7\u57df\u540d\u77e5\u9053\u53ef\u4ee5\u67e5\u5230jd.com\uff0c\u5e76\u80fd\u5bf9\u5e94\u89e3\u6790IP\u5730\u5740\u3002 #\u4e00\u4e2a\u57df\u540d\u548c\u4e00\u4e2aip\u5730\u5740\u7684\u8bb0\u5f55\uff0c\u53eb\u505aA\u8bb0\u5f55\u3002 8.\u628a\u8bb0\u5f55\u4fe1\u606f\u544a\u77e5\u7ed9localdns\u670d\u52a1\u5668\uff0clocaldns\u4f1a\u5728\u672c\u5730\u7f13\u5b58\u4e00\u4efd\uff0c\u4ee5\u514d\u4e0b\u6b21\u8fd8\u8981\u8fdb\u884c\u540c\u6837\u7684\u89e3\u6790\u3002 9.\u518d\u5c06A\u8bb0\u5f55\u53d1\u9001\u7ed9\u4e3b\u673a\uff0c\u4e3b\u673a\u4e5f\u4f1a\u7f13\u5b58\u4e00\u4efd\u3002\u4ee5\u514d\u4e0b\u6b21\u518d\u8fdb\u884c\u67e5\u8be2\u3002 10.\u4e3b\u673a\u5f97\u5230IP\u5730\u5740\uff0c\u7136\u540e\u8fdb\u884c\u5c01\u88c5\uff0c\u628a\u6570\u636e\u5305\u53d1\u9001\u7ed9\u672c\u5730\u7684\u8def\u7531\u5668\uff0c\u8def\u7531\u5668\u548c\u4e92\u8054\u7f51\u8fde\u63a5\u3002 11.\u6700\u7ec8\u4f1a\u53d1\u9001\u5230\u4eac\u4e1c\u7684\u7f51\u7ad9\u4e0a\uff0c\u4eac\u4e1c\u7f51\u7ad9\u518d\u8fdb\u884c\u56de\u590d\uff0c\u6700\u7ec8\u4f1a\u8bbf\u95ee\u5230\u4eac\u4e1c\u3002 #\u9012\u5f52\u67e5\u8be2\uff1a\u76f4\u63a5\u627elocaldns\u8fdb\u884c\u67e5\u8be2 #\u8fed\u4ee3\u67e5\u8be2\uff1a\u4e2d\u95f4\u4f1a\u7ecf\u8fc7\u5f88\u591a\u670d\u52a1\u5668\u8fdb\u884c\u67e5\u8be2\u3002 \u5c0f\u793c\u7269\u8d70\u4e00\u8d70\uff0c\u6765\u7b80\u4e66\u5173\u6ce8\u6211","title":"\u7b2c\u4e94\u90e8\u5206 DNS\u534f\u8bae\u7684\u539f\u7406"}]}